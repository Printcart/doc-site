openapi: 3.0.0
info:
  # description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "PrintCart Rest API"
  contact:
    email: printcart@gmail.com
  # termsOfService: "http://swagger.io/terms/"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
servers:
  - url: "https://api.printcart.com/v1"
tags:
  - name: "Product"
  - name: "Side"
  - name: "Image"
  - name: "Clipart"
  - name: "Font"
  - name: "Design"
  - name: "Template"
  - name: "Template Item"
  - name: "Storage"
  - name: "Project"
  - name: "Account"
  - name: "Store"
  - name: "Webhook"
  - name: "Product Template"
  - name: "Template Category"
  - name: "Clipart Storage"
  - name: "Project Folder"
paths:
  /account:
    post:
      tags:
        - "Account"
      operationId: "createAccount"
      summary: "Create Account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
    get:
      tags:
        - "Account"
      operationId: "getAccount"
      summary: "Get Account Info"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseShow"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Account"
      operationId: "updateAccount"
      summary: "Update Account Details"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicAuth: []
  /stores:
    post:
      tags:
        - "Store"
      operationId: "createStore"
      summary: "Create Store"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseCreate"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Store"
      operationId: "getStore"
      summary: "Get Store Info"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many stores"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many stores
                    example: Too many stores
      security:
        - BasicAuth: []
    put:
      tags:
        - "Store"
      operationId: "updateStore"
      summary: "Update store details"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /stores/{storeID}:
    delete:
      tags:
        - "Store"
      operationId: "deleteStore"
      summary: "Delete a store"
      parameters:
        - name: "storeId"
          in: "path"
          description: "Store ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicAuth: []
  # /stores/shopify:
  #   post:
  #     tags:
  #       - "Store"
  #     operationId: "createStoreShopifyPrivateApp"
  #     summary: "Create Store Shopify"
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/StoreShopifyPrivateApp"
  #       required: true
  #     responses:
  #       "201":
  #         description: "Created successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/StoreResponseCreate"
  #       "400":
  #         description: |
  #           - Invalid input
  #           - Please upgrade your account.
  #         content:
  #           application/json:
  #             schema:
  #               anyOf:
  #                 - $ref: "#/components/schemas/InvalidInput"
  #                 - $ref: "#/components/schemas/CheckUserTier"
  #       "401":
  #         description: "Unauthenticated"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Unauthenticated"
  #     security:
  #       - BasicAuth: []
  /stores/store-details:
    get:
      tags:
        - "Store"
      operationId: "getStoreById"
      summary: "Get Store details"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseShow"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /stores/token-revoke:
    put:
      tags:
        - "Store"
      operationId: "tokenRevoke"
      summary: "Renew UnAuth Token"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreTokenRevokeResponse"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicAuth: []
  /products:
    post:
      tags:
        - "Product"
      operationId: "postProduct"
      summary: "Create new product"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseStore"
        "202":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseStore"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Product"
      operationId: "getProduct"
      summary: "Get a list of products"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many products
                    example: Too many products
      security:
        - BasicStore: []
        - UnAuthToken: []
  /products/{productId}:
    get:
      tags:
        - "Product"
      operationId: "getProductById"
      summary: "Get product details"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataObject"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Product"
      operationId: "updateProduct"
      summary: "Update product details"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Product"
      operationId: "deleteProduct"
      summary: "Delete a product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /products/batch:
    post:
      tags:
        - "Product"
      operationId: "postProductsBatch"
      summary: "Create batch products"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatch"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBatchResponse"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Too many products"
                    example: "Too many products"
        "500":
          description: "Something went wrong while create products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while create products"
                    example: "Something went wrong while create products"
      security:
        - BasicStore: []
    put:
      tags:
        - "Product"
      operationId: "putProductsBatch"
      summary: "Update batch products"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatchUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBatchUpdateResponse"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Can't find product with id
            - Not found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/ProductError"
                  - $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Too many products"
                    example: "Too many products"
        "500":
          description: "Something went wrong while update products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while update products"
                    example: "Something went wrong while update products"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Product"
      operationId: "deleteProductsBatch"
      summary: "Delete batch products"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find product with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductError"
        "500":
          description: "Something went wrong while delete products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while delete products"
                    example: "Something went wrong while delete products"
      security:
        - BasicStore: []
  /products/{productId}/designs:
    get:
      tags:
        - "Product"
      operationId: "getDesignsByProduct"
      summary: "Get a list of designs by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs by product"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many designs by product
                    example: Too many designs by product
      security:
        - BasicStore: []
  /products/{productId}/sides:
    get:
      tags:
        - "Product"
      operationId: "getSidesByProduct"
      summary: "Get a list of sides by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many sides by product"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many sides by product
                    example: Too many sides by product
      security:
        - BasicStore: []
        - UnAuthToken: []
  /products/{productId}/designs/count:
    get:
      tags:
        - "Product"
      operationId: "getCountDesignsByProduct"
      summary: "Get a count of designs by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /products/{productId}/sides/count:
    get:
      tags:
        - "Product"
      operationId: "getCountSidesByProduct"
      summary: "Get a count of sides by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /products/count:
    get:
      tags:
        - "Product"
      operationId: "getCountProduct"
      summary: "Get a count of products"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /product-template:
    post:
      tags:
        - "Product Template"
      operationId: "postProductTemplate"
      summary: "Create new product template"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductTemplate"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Product Template"
      operationId: "getProductTemplate"
      summary: "Get a list of Products - Templates"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many products"
                    example: "Too many products"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /product-template/{productId}/templates:
    get:
      tags:
        - "Product Template"
      operationId: "getTemplatesByProduct"
      summary: "Get a list of Templates By Product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many templates
                    example: Too many templates
      security:
        - BasicStore: []
        - UnAuthToken: []
  /product-template/{templateId}/products:
    get:
      tags:
        - "Product Template"
      operationId: "getProductsByTemplate"
      summary: "Get a list of Products By Template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many products by template
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many products by template
                    example: Too many products by template
      security:
        - BasicStore: []
        - UnAuthToken: []
  /sides:
    post:
      tags:
        - "Side"
      operationId: "postSide"
      summary: "Create new product side"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Side"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Side"
      operationId: "getSide"
      summary: "Get a list of product sides"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many sides
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many sides
                    example: Too many sides
      security:
        - BasicStore: []
        - UnAuthToken: []
  /sides/{sideId}:
    get:
      tags:
        - "Side"
      operationId: "getSideById"
      summary: "Get product side details"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Side"
      operationId: "updateSide"
      summary: "Update a product side details"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Side"
      operationId: "deleteSide"
      summary: "Delete a product side"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /sides/batch:
    post:
      tags:
        - "Side"
      operationId: "postSidesBatch"
      summary: "Create batch sides"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatch"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideBatchResponse"
        "400":
          description: |
            - Invalid input
            - Not found
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: "Too many sides"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Too many sides"
                    example: "Too many sides"
        "500":
          description: "Something went wrong while create sides"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while create sides"
                    example: "Something went wrong while create sides"
      security:
        - BasicStore: []
    put:
      tags:
        - "Side"
      operationId: "putSidesBatch"
      summary: "Update batch sides"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Not found
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find side with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideError"
        "413":
          description: "Too many sides"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Too many sides"
                    example: "Too many sides"
        "500":
          description: "Something went wrong while update sides"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while update sides"
                    example: "Something went wrong while update sides"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Side"
      operationId: "deleteSidesBatch"
      summary: "Delete batch sides"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: " Can't find side with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideError"
        "500":
          description: Something went wrong while delete sides
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Something went wrong while delete sides
                    example: Something went wrong while delete sides
      security:
        - BasicStore: []
  /sides/{sideId}/template-items:
    get:
      tags:
        - "Side"
      operationId: "getTemplateItemsBySide"
      summary: "Get a list of template items by side"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many template items by side
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many template items by side
                    example: Too many template items by side
      security:
        - BasicStore: []
        - UnAuthToken: []
  /sides/count:
    get:
      tags:
        - "Side"
      operationId: "getCountSide"
      summary: "Get a count of product sides"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /fonts:
    post:
      tags:
        - "Font"
      operationId: "addFont"
      summary: "Add new font"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Font"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
    get:
      tags:
        - "Font"
      operationId: "getFonts"
      summary: "Get a list of fonts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many fonts
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many fonts
                    example: Too many fonts
      security:
        - BasicStore: []
        - UnAuthToken: []
  /fonts/{fontId}:
    get:
      tags:
        - "Font"
      operationId: "getFontById"
      summary: "Get font details"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Font"
      operationId: "updateFont"
      summary: "Update font details"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FontUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Font"
      operationId: "deleteFont"
      summary: "Delete font"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /fonts/count:
    get:
      tags:
        - "Font"
      operationId: "getCountFont"
      summary: "Get a count of fonts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /images:
    post:
      tags:
        - "Image"
      operationId: "uploadFile"
      summary: "Add new image"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: "string"
                  description: "Image to upload"
                  format: binary
                type: 
                  type: "string"
                  default: null
                  enum:
                    - "null"
                    - "cliparts"
                    - "designs"
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStore"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf: 
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Unsupported Media Type"
                    example: "Unsupported Media Type"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Image"
      operationId: "getImage"
      summary: "Get a list of images"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many images
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many images
                    example: Too many images
      security:
        - BasicStore: []
        - UnAuthToken: []
  /images/{imageId}:
    get:
      tags:
        - "Image"
      operationId: "getImageById"
      summary: "Get image details"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Image"
      operationId: "deleteImageById"
      summary: "Delete a image"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image Id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /images/batch:
    post:
      tags:
        - "Image"
      operationId: "uploadFiles"
      summary: "Add new batch images"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                files[]:
                  type: "string"
                  description: "Image to upload"
                  format: binary
                type: 
                  type: "string"
                  default: null
                  enum:
                    - "null"
                    - "cliparts"
                    - "designs"
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStoreBatch"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Unsupported Media Type"
                    example: "Unsupported Media Type"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /images/count:
    get:
      tags:
        - "Image"
      operationId: "getCountImage"
      summary: "Get a count of images"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /cliparts:
    post:
      tags:
        - "Clipart"
      operationId: "uploadFileClipart"
      summary: "Add new clipart"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: "string"
                  description: "Clipart to upload"
                  format: binary
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStore"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "400":
          description: "File upload missing"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "File upload missing"
                    example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Unsupported Media Type"
                    example: "Unsupported Media Type"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Clipart"
      operationId: "getClipart"
      summary: "Get a list of cliparts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many cliparts
                    example: Too many cliparts
      security:
        - BasicStore: []
        - UnAuthToken: []
  /cliparts/{clipartId}:
    get:
      tags:
        - "Clipart"
      operationId: "getClipartById"
      summary: "Get clipart details"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Clipart"
      operationId: "deleteClipartById"
      summary: "Delete a clipart"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart Id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /clipart/batch:
    post:
      tags:
        - "Clipart"
      operationId: "uploadFilesClipart"
      summary: "Add new batch clipart"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                files[]:
                  type: "string"
                  description: "Clipart to upload"
                  format: binary
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStoreBatch"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "400":
          description: "File upload missing"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "File upload missing"
                    example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Unsupported Media Type"
                    example: "Unsupported Media Type"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /cliparts/count:
    get:
      tags:
        - "Clipart"
      operationId: "getCountClipart"
      summary: "Get a count of cliparts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages:
    post:
      tags:
        - "Clipart Storage"
      operationId: "postClipartStorage"
      summary: "Create new Clipart - Storage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClipartStorage"
      responses:
        "201":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartStorage"
      summary: "Get a list of Cliparts - Storages"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many storages"
                    example: "Too many storages"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{storageId}:
    delete:
      tags:
        - "Clipart Storage"
      operationId: "deleteClipartStorage"
      summary: "Delete a Clipart - Storage"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /clipart-storages/{storageId}/cliparts:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartsByStorage"
      summary: "Get a list of Cliparts by Storage"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many cliparts
                    example: Too many cliparts
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{clipartId}/storages:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getStoragesByClipart"
      summary: "Get a list of Storages by Clipart"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many storages
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many storages
                    example: Too many storages
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs:
    post:
      tags:
        - "Design"
      operationId: "postDesign"
      summary: "Create new design"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/Design"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Missing design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Design"
      operationId: "getDesign"
      summary: "Get a list of designs"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many designs
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many designs
                    example: Too many designs
      security:
        - BasicStore: []
  /designs/{designId}:
    get:
      tags:
        - "Design"
      operationId: "getDesignById"
      summary: "Get design details"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      operationId: "updateDesign"
      summary: "Update design details"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      operationId: "deleteDesign"
      summary: "Delete a design"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /designs/batch:
    post:
      tags:
        - "Design"
      operationId: "postDesignsBatch"
      summary: "Create batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignBatchResponse"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Missing design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many designs"
                    example: "Too many designs"
        "500":
          description: "Something went wrong while create designs"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while create designs"
                    example: "Something went wrong while create designs"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      operationId: "putDesignsBatch"
      summary: "Update batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find design with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/DesignError"
        "413":
          description: "Too many designs"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many designs"
                    example: "Too many designs"
        "500":
          description: "Something went wrong while update designs"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while update designs"
                    example: "Something went wrong while update designs"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      operationId: "deleteDesignsBatch"
      summary: "Delete batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find design with id"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Can't find design with id"
                    example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
        "500":
          description: "Something went wrong while delete designs"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while delete designs"
                    example: "Something went wrong while delete designs"
      security:
        - BasicStore: []
  /designs/{designId}/fonts:
    get:
      tags:
        - "Design"
      operationId: "getFontsInLayersDesignById"
      summary: "Get list fonts layer by design"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignFont"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many fonts"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many fonts"
                    example: "Too many fonts"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs/images:
    get:
      tags:
        - "Design"
      operationId: "getDesignImage"
      summary: "Get a list images by design"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many images"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many images"
                    example: "Too many images"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs/count:
    get:
      tags:
        - "Design"
      operationId: "getCountDesign"
      summary: "Get a count of designs"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /templates:
    post:
      tags:
        - "Template"
      operationId: "postTemplate"
      summary: "Create new template"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Template"
      operationId: "getTemplates"
      summary: "Get a list of templates"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many templates"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many templates"
                    example: "Too many templates"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/template-default:
    get:
      tags:
        - "Template"
      operationId: "getTemplatesDefault"
      summary: "Get a list of templates default"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many templates"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many templates"
                    example: "Too many templates"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/{templateID}:
    get:
      tags:
        - "Template"
      operationId: "getTemplateById"
      summary: "Get template details"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    # put:
    #   tags:
    #     - "Template"
    #   operationId: "updateTemplate"
    #   summary: "Update template details"
    #   parameters:
    #     - name: "templateId"
    #       in: "path"
    #       description: "Template ID"
    #       required: true
    #       schema:
    #         type: "string"
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/TemplateUpdate"
    #   responses:
    #     "200":
    #       description: "Updated successfully"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/TemplateResponseUpdate"
    #     "400":
    #       description: "Invalid input"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/InvalidInput"
    #     "401":
    #       description: "Unauthenticated"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/Unauthenticated"
    #     "404":
    #       description: "Not found"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/NotFound"
    #   security:
    #     - BasicStore: []
    #     - UnAuthToken: []
    delete:
      tags:
        - "Template"
      operationId: "deleteTemplate"
      summary: "Delete a template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /templates/{templateID}/template-items:
    get:
      tags:
        - "Template"
      operationId: "getTemplateItemsByTemplate"
      summary: "Get a list of template items by template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many template items by template
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Too many template items by template
                    example: Too many template items by template
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/count:
    get:
      tags:
        - "Template"
      operationId: "getCountTemplate"
      summary: "Get a count of templates"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /template-category:
    post:
      tags:
        - "Template Category"
      operationId: "postTemplateCategory"
      summary: "Create new Template - Category"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateCategory"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Template Category"
      operationId: "getTemplateCategory"
      summary: "Get a list of Templates - Categories"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many storages"
                    example: "Too many storages"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /template-category/{categoryId}:
    delete:
      tags:
        - "Template Category"
      operationId: "deleteTemplateCategory"
      summary: "Delete a Template - Category"
      parameters:
        - name: "categoryId"
          in: "path"
          description: "Category ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /template-category/{categoryId}/templates:
    get:
      tags:
        - "Template Category"
      operationId: "getTemplatesByCategory"
      summary: "Get a list of Templates By Category"
      parameters:
        - name: "categoryId"
          in: "path"
          description: "Category ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates by category
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many templates by category
                    example: Too many templates by category
      security:
        - BasicStore: []
        - UnAuthToken: []
  /template-category/{templateId}/categories:
    get:
      tags:
        - "Template Category"
      operationId: "getCategoriesByTemplate"
      summary: "Get a list of Categories By Template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many categories by template
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many categories by template
                    example: Too many categories by template
      security:
        - BasicStore: []
        - UnAuthToken: []
  /template-items:
    post:
      tags:
        - "Template Item"
      operationId: "postTemplateItem"
      summary: "Create new template item"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateItemJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/Template"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Missing template file
            - Invalid Content-Type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Template Item"
      operationId: "getTemplateItems"
      summary: "Get a list of template items"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many template items"
                    example: "Too many template items"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /template-items/{templateItemId}:
    get:
      tags:
        - "Template Item"
      operationId: "getTemplateItemById"
      summary: "Get template item details"
      parameters:
        - name: "templateItemId"
          in: "path"
          description: "Template Item ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Template Item"
      operationId: "updateTemplateItem"
      summary: "Update template item details"
      parameters:
        - name: "templateItemId"
          in: "path"
          description: "Template Item ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateItemUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/TemplateUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Invalid Content-Type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template Item"
      operationId: "deleteTemplateItem"
      summary: "Delete a template item"
      parameters:
        - name: "templateItemId"
          in: "path"
          description: "Template item ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /template-items/batch:
    post:
      tags:
        - "Template Item"
      operationId: "postTemplateItemsBatch"
      summary: "Create batch template items"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateItemsBatchJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/TemplateBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemsBatchResponse"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Missing template file
            - Invalid Content-Type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many template items"
                    example: "Too many template items"
        "500":
          description: "Something went wrong while create template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while create template items"
                    example: "Something went wrong while create template items"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Template Item"
      operationId: "putTemplateItemsBatch"
      summary: "Update batch template items"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateItemsBatchUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/TemplateBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateItemsBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Invalid Content-Type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find template with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/DesignError"
        "413":
          description: "Too many template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many template items"
                    example: "Too many template items"
        "500":
          description: "Something went wrong while update template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while update template items"
                    example: "Something went wrong while update template items"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template Item"
      operationId: "deleteTemplateItemsBatch"
      summary: "Delete batch template items"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateItemsBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find template with id"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Can't find template with id"
                    example: "Can't find template with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
        "500":
          description: "Something went wrong while delete template items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while delete template items"
                    example: "Something went wrong while delete template items"
      security:
        - BasicStore: []
  /template-items/{templateId}/fonts:
    get:
      tags:
        - "Template Item"
      operationId: "getFontsInLayersTemplateItemById"
      summary: "Get list fonts layer by template item"
      parameters:
        - name: "templateItemId"
          in: "path"
          description: "Template item ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignFont"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many fonts"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many fonts"
                    example: "Too many fonts"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /template-items/count:
    get:
      tags:
        - "Template Item"
      operationId: "getCountTemplateItems"
      summary: "Get a count of template items"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /storages:
    post:
      tags:
        - "Storage"
      operationId: "postCategory"
      summary: "Create new storage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Storage"
      operationId: "getCategory"
      summary: "Get a list of storages"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many storages"
                    example: "Too many storages"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /storages/{storageId}:
    get:
      tags:
        - "Storage"
      operationId: "getCategoryById"
      summary: "Get Storage details"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Storage"
      operationId: "updateCategory"
      summary: "Update Storage details"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /storages/count:
    get:
      tags:
        - "Storage"
      operationId: "getCountCategory"
      summary: "Get a count of Storages"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /projects:
    post:
      tags:
        - "Project"
      operationId: "postProject"
      summary: "Create new project"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseStore"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
            - Design id: ... already belong to another project
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
                  - $ref: "#/components/schemas/ProjectDesignError"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find design with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Project"
      operationId: "getProject"
      summary: "Get a list of projects"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many projects"
                    example: "Too many projects"
      security:
        - BasicStore: []
  /projects/{projectId}:
    get:
      tags:
        - "Project"
      operationId: "getProjectById"
      summary: "Get project details"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    put:
      tags:
        - "Project"
      operationId: "updateProject"
      summary: "Update project details"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Project"
      operationId: "deleteProject"
      summary: "Delete a project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /projects/batch:
    post:
      tags:
        - "Project"
      operationId: "postProjectsBatch"
      summary: "Create batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBatchResponse"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many projects"
                    example: "Too many projects"
        "500":
          description: "Something went wrong while create projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while create projects"
                    example: "Something went wrong while create projects"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Project"
      operationId: "putProjectsBatch"
      summary: "Update batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBatchUpdateResponse"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: " Can't find project with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectError"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many projects"
                    example: "Too many projects"
        "500":
          description: "Something went wrong while update projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while update projects"
                    example: "Something went wrong while update projects"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Project"
      operationId: "deleteProjectsBatch"
      summary: "Delete batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: " Can't find project with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectError"
        "500":
          description: "Something went wrong while delete projects"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Something went wrong while delete projects"
                    example: "Something went wrong while delete projects"
      security:
        - BasicStore: []
  /projects/{projectId}/designs:
    get:
      tags:
        - "Project"
      operationId: "getDesignsByProject"
      summary: "Get a list of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs by project"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many designs by project"
                    example: "Too many designs by project"
      security:
        - BasicStore: []
  /projects/{projectId}/products:
    get:
      tags:
        - "Project"
      operationId: "getProductsByProject"
      summary: "Get a list of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products by project"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many products by project"
                    example: "Too many products by project"
      security:
        - BasicStore: []
  /projects/count:
    get:
      tags:
        - "Project"
      operationId: "getCountProject"
      summary: "Get a count of projects"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /projects/{projectId}/designs/count:
    get:
      tags:
        - "Project"
      operationId: "getCountDesignsByProject"
      summary: "Get a count of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /projects/{projectId}/products/count:
    get:
      tags:
        - "Project"
      operationId: "getCountProductsByProject"
      summary: "Get a count of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /project-folder:
    post:
      tags:
        - "Project Folder"
      operationId: "postProjectFolder"
      summary: "Create new Project Folder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectFolder"
      responses:
        "201":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    get:
      tags:
        - "Project Folder"
      operationId: "getProjectFolder"
      summary: "Get a list of Projects Folders"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many storages"
                    example: "Too many storages"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /project-folder/{storageId}:
    delete:
      tags:
        - "Project Folder"
      operationId: "deleteProjectFolder"
      summary: "Delete a Project Folder"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
  /project-folder/{storageId}/projects:
    get:
      tags:
        - "Project Folder"
      operationId: "getProjectByFolder"
      summary: "Get a list of Projects by Folder"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many projects folder
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many projects folder
                    example: Too many projects folder
      security:
        - BasicStore: []
        - UnAuthToken: []
  /project-folder/{projectId}/folders:
    get:
      tags:
        - "Project Folder"
      operationId: "getFolderByProject"
      summary: "Get a list of Folders by Project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many folders by project
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: "string"
                    description: Too many folders by project
                    example: Too many folders by project
      security:
        - BasicStore: []
        - UnAuthToken: []
  /webhooks:
    post:
      tags:
        - "Webhook"
      operationId: "postWebhook"
      summary: "Create new webhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
    get:
      tags:
        - "Webhook"
      operationId: "getWebhook"
      summary: "Get a list of webhooks"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many webhooks"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: "Too many webhooks"
                    example: "Too many webhooks"
      security:
        - BasicStore: []
  /webhooks/{webhookId}:
    get:
      tags:
        - "Webhook"
      operationId: "getWebhookById"
      summary: "Get webhook details"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    put:
      tags:
        - "Webhook"
      operationId: "updateWebhook"
      summary: "Update webhook details"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Webhook"
      operationId: "deleteWebhook"
      summary: "Delete a webhook"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      security:
        - BasicStore: []
components:
  securitySchemes:
    BasicAuth:
      type: "basic"
    BasicStore:
      type: "basic"
    UnAuthToken:
      type: "apiKey"
      name: "X-PrintCart-Unauth-Token"
      in: "header"
  schemas:
    Account:
      type: "object"
      required:
        - "email"
        - "password"
      properties:
        name:
          type: "string"
          description: Customer name.
          example: "printcart"
        email:
          type: "string"
          format: "email"
          description: The email address for the customer.
          example: "printcart@gamil.com"
        password:
          type: "string"
          description: Customer password.
          example: "printcart"
        tier:
          type: "string"
          default: "free"
          enum:
            - "free"
            - "premium"
            - "enterprise"
      xml:
        name: "Account"
    AccountUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Customer name.
          example: "printcart"
        email:
          type: "string"
          format: "email"
          description: The email address for the customer.
          example: "printcart@gamil.com"
      xml:
        name: "AccountUpdate"
    AccountResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "19f99961-edac-455e-b407-aa6aa80ec862"
        name:
          type: "string"
          example: "printcart"
        email:
          type: "string"
          format: "email"
          example: "printcart@gmail.com"
        email_verified_at:
          type: "string"
          example: null
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "AccountResponse"
    AccountResponseShow:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/AccountResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "AccountResponseShow"
    AccountResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/AccountResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "AccountResponseStore"
    AccountResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/AccountResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "AccountResponseUpdate"
    Store:
      type: "object"
      properties:
        store_name:
          type: "string"
          example: "printcart store"
        shop_url:
          type: "string"
        integration:
          type: "string"
          default: null
          enum:
            - 'null'
            - 'shopify'
            - 'magento'
            - 'woocommerce'
        integration_details:
          type: "json"
        google_font_api:
          type: "string"
          example: "AIzaSyBtoM...L3iAPUPrpQ"
      xml:
        name: "Store"
    # StoreShopifyPrivateApp:
    #   required:
    #     - "shop_url"
    #     - "access_token"
    #   type: "object"
    #   properties:
    #     store_name:
    #       type: "string"
    #       example: "printcart store"
    #     shop_url:
    #       type: "string"
    #       example: "xxx-dex-test-xxx.myshopify.com"
    #     access_token:
    #       type: "string"
    #       example: "shpat_xxxx28a4f80fe3d2f4cxxxxxxxx"
    #     google_font_api:
    #       type: "string"
    #       example: "AIzaSyBtoM...L3iAPUPrpQ"
    #   xml:
    #     name: "StoreShopifyPrivateApp"
    StoreUpdate:
      type: "object"
      properties:
        store_name:
          type: "string"
          example: "printcart store update"
        shop_url:
          type: "string"
        integration:
          type: "string"
          enum:
            - 'null'
            - 'shopify'
            - 'magento'
            - 'woocommerce'
        integration_details:
          type: "json"
        google_font_api:
          type: "string"
          example: "AIzaSyBtoM...L3iAPUPrpQ"
        imported_products:
          type: "json"
      xml:
        name: "StoreUpdate"
    StoreResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "a2ba0785-7f53-3eea-a020-bac895d357d6"
        name:
          type: "string"
          example: "printcart store"
        sid:
          type: "string"
          example: "pcsia_b9a7d6fa332b74bdd073cabbac0e6ee539ed3b361aca0c2f7b9bbfe683430cce"
        secret:
          type: "string"
          example: "pcsup_02be5f225e8ddb1ff1569cf4bac0c9346c60928394902ab2f193fcd5bfc2657d"
        unauth_token:
          type: "string"
          example: "b20dd13e142d5202aeda6c7365cef5420a82bbf6ad4dc3d16c05711af3a22184"
        google_font_api:
          type: "string"
          example: "AIzaSyBtoM...L3iAPUPrpQ"
        shop_url:
          type: "string"
        integration_type:
          type: "string"
        imported_products:
          type: "json"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "StoreResponse"
    StoreResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "StoreResponseShowDataArray"
    StoreResponseShow:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "StoreResponseShow"
    StoreResponseCreate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "StoreResponseCreate"
    StoreResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "StoreResponseUpdate"
    StoreTokenRevokeResponse:
      type: "object"
      properties:
        unauth_token:
          type: "string"
          example: "22d23e41e296c45b0c6c9cd722398b90a3cc906301bdebfaac4751cf2dowmar3"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "StoreTokenRevokeResponse"
    Product:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a product
          example: "printcart"
        dynamic_side:
          type: "boolean"
          example: true
        viewport_width:
          type: "number"
          format: "float"
          example: 50.5
        viewport_height:
          type: "number"
          format: "float"
          example: 50.5
        scale:
          type: "number"
          format: "float"
          example: 50.5
        dpi:
          type: "integer"
          format: "int64"
          default: 72
          example: 100
        dimension_unit:
          type: "string"
          default: "cm"
          enum:
            - "inch"
            - "cm"
          example: "inch"
        status:
          type: "string"
          default: "publish"
          enum:
            - "publish"
            - "draft"
            - "trashed"
            - "deleted"
          description: Product status
          example: "publish"
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "ps"
              - "pdf"
              - "bmp"
              - "iddd"
          example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
        max_file_upload:
          type: "integer"
          format: "int64"
          default: 1
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          default: 0
          example: 500
        enable_design:
          type: "boolean"
          example: false
        product_image_id:
          type: "string"
          description: Image ID.
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        integration_product_id:
          type: "string"
      xml:
        name: "Product"
    ProductUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the product
          example: "printcart"
        dynamic_side:
          type: "boolean"
          example: true
        viewport_width:
          type: "number"
          format: "float"
          example: 50.5
        viewport_height:
          type: "number"
          format: "float"
          example: 50.5
        scale:
          type: "number"
          format: "float"
          example: 50.5
        dpi:
          type: "integer"
          format: "int64"
          example: 100
        dimension_unit:
          type: "string"
          enum:
            - "inch"
            - "cm"
          example: "inch"
        status:
          type: "string"
          enum:
            - "publish"
            - "draft"
            - "trashed"
            - "deleted"
          description: Product status
          example: "publish"
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "ps"
              - "pdf"
              - "bmp"
              - "iddd"
          example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
        max_file_upload:
          type: "integer"
          format: "int64"
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          example: 500
        enable_design:
          type: "boolean"
          example: false
        product_image_id:
          type: "string"
          description: Image ID.
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
        name: "ProductUpdate"
    ProductBatch:
      type: "object"
      required:
        - "name"
      properties:
        products:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/Product"
      xml:
        name: "ProductBatch"
    ProductBatchUpdate:
      type: "object"
      properties:
        products:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Product ID.
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                description: Updated name of the product
                example: "printcart"
              dynamic_side:
                type: "boolean"
                example: true
              viewport_width:
                type: "number"
                format: "float"
                example: 50.5
              viewport_height:
                type: "number"
                format: "float"
                example: 50.5
              scale:
                type: "number"
                format: "float"
                example: 50.5
              dpi:
                type: "integer"
                format: "int64"
                example: 500
              dimension_unit:
                type: "string"
                enum:
                  - "inch"
                  - "cm"
                example: "inch"
              status:
                type: "string"
                enum:
                  - "publish"
                  - "draft"
                  - "trashed"
                  - "deleted"
                description: Product status
                example: "publish"
              allowed_file_types:
                type: "array"
                items:
                  type: "string"
                  enum:
                    - "jpg"
                    - "png"
                    - "ai"
                    - "ps"
                    - "pdf"
                    - "bmp"
                    - "iddd"
                example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
              max_file_upload:
                type: "integer"
                format: "int64"
                example: 500
              min_jpg_dpi:
                type: "integer"
                format: "int64"
                example: 500
              enable_design:
                type: "boolean"
                example: false
              product_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
        name: "ProductBatchUpdate"
    ProductBatchDelete:
      type: "object"
      properties:
        products:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Product ID
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
      xml:
        name: "ProductBatchDelete"
    ProductResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          example: "printcart"
        dynamic_side:
          type: "boolean"
          example: 500
        viewport_width:
          type: "integer"
          format: "int64"
          example: 500
        viewport_height:
          type: "integer"
          format: "int64"
          example: 500
        scale:
          type: "integer"
          format: "int64"
          example: 500
        dpi:
          type: "integer"
          format: "int64"
          example: 500
        dimension_unit:
          type: "string"
          enum:
            - "inch"
            - "cm"
          example: "inch"
        status:
          type: "string"
          enum:
            - "publish"
            - "draft"
            - "trashed"
            - "deleted"
          example: "publish"
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "ps"
              - "pdf"
              - "bmp"
              - "iddd"
          example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
        max_file_upload:
          type: "integer"
          format: "int64"
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          example: 500
        enable_design:
          type: "boolean"
          example: false
        product_image:
          $ref: "#/components/schemas/ImageResponse"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ProductResponse"
    ProductResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductResponseShowDataObject"
    ProductResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductResponseShowDataArray"
    ProductResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProductResponseStore"
    ProductResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProductResponseUpdate"
    ProductBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProductBatchResponse"
    ProductBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                example: "printcart"
              dynamic_side:
                type: "boolean"
                example: true
              viewport_width:
                type: "number"
                format: "float"
                example: 50.5
              viewport_height:
                type: "number"
                format: "float"
                example: 50.5
              scale:
                type: "number"
                format: "float"
                example: 50.5
              dpi:
                type: "integer"
                format: "int64"
                example: 500
              dimension_unit:
                type: "string"
                enum:
                  - "inch"
                  - "cm"
                example: "inch"
              status:
                type: "string"
                enum:
                  - "publish"
                  - "draft"
                  - "trashed"
                  - "deleted"
                example: "publish"
              allowed_file_types:
                type: "array"
                items:
                  type: "string"
                  enum:
                    - "jpg"
                    - "png"
                    - "ai"
                    - "ps"
                    - "pdf"
                    - "bmp"
                    - "iddd"
                example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
              max_file_upload:
                type: "integer"
                format: "int64"
                example: 500
              min_jpg_dpi:
                type: "integer"
                format: "int64"
                example: 500
              enable_design:
                type: "boolean"
                example: false
              product_image:
                $ref: "#/components/schemas/ImageResponse"
              created_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
              updated_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProductBatchUpdateResponse"
    ProductCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductCount"
    ProductTemplate:
      type: "object"
      required:
        - "product_id"
        - "template_id"
      properties:
        product_id:
          type: "string"
          description: Product ID
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        template_id:
          type: "string"
          description: Template ID
          example: "791da349-3774-46c6-932e-9456212e6ec0"
      xml:
        name: "ProductTemplate"
    Side:
      type: "object"
      required:
        - "product_id"
        - "name"
      properties:
        product_id:
          type: "string"
          description: Product ID
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          description: The name given to a side
          example: "printcart"
        bg_type:
          type: "string"
          default: "image"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "red"
        img_overlay_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        ratio:
          type: "number"
          format: "double"
          example: 100
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        product_size:
          type: "object"
          properties:
            product_input:
              type: "number"
              format: "double"
              example: 100
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
        design_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        design_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
        show_bleed:
          type: "boolean"
          example: true
        bleed_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            left_right:
              type: "number"
              format: "float"
              example: 50.50
        show_safe_zone:
          type: "boolean"
          example: true
        margin_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50
            left_right:
              type: "number"
              format: "float"
              example: 50
        bg_img_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        background_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
        bleed_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        margin_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        measure_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        ratio_image:
          type: "number"
          format: "double"
          example: 100
      xml:
        name: "Side"
    SideUpdate:
      type: "object"
      properties:
        product_id:
          type: "string"
          description: Product ID
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          description: Updated name of the side
          example: "printcart"
        bg_type:
          type: "string"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "red"
        img_overlay_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        ratio:
          type: "number"
          format: "double"
          example: 100
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        product_size:
          type: "object"
          properties:
            product_input:
              type: "number"
              format: "double"
              example: 100
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
        design_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        design_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
        show_bleed:
          type: "boolean"
          example: true
        bleed_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            left_right:
              type: "number"
              format: "float"
              example: 50.50
        show_safe_zone:
          type: "boolean"
          example: true
        margin_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50
            left_right:
              type: "number"
              format: "float"
              example: 50
        bg_img_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        background_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
        bleed_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        margin_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        measure_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        ratio_image:
          type: "number"
          format: "double"
          example: 100
      xml:
        name: "SideUpdate"
    SideCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideCount"
    SideBatch:
      type: "object"
      required:
        - "name"
      properties:
        sides:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/Side"
      xml:
        name: "SideBatch"
    SideBatchUpdate:
      type: "object"
      required:
        - "product_id"
        - "name"
      properties:
        sides:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              product_id:
                type: "string"
                description: Product ID
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                description: Updated name of the side
                example: "printcart"
              bg_type:
                type: "string"
                enum:
                  - "color"
                  - "image"
                  - "transparent"
                example: "image"
              bg_color_value:
                type: "string"
                example: "red"
              img_overlay_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              ratio:
                type: "number"
                format: "double"
                example: 100
              background_included:
                type: "boolean"
                example: true
              show_overlay:
                type: "boolean"
                example: true
              include_overlay:
                type: "boolean"
                example: true
              product_size:
                type: "object"
                properties:
                  product_input:
                    type: "number"
                    format: "double"
                    example: 100
                  product_width:
                    type: "number"
                    format: "float"
                    example: 50
                  product_height:
                    type: "number"
                    format: "float"
                    example: 50
              design_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
              design_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
              show_bleed:
                type: "boolean"
                example: true
              bleed_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
              show_safe_zone:
                type: "boolean"
                example: true
              margin_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50
              bg_img_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              background_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
              bleed_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              margin_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              measure_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              ratio_image:
                type: "number"
                format: "double"
                example: 100
      xml:
        name: "SideBatchUpdate"
    SideBatchDelete:
      type: "object"
      properties:
        sides:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      xml:
        name: "SideBatchDelete"
    SideResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        product:
          $ref: "#/components/schemas/ProductResponse"
        name:
          type: "string"
          example: "printcart"
        bg_type:
          type: "string"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "storageId"
        img_overlay:
          $ref: "#/components/schemas/ImageResponse"
        ratio:
          type: "number"
          format: "double"
          example: 100
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        product_size:
          type: "object"
          properties:
            input:
              type: "number"
              format: "double"
              example: 100
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
        design_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        design_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
        show_bleed:
          type: "boolean"
          example: true
        bleed_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            left_right:
              type: "number"
              format: "float"
              example: 50.50
        show_safe_zone:
          type: "boolean"
          example: true
        margin_size:
          type: "object"
          properties:
            top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            left_right:
              type: "number"
              format: "float"
              example: 50.50
        side_image:
          $ref: "#/components/schemas/ImageResponse"
        background_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
        bleed_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        margin_position:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        measure_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "double"
              example: 100
            height:
              type: "number"
              format: "double"
              example: 100
            top:
              type: "number"
              format: "double"
              example: 100
            left:
              type: "number"
              format: "double"
              example: 100
        ratio_image:
          type: "number"
          format: "double"
          example: 100
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "SideResponse"
    SideResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideResponseShowDataObject"
    SideResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideResponseShowDataArray"
    SideResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "SideResponseStore"
    SideResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "SideResponseUpdate"
    SideBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "SideBatchResponse"
    SideBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              product:
                $ref: "#/components/schemas/ProductResponse"
              name:
                type: "string"
                example: "printcart"
              bg_type:
                type: "string"
                enum:
                  - "color"
                  - "image"
                  - "transparent"
                example: "image"
              bg_color_value:
                type: "string"
                example: "red"
              img_overlay:
                $ref: "#/components/schemas/ImageResponse"
              ratio:
                type: "number"
                format: "double"
                example: 100
              background_included:
                type: "boolean"
                example: true
              show_overlay:
                type: "boolean"
                example: true
              include_overlay:
                type: "boolean"
                example: true
              product_size:
                type: "object"
                properties:
                  input:
                    type: "number"
                    format: "double"
                    example: 100
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
              design_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
              design_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
              show_bleed:
                type: "boolean"
                example: true
              bleed_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
              show_safe_zone:
                type: "boolean"
                example: true
              margin_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
              side_image:
                $ref: "#/components/schemas/ImageResponse"
              background_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
              bleed_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              margin_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              measure_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              ratio_image:
                type: "number"
                format: "double"
                example: 100
              created_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
              updated_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "SideBatchUpdateResponse"
    Font:
      type: "object"
      required:
        - "name"
        - "alias"
        - "url"
        - "type"
        - "subset"
      properties:
        name:
          type: "string"
          description: The name given to a font
          example: "printcart"
        alias:
          type: "string"
          example: "printcart"
        url:
          type: "string"
          format: "url"
          example: "https//:printcart.com/printcart"
        type:
          type: "string"
          example: "printcart"
        subset:
          type: "string"
          example: "printcart"
      xml:
        name: "Font"
    FontUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the font
          example: "printcart"
        alias:
          type: "string"
          example: "printcart"
        url:
          type: "string"
          format: "url"
          example: "https//:printcart.com/printcart"
        type:
          type: "string"
          example: "printcart"
        subset:
          type: "string"
          example: "printcart"
      xml:
        name: "FontUpdate"
    FontResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "bff22494-79c3-312b-ba7e-6d6f6d57401c"
        name:
          type: "string"
          example: "printcart"
        alias:
          type: "string"
          example: "printcart"
        url:
          type: "string"
          example: "https//:printcart.com/printcart"
        type:
          type: "string"
          example: "printcart"
        subset:
          type: "string"
          example: "printcart"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "FontResponse"
    FontResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontResponseShowDataObject"
    FontResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontResponseShowDataArray"
    FontResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "FontResponseStore"
    FontResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Update successfully"
          example: "Update successfully"
      xml:
        name: "FontResponseUpdate"
    FontCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontCount"
    ClipartStorage:
      type: "object"
      required:
        - "category_id"
        - "clipart_id"
      properties:
        category_id:
          type: "string"
          description: Storage ID
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        clipart_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978fxxxxxx"
      xml:
        name: "ClipartStorage"
    ImageResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        name:
          type: "string"
          example: "printcart"
        display_name:
          type: "string"
          example: "printcart"
        url:
          type: "string"
          example: "https://local-printcart-src-media.s3.us-east-2.amazonaws.com/images/19f99961-edac-455e-b407-aa6aa80ec862/0V34SX2YcE31B3zZ0xcm5dFbN1fGUdZc9GRIlxvP.jpg"
        alt:
          type: "string"
          example: "printcart"
        width:
          type: "integer"
          format: "int64"
          example: 500
        height:
          type: "integer"
          format: "int64"
          example: 500
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ImageResponse"
    ImageResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageResponseShowDataObject"
    ImageResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageResponseShowDataArray"
    ImageResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ImageResponseStore"
    ImageResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Update successfully"
          example: "Update successfully"
      xml:
        name: "ImageResponseUpdate"
    ImageResponseStoreBatch:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ImageResponseStoreBatch"
    ImageCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageCount"
    Design:
      required:
        - "side_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: "Lorem ipsum..."
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_file:
          type: "string"
          description: "Image file"
          format: binary
        quantity:
          type: "integer"
          format: "int64"
          default: 1
          example: 50
        note:
          type: "string"
          example: "printcart"
        template_id:
          type: "string"
          default: null
          example: null
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        status:
          type: "string"
          default: "processing"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "Design"
    DesignJson:
      type: "object"
      required:
        - "side_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: "Lorem ipsum..."
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        quantity:
          type: "integer"
          format: "int64"
          default: 1
          example: 50
        note:
          type: "string"
          example: "printcart"
        template_id:
          type: "string"
          default: null
          example: null
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        status:
          type: "string"
          default: "processing"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "DesignJson"
    DesignUpdate:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_file:
          type: "string"
          description: "Image file"
          format: binary
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "DesignUpdate"
    DesignUpdateJson:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "DesignUpdateJson"
    DesignBatch:
      type: "object"
      required:
        - "side_id"
      properties:
        designs:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/Design"
      xml:
        name: "DesignBatch"
    DesignBatchJson:
      type: "object"
      required:
        - "side_id"
      properties:
        designs:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/DesignJson"
      xml:
        name: "DesignBatchJson"
    DesignBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "DesignBatchResponse"
    DesignBatchUpdate:
      type: "object"
      properties:
        designs:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Design ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              design_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
                description: Lorem ipsum...
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              design_file:
                type: "string"
                description: "Image file"
                format: binary
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart"
              layers:
                type: "application/json"
                description: "Lorem ipsum..."
                example:
                  [
                    {
                      "top": 183.5025,
                      "left": 195.79,
                      "text": "Blackbird",
                      "width": 68.33984375,
                      "height": 22.6,
                      "originX": "left",
                      "originY": "top",
                      "fontSize": 20,
                      "fontStyle": "normal",
                      "textAlign": "left",
                      "fontFamily": "Yellowtail",
                      "fontWeight": "normal",
                    },
                  ]
              status:
                type: "string"
                enum:
                  - "accepted"
                  - "processing"
                  - "declined"
                  - "trashed"
                  - "deleted"
                description: Design status
                example: "accepted"
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "DesignBatchUpdate"
    DesignBatchUpdateJson:
      type: "object"
      properties:
        designs:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Design ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              design_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
                description: Lorem ipsum...
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              design_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart"
              layers:
                type: "application/json"
                description: "Lorem ipsum..."
                example:
                  [
                    {
                      "top": 183.5025,
                      "left": 195.79,
                      "text": "Blackbird",
                      "width": 68.33984375,
                      "height": 22.6,
                      "originX": "left",
                      "originY": "top",
                      "fontSize": 20,
                      "fontStyle": "normal",
                      "textAlign": "left",
                      "fontFamily": "Yellowtail",
                      "fontWeight": "normal",
                    },
                  ]
              status:
                type: "string"
                enum:
                  - "accepted"
                  - "processing"
                  - "declined"
                  - "trashed"
                  - "deleted"
                description: Design status
                example: "accepted"
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "DesignBatchUpdateJson"
    DesignBatchDelete:
      type: "object"
      properties:
        designs:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Design ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "DesignBatchDelete"
    DesignBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project:
                $ref: "#/components/schemas/ProjectResponse"
              side:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                  product:
                    $ref: "#/components/schemas/ProductResponse"
                  name:
                    type: "string"
                    example: "printcart"
                  bg_type:
                    type: "string"
                    enum:
                      - "color"
                      - "image"
                      - "transparent"
                    example: "image"
                  bg_color_value:
                    type: "string"
                    example: "red"
                  img_top_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_left_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_bottom_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_right_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_overlay:
                    $ref: "#/components/schemas/ImageResponse"
                  version:
                    type: "string"
                    example: "version 1.0.0"
                  ratio:
                    type: "integer"
                    format: "int64"
                    example: 100
                  background_included:
                    type: "boolean"
                    example: true
                  show_overlay:
                    type: "boolean"
                    example: true
                  include_overlay:
                    type: "boolean"
                    example: true
                  product_width:
                    type: "number"
                    format: "float"
                    example: 50
                  product_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_width:
                    type: "number"
                    format: "float"
                    example: 50
                  real_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_top:
                    type: "number"
                    format: "float"
                    example: 50
                  real_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_width:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_height:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_top:
                    type: "number"
                    format: "float"
                    example: 50
                  show_bleed:
                    type: "boolean"
                    example: true
                  bleed_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  bleed_left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
                  show_safe_zone:
                    type: "boolean"
                    example: true
                  margin_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  margin_left_right:
                    type: "number"
                    format: "float"
                    example: 50
                  background_img:
                    $ref: "#/components/schemas/ImageResponse"
                  created_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
                  updated_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
              design_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
              product:
                $ref: "#/components/schemas/ProductResponse"
              preview_image:
                $ref: "#/components/schemas/ImageResponse"
              design_image:
                $ref: "#/components/schemas/ImageResponse"
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart note"
              status:
                type: "string"
                enum:
                  - "accepted"
                  - "processing"
                  - "declined"
                  - "trashed"
                  - "deleted"
                example: "accepted"
              original_output_options:
                type: "object"
                properties:
                  dpi:
                    type: "integer"
                    format: "int64"
                    example: 500
                  dimension_unit:
                    type: "string"
                    enum:
                      - "inch"
                      - "cm"
                    example: "inch"
              original_side:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                  product:
                    $ref: "#/components/schemas/ProductResponse"
                  name:
                    type: "string"
                    example: "printcart"
                  bg_type:
                    type: "string"
                    enum:
                      - "color"
                      - "image"
                      - "transparent"
                    example: "image"
                  bg_color_value:
                    type: "string"
                    example: "red"
                  img_top_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_left_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_bottom_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_right_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_overlay:
                    $ref: "#/components/schemas/ImageResponse"
                  version:
                    type: "string"
                    example: "version 1.0.0"
                  ratio:
                    type: "integer"
                    format: "int64"
                    example: 100
                  background_included:
                    type: "boolean"
                    example: true
                  show_overlay:
                    type: "boolean"
                    example: true
                  include_overlay:
                    type: "boolean"
                    example: true
                  product_width:
                    type: "number"
                    format: "float"
                    example: 50
                  product_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_width:
                    type: "number"
                    format: "float"
                    example: 50
                  real_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_top:
                    type: "number"
                    format: "float"
                    example: 50
                  real_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_width:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_height:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_top:
                    type: "number"
                    format: "float"
                    example: 50
                  show_bleed:
                    type: "boolean"
                    example: true
                  bleed_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  bleed_left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
                  show_safe_zone:
                    type: "boolean"
                    example: true
                  margin_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  margin_left_right:
                    type: "number"
                    format: "float"
                    example: 50
                  background_img:
                    $ref: "#/components/schemas/ImageResponse"
                  created_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
                  updated_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
              layers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    top:
                      type: "number"
                      example: 38.9832354205
                    left:
                      type: "number"
                      example: 329.6631024663
                    text:
                      type: "string"
                      example: "Heading"
                    width:
                      type: "integer"
                      format: "int64"
                      example: 158
                    height:
                      type: "integer"
                      format: "int64"
                      example: 47.46
                    originX:
                      type: "string"
                      example: "left"
                    originY:
                      type: "string"
                      example: "top"
                    fontSize:
                      type: "integer"
                      format: "int64"
                      example: 42
                    minWidth:
                      type: "integer"
                      format: "int64"
                      example: 20
                    fontStyle:
                      type: "string"
                      example: "normal"
                    textAlign:
                      type: "string"
                      example: "left"
                    underline:
                      type: "boolean"
                      example: false,
                    fontFamily:
                      type: "string"
                      example: "Roboto"
                    fontWeight:
                      type: "string"
                      example: "normal"
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
              created_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
              updated_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "DesignBatchUpdateResponse"
    DesignCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignCount"
    DesignResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/components/schemas/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
        product:
          $ref: "#/components/schemas/ProductResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        design_image:
          $ref: "#/components/schemas/ImageResponse"
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart note"
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          example: "accepted"
        original_output_options:
          type: "object"
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        original_side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/components/schemas/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "DesignResponse"
    DesignLayerResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/components/schemas/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        design_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
        product:
          $ref: "#/components/schemas/ProductResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        design_image:
          $ref: "#/components/schemas/ImageResponse"
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart note"
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          example: "accepted"
        original_output_options:
          type: "object"
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        original_side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/components/schemas/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        layers:
          type: "array"
          items:
            type: "object"
            properties:
              top:
                type: "number"
                example: 38.9832354205
              left:
                type: "number"
                example: 329.6631024663
              text:
                type: "string"
                example: "Heading"
              width:
                type: "integer"
                format: "int64"
                example: 158
              height:
                type: "integer"
                format: "int64"
                example: 47.46
              originX:
                type: "string"
                example: "left"
              originY:
                type: "string"
                example: "top"
              fontSize:
                type: "integer"
                format: "int64"
                example: 42
              minWidth:
                type: "integer"
                format: "int64"
                example: 20
              fontStyle:
                type: "string"
                example: "normal"
              textAlign:
                type: "string"
                example: "left"
              underline:
                type: "boolean"
                example: false,
              fontFamily:
                type: "string"
                example: "Roboto"
              fontWeight:
                type: "string"
                example: "normal"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "DesignLayerResponse"
    DesignResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignResponseShowDataObject"
    DesignResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/DesignResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignResponseShowDataArray"
    DesignResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "DesignResponseStore"
    DesignResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "DesignResponseUpdate"
    DesignFont:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignFont"
    Template:
      type: "object"
      properties:
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
          name: "Template"
    TemplateUpdate:
      properties:
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
        name: "TemplateUpdate"
    TemplateResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "791da349-3774-46c6-932e-9456212e6ec0"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "TemplateResponse"
    TemplateResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "TemplateResponseStore"
    TemplateResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateResponseShowDataObject"
    TemplateResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateResponseShowDataArray"
    TemplateResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "TemplateResponseUpdate"
    TemplateCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateCount"
    TemplateCategory:
      type: "object"
      required:
        - "category_id"
      properties:
        category_id:
          type: "string"
          description: Category ID
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        template_id:
          type: "string"
          description: Template ID
          example: "791da349-3774-46c6-932e-9456212e6ec0"
      xml:
        name: "TemplateCategory"
    TemplateItem:
      type: "object"
      required:
        - "side_id"
        - "template_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        template_id:
          type: "string"
          description: Template ID
          example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
        template_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_file:
          type: "string"
          description: "Image file"
          format: binary
        quantity:
          type: "integer"
          format: "int64"
          default: 1
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateItem"
    TemplateItemJson:
      type: "object"
      required:
        - "template_id"
        - "side_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        template_id:
          type: "string"
          description: Template ID
          example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
        template_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        quantity:
          type: "integer"
          format: "int64"
          default: 1
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateItemJson"
    TemplateItemsBatch:
      type: "object"
      required:
        - "template_id"
        - "side_id"
      properties:
        template_items:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/TemplateItem"
      xml:
        name: "TemplateItemsBatch"
    TemplateItemsBatchJson:
      type: "object"
      required:
        - "template_id"
        - "side_id"
      properties:
        template_items:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/TemplateItemJson"
      xml:
        name: "TemplateItemsBatchJson"
    TemplateItemsBatchUpdate:
      type: "object"
      properties:
        template_items:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Template ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              template_id:
                type: "string"
                description: Template ID
                example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
              template_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
                description: Lorem ipsum...
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              template_file:
                type: "string"
                description: "Image file"
                format: binary
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart"
              layers:
                type: "application/json"
                description: "Lorem ipsum..."
                example:
                  [
                    {
                      "top": 183.5025,
                      "left": 195.79,
                      "text": "Blackbird",
                      "width": 68.33984375,
                      "height": 22.6,
                      "originX": "left",
                      "originY": "top",
                      "fontSize": 20,
                      "fontStyle": "normal",
                      "textAlign": "left",
                      "fontFamily": "Yellowtail",
                      "fontWeight": "normal",
                    },
                  ]
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "TemplateItemsBatchUpdate"
    TemplateItemsBatchUpdateJson:
      type: "object"
      properties:
        template_items:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Template ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              template_id:
                type: "string"
                description: Template ID
                example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
              template_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
                description: Lorem ipsum...
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              template_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart"
              layers:
                type: "application/json"
                description: "Lorem ipsum..."
                example:
                  [
                    {
                      "top": 183.5025,
                      "left": 195.79,
                      "text": "Blackbird",
                      "width": 68.33984375,
                      "height": 22.6,
                      "originX": "left",
                      "originY": "top",
                      "fontSize": 20,
                      "fontStyle": "normal",
                      "textAlign": "left",
                      "fontFamily": "Yellowtail",
                      "fontWeight": "normal",
                    },
                  ]
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "TemplateItemsBatchUpdateJson"
    TemplateItemResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        template:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        template_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
        product:
          $ref: "#/components/schemas/ProductResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        template_image:
          $ref: "#/components/schemas/ImageResponse"
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart note"
        original_output_options:
          type: "object"
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        original_side:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/components/schemas/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "number"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
            real_width:
              type: "number"
              format: "float"
              example: 50
            real_height:
              type: "number"
              format: "float"
              example: 50
            real_top:
              type: "number"
              format: "float"
              example: 50
            real_left:
              type: "number"
              format: "float"
              example: 50
            area_design_width:
              type: "number"
              format: "float"
              example: 50
            area_design_height:
              type: "number"
              format: "float"
              example: 50
            area_design_left:
              type: "number"
              format: "float"
              example: 50
            area_design_top:
              type: "number"
              format: "float"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_top_bottom:
              type: "number"
              format: "float"
              example: 50
            margin_left_right:
              type: "number"
              format: "float"
              example: 50
            background_img:
              $ref: "#/components/schemas/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        layers:
          type: "array"
          items:
            type: "object"
            properties:
              top:
                type: "number"
                example: 38.9832354205
              left:
                type: "number"
                example: 329.6631024663
              text:
                type: "string"
                example: "Heading"
              width:
                type: "integer"
                format: "int64"
                example: 158
              height:
                type: "integer"
                format: "int64"
                example: 47.46
              originX:
                type: "string"
                example: "left"
              originY:
                type: "string"
                example: "top"
              fontSize:
                type: "integer"
                format: "int64"
                example: 42
              minWidth:
                type: "integer"
                format: "int64"
                example: 20
              fontStyle:
                type: "string"
                example: "normal"
              textAlign:
                type: "string"
                example: "left"
              underline:
                type: "boolean"
                example: false,
              fontFamily:
                type: "string"
                example: "Roboto"
              fontWeight:
                type: "string"
                example: "normal"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "TemplateItemResponse"
    TemplateItemsBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateItemResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "TemplateItemsBatchResponse"
    TemplateItemsBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project:
                $ref: "#/components/schemas/ProjectResponse"
              side:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                  name:
                    type: "string"
                    example: "printcart"
                  bg_type:
                    type: "string"
                    enum:
                      - "color"
                      - "image"
                      - "transparent"
                    example: "image"
                  bg_color_value:
                    type: "string"
                    example: "red"
                  img_top_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_left_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_bottom_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_right_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_overlay:
                    $ref: "#/components/schemas/ImageResponse"
                  version:
                    type: "string"
                    example: "version 1.0.0"
                  ratio:
                    type: "integer"
                    format: "int64"
                    example: 100
                  background_included:
                    type: "boolean"
                    example: true
                  show_overlay:
                    type: "boolean"
                    example: true
                  include_overlay:
                    type: "boolean"
                    example: true
                  product_width:
                    type: "number"
                    format: "float"
                    example: 50
                  product_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_width:
                    type: "number"
                    format: "float"
                    example: 50
                  real_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_top:
                    type: "number"
                    format: "float"
                    example: 50
                  real_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_width:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_height:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_top:
                    type: "number"
                    format: "float"
                    example: 50
                  show_bleed:
                    type: "boolean"
                    example: true
                  bleed_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  bleed_left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
                  show_safe_zone:
                    type: "boolean"
                    example: true
                  margin_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  margin_left_right:
                    type: "number"
                    format: "float"
                    example: 50
                  background_img:
                    $ref: "#/components/schemas/ImageResponse"
                  created_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
                  updated_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
              template:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
                  created_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
                  updated_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
              template_ratio:
                type: "number"
                format: "float"
                example: 50.50
              pdf_url:
                type: "string"
              product:
                $ref: "#/components/schemas/ProductResponse"
              preview_image:
                $ref: "#/components/schemas/ImageResponse"
              template_image:
                $ref: "#/components/schemas/ImageResponse"
              quantity:
                type: "integer"
                format: "int64"
                example: 50
              note:
                type: "string"
                example: "printcart note"
              original_output_options:
                type: "object"
                properties:
                  dpi:
                    type: "integer"
                    format: "int64"
                    example: 500
                  dimension_unit:
                    type: "string"
                    enum:
                      - "inch"
                      - "cm"
                    example: "inch"
              original_side:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                  product:
                    $ref: "#/components/schemas/ProductResponse"
                  name:
                    type: "string"
                    example: "printcart"
                  bg_type:
                    type: "string"
                    enum:
                      - "color"
                      - "image"
                      - "transparent"
                    example: "image"
                  bg_color_value:
                    type: "string"
                    example: "red"
                  img_top_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_left_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_bottom_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_right_pos:
                    type: "number"
                    format: "float"
                    example: 50.5
                  img_overlay:
                    $ref: "#/components/schemas/ImageResponse"
                  version:
                    type: "string"
                    example: "version 1.0.0"
                  ratio:
                    type: "integer"
                    format: "int64"
                    example: 100
                  background_included:
                    type: "boolean"
                    example: true
                  show_overlay:
                    type: "boolean"
                    example: true
                  include_overlay:
                    type: "boolean"
                    example: true
                  product_width:
                    type: "number"
                    format: "float"
                    example: 50
                  product_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_width:
                    type: "number"
                    format: "float"
                    example: 50
                  real_height:
                    type: "number"
                    format: "float"
                    example: 50
                  real_top:
                    type: "number"
                    format: "float"
                    example: 50
                  real_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_width:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_height:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_left:
                    type: "number"
                    format: "float"
                    example: 50
                  area_design_top:
                    type: "number"
                    format: "float"
                    example: 50
                  show_bleed:
                    type: "boolean"
                    example: true
                  bleed_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  bleed_left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
                  show_safe_zone:
                    type: "boolean"
                    example: true
                  margin_top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  margin_left_right:
                    type: "number"
                    format: "float"
                    example: 50
                  background_img:
                    $ref: "#/components/schemas/ImageResponse"
                  created_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
                  updated_at:
                    type: "string"
                    example: "2021-11-16T08:26:30.000000Z"
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
              created_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
              updated_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "TemplateItemsBatchUpdateResponse"
    TemplateItemsBatchDelete:
      type: "object"
      properties:
        template_items:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Template ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "TemplateItemsBatchDelete"
    TemplateItemResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateItemResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "TemplateItemResponseStore"
    TemplateItemResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateItemResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateItemResponseShowDataObject"
    TemplateItemResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateItemResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateItemResponseShowDataArray"
    TemplateItemResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateItemResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "TemplateItemResponseUpdate"
    TemplateItemUpdate:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        template_id:
          type: "string"
          description: Template ID
          example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
        template_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_file:
          type: "file"
          description: "Image file"
          format: binary
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateItemUpdate"
    TemplateItemUpdateJson:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        template_id:
          type: "string"
          description: Template ID
          example: "cc761a1e-8147-4dc3-8600-00fdcaudl23e"
        template_ratio:
          type: "number"
          format: "float"
          example: 50.50
        pdf_url:
          type: "string"
          description: Lorem ipsum...
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        quantity:
          type: "integer"
          format: "int64"
          example: 50
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "json"
          description: "Lorem ipsum..."
          example:
            [
              {
                "top": 183.5025,
                "left": 195.79,
                "text": "Blackbird",
                "width": 68.33984375,
                "height": 22.6,
                "originX": "left",
                "originY": "top",
                "fontSize": 20,
                "fontStyle": "normal",
                "textAlign": "left",
                "fontFamily": "Yellowtail",
                "fontWeight": "normal",
              },
            ]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateItemUpdateJson"
    Category:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a storage
          example: "printcart"
        parent_id:
          type: "string"
          description: Storage ID
          example: null
      xml:
        name: "Category"
    CategoryUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the storage
          example: "printcart"
        parent_id:
          type: "string"
          description: Storage ID
          example: null
      xml:
        name: "CategoryUpdate"
    CategoryCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryCount"
    CategoryResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        name:
          type: "string"
          example: "printcart"
        parent_storage_id:
          type: "string"
          example: null
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "CategoryResponse"
    CategoryResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryResponseShowDataObject"
    CategoryResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryResponseShowDataArray"
    CategoryResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "CategoryResponseStore"
    CategoryResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "CategoryResponseUpdate"
    Project:
      type: "object"
      properties:
        name:
          type: "string"
          description: The name given to a project
          example: "printcart"
        status:
          type: "string"
          default: "processing"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          description: Project status
          example: "processing"
        note:
          type: "string"
          example: "printcart note"
        design_ids:
          type: "array"
          example:
            [
              "8e7ee612-4667-474c-809a-ff848400f7a3",
              "42f4a0e7-3ea4-4f62-9a04-0b41fb8c69d1",
            ]
      xml:
        name: "Project"
    ProjectUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: The name given to a project
          example: "printcart"
        status:
          type: "string"
          default: "processing"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          description: Project status
          example: "processing"
        note:
          type: "string"
          example: "printcart note"
      xml:
        name: "ProjectUpdate"
    ProjectBatch:
      type: "object"
      required:
        - "name"
      properties:
        projects:
          type: "array"
          items:
            properties:
              name:
                type: "string"
                description: The name given to a project
                example: "printcart"
              status:
                type: "string"
                default: "processing"
                enum:
                  - "processing"
                  - "reviewing"
                  - "accepted"
                  - "trashed"
                  - "deleted"
                description: Project status
                example: "processing"
              note:
                type: "string"
                example: "printcart note"
      xml:
        name: "ProjectBatch"
    ProjectBatchUpdate:
      type: "object"
      required:
        - "name"
      properties:
        projects:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              name:
                type: "string"
                description: Updated name of the project
                example: "printcart"
              status:
                type: "string"
                enum:
                  - "processing"
                  - "reviewing"
                  - "accepted"
                  - "trashed"
                  - "deleted"
                description: Project status
                example: "processing"
              note:
                type: "string"
                example: "printcart note"
      xml:
        name: "ProjectBatchUpdate"
    ProjectBatchDelete:
      type: "object"
      properties:
        projects:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      xml:
        name: "ProjectBatchDelete"
    ProjectCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectCount"
    ProjectResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        name:
          type: "string"
          example: "printcart"
        status:
          type: "string"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          example: "processing"
        note:
          type: "string"
          example: "printcart note"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ProjectResponse"
    ProjectResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectResponseShowDataObject"
    ProjectResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectResponseShowDataArray"
    ProjectResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProjectResponseStore"
    ProjectBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProjectBatchResponse"
    ProjectBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              name:
                type: "string"
                example: "printcart"
              status:
                type: "string"
                enum:
                  - "processing"
                  - "reviewing"
                  - "accepted"
                  - "trashed"
                  - "deleted"
                example: "processing"
              note:
                type: "string"
                example: "printcart note"
              created_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
              updated_at:
                type: "string"
                example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProjectBatchUpdateResponse"
    ProjectResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProjectResponseUpdate"
    ProjectFolder:
      type: "object"
      required:
        - "category_id"
      properties:
        category_id:
          type: "string"
          description: Storage ID
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        project_id:
          type: "string"
          description: Project ID
          example: "e8304b84-a015-3bd4-a7d3-7a978fxxxxxx"
      xml:
        name: "ProjectFolder"
    Webhook:
      type: "object"
      required:
        - "event"
        - "callback_url"
        - "topic"
      properties:
        event:
          type: "string"
          default: "POST"
          enum:
            - "POST"
            - "PUT"
            - "DELETE"
            - "POST BATCH"
            - "PUT BATCH"
            - "DELETE BATCH"
          description: Event that triggers the webhook.
          example: "POST"
        callback_url:
          type: "string"
          format: "url"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          enum:
            - "projects"
            - "products"
            - "designs"
            - "templates"
            - "sides"
          example: "projects"
      xml:
        name: "Webhook"
    WebhookUpdate:
      type: "object"
      properties:
        event:
          type: "string"
          enum:
            - "POST"
            - "PUT"
            - "DELETE"
            - "POST BATCH"
            - "PUT BATCH"
            - "DELETE BATCH"
          description: Event that triggers the webhook.
          example: "POST"
        callback_url:
          type: "string"
          format: "url"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          enum:
            - "projects"
            - "products"
            - "designs"
            - "templates"
            - "sides"
          example: "projects"
      xml:
        name: "WebhookUpdate"
    WebhookResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "ad8d432f-4c7d-459d-9f2f-4a6821666102"
        event:
          type: "string"
          example: "POST"
        callback_url:
          type: "string"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          example: "projects"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "WebhookResponse"
    WebhookResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "WebhookResponseShowDataObject"
    WebhookResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "WebhookResponseShowDataArray"
    WebhookResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "WebhookResponseStore"
    WebhookResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "WebhookResponseUpdate"
    WebhookCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "WebhookCount"
    Unauthenticated:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Unauthenticated"
          example: "Unauthenticated"
      xml:
        name: "Unauthenticated"
    InvalidInput:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            field_name:
              type: "array"
              items:
                type: "string"
                example: That field error message
        message:
          type: "string"
          description: "Invalid input"
          example: "Invalid input"
      xml:
        name: "InvalidInput"
    NotFound:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Not found"
          example: "Not found"
      xml:
        name: "NotFound"
    InvalidAvatarFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid avatar file"
          example: "Invalid avatar file"
      xml:
        name: "InvalidAvatarFile"
    InvalidContentTypeHeader:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid Content-Type header"
          example: "Invalid Content-Type header"
      xml:
        name: "InvalidContentTypeHeader"
    MissingDesignFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Missing design file"
          example: "Missing design file"
      xml:
        name: "MissingDesignFile"
    InvalidDesignFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid design file"
          example: "Invalid design file"
      xml:
        name: "InvalidDesignFile"
    ProductError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find product with id"
          example: "Can't find product with id: 962af342-a2c9-4665-bb5d-cb208258d958"
      xml:
        name: "ProductError"
    DesignError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find design with id"
          example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "DesignError"
    ProjectDesignError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
          example: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
      xml:
        name: "ProjectDesignError"
    SideError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find side with id"
          example: "Can't find side with id: c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      xml:
        name: "SideError"
    ClipartError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find clipart with id"
          example: "Can't find clipart with id: 3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
      xml:
        name: "ClipartError"
    ProjectError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find project with id"
          example: "Can't find project with id: 4419934f-8e1b-4cf0-b432-01ef9258a812"
      xml:
        name: "ProjectError"
    ImageError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find images with id"
          example: "Can't find images with id: 248f7975-a9f5-3466-b014-69abae9xxxxx"
      xml:
        name: "ImageError"
    Forbidden:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Forbidden"
          example: "Forbidden"
      xml:
        name: "Forbidden"
    Deleted:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Deleted successfully"
          example: "Deleted successfully"
      xml:
        name: "Deleted"
    SideHeaderContentType:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid Content-type header"
          example: "Invalid Content-type header"
      xml:
        name: "SideHeaderContentType"
    CheckUserTier:
      properties:
        message:
          type: "string"
          description: "Please upgrade your account."
          example: "Please upgrade your account."
      xml:
        name: "CheckUserTier"
    MissingImage:
      properties:
        message:
          type: "string"
          description: File upload missing
          example: File upload missing
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

# endpoint 1