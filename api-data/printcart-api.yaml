openapi: 3.0.0
servers:
  - url: "https://api.printcart.com/v1"
info:
  description: |
    PrintCart REST API Doc.

  version: 1.0.0
  title: "PrintCart Rest API"
  contact:
    email: support@printcart.com
tags:
  - name: Account
  - name: Store
  - name: Product
  - name: Side
  - name: Image
  - name: Clipart
  - name: Design
  - name: Template
  - name: Project
  - name: Storage
  - name: Font
  - name: Webhook
  - name: Clipart Storage
  - name: "Project Folder"
paths:
  /account:
    post:
      tags:
        - Account
      operationId: createAccount
      summary: Create Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseCreated"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      tags:
        - Account
      operationId: "getAccount"
      summary: Get Account Info
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseShow"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicAuth: []
    put:
      tags:
        - Account
      operationId: "updateAccount"
      summary: Update Account Details
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicAuth: []
  /stores:
    post:
      tags:
        - "Store"
      operationId: "createStore"
      summary: "Create Store"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseCreate"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Store"
      operationId: "getStore"
      summary: "Get Store Info"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many stores
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyStores"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Store"
      operationId: "updateStore"
      summary: "Update Store Details"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Store"
      operationId: "deleteStore"
      summary: "Delete a store"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /stores/store-details:
    get:
      tags:
        - "Store"
      operationId: "getStoreById"
      summary: "Get Store Details"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponseShow"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /stores/token-revoke:
    put:
      tags:
        - "Store"
      operationId: "tokenRevoke"
      summary: "Renew UnAuth Token"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreTokenRevokeResponse"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products:
    post:
      tags:
        - "Product"
      operationId: "postProduct"
      summary: "Create Product"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseStore"
        "400":
          description: |
            - Invalid input
            - Duplicate Product
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/DuplicateProduct"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Product"
      operationId: "getProduct"
      summary: "Get a list of products"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            default: "publish"
            enum:
              - "publish"
              - "draft"
              - "trashed"
          required: false
          description: Product status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProducts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /products/{productId}:
    get:
      tags:
        - "Product"
      operationId: "getProductByID"
      summary: "Get Product Details"
      parameters:
        - in: "path"
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataObject"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Product"
      operationId: "updateProduct"
      summary: "Update Product Details"
      parameters:
        - in: "path"
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Product"
      operationId: "deleteProduct"
      summary: "Delete a product"
      parameters:
        - in: "path"
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products/batch:
    post:
      tags:
        - "Product"
      operationId: "postProductsBatch"
      summary: "Create batch products"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatch"
        required: true
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBatchResponse"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProducts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    put:
      tags:
        - "Product"
      operationId: "putProductsBatch"
      summary: "Update batch products"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatchUpdate"
        required: true
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBatchUpdateResponse"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find product with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/ProductError"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProducts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Product"
      operationId: "deleteProductsBatch"
      summary: "Delete batch products"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: |
            - No Data
            - Invalid input
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NoData"
                  - $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find product with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/ProductError"
        "413":
          description: "Too many products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProducts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products/count:
    get:
      tags:
        - "Product"
      operationId: "getCountProduct"
      summary: "Get a count of products"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products/{productId}/designs:
    get:
      tags:
        - "Product"
      operationId: "getDesignsByProduct"
      summary: "Get a list of designs by product"
      parameters:
        - in: path
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            default: "publish"
            enum:
              - "publish"
              - "draft"
              - "trashed"
          required: false
          description: Product status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs by product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesignsByProduct"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products/{productId}/sides:
    get:
      tags:
        - "Product"
      operationId: "getSidesByProduct"
      summary: "Get a list of sides by product"
      parameters:
        - in: path
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs by product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManySidesByProduct"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /products/{productId}/designs/count:
    get:
      tags:
        - "Product"
      operationId: "getCountDesignsByProduct"
      summary: "Get a count of designs by product"
      parameters:
        - in: "path"
          name: "productId"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /products/{productId}/sides/count:
    get:
      tags:
        - "Product"
      operationId: "getCountSidesByProduct"
      summary: "Get a count of sides by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /sides:
    post:
      tags:
        - "Side"
      operationId: "postSide"
      summary: "Create new product side"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Side"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid Content-Type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Side"
      operationId: "getSide"
      summary: "Get a list of product sides"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            default: "publish"
            enum:
              - "publish"
              - "draft"
              - "trashed"
          required: false
          description: Side status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many sides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManySides"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /sides/{sideId}:
    get:
      tags:
        - "Side"
      operationId: "getSideById"
      summary: "Get product side details"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Side"
      operationId: "updateSide"
      summary: "Update a product side details"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Side"
      operationId: "deleteSide"
      summary: "Delete a product side"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /sides/batch:
    post:
      tags:
        - "Side"
      operationId: "postSidesBatch"
      summary: "Create batch sides"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideBatchResponse"
        "400":
          description: |
            - Invalid input
            - Not found
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: Too many sides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManySides"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    put:
      tags:
        - "Side"
      operationId: "putSidesBatch"
      summary: "Update batch sides"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Not found
            - Invalid Content-type header
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/SideHeaderContentType"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Can't find side with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideError"
        "413":
          description: Too many sides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManySides"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Side"
      operationId: "deleteSidesBatch"
      summary: "Delete batch sides"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SideBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: |
            - No data
            - Invalid input
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NoData"
                  - $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - "Not found"
            - "Can't find side with id"
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/SideError"
        "413":
          description: Too many sides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManySides"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /sides/{sideId}/templates:
    get:
      get:
      tags:
        - "Side"
      operationId: "getTemplatesBySide"
      summary: "Get a list of templates by side"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates by side
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplatesBySide"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /sides/count:
    get:
      tags:
        - "Side"
      operationId: "getCountSide"
      summary: "Get a count of product sides"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SideCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /images:
    post:
      tags:
        - "Image"
      operationId: "uploadFile"
      summary: "Add new image"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: "string"
                  description: "Image to upload"
                  format: binary
                type:
                  type: "string"
                  default: null
                  enum: [null, "cliparts", "designs"]
                custom_width:
                  type: integer
                  format: "int64"
                  example: 100
                  description: Custom width thumbnail image
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStore"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaType"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Image"
      operationId: "getImage"
      summary: "Get a list of images"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many images
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyImages"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /images/{imageId}:
    get:
      tags:
        - "Image"
      operationId: "getImageById"
      summary: "Get image details"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Image"
      operationId: "deleteImageById"
      summary: "Delete a image"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image Id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /images/batch:
    post:
      tags:
        - "Image"
      operationId: "uploadFiles"
      summary: "Add new batch images"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                files[]:
                  type: "string"
                  description: "Multiple File Images Upload"
                  format: binary
                type:
                  type: "string"
                  default: null
                  enum: [null, "cliparts", "designs"]
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseStoreBatch"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaType"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /images/count:
    get:
      tags:
        - "Image"
      operationId: "getCountImage"
      summary: "Get a count of images"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
      security:
        - BasicStore: []
  /cliparts:
    post:
      tags:
        - "Clipart"
      operationId: "uploadFileClipart"
      summary: "Add new Clipart"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: "string"
                  description: "Clipart to upload"
                  format: binary
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseStore"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaType"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Clipart"
      operationId: "getClipart"
      summary: "Get a list of cliparts"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCliparts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /cliparts/default:
    get:
      tags:
        - "Clipart"
      operationId: "getClipartDefault"
      summary: "Get a list of cliparts default"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCliparts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /cliparts/{clipartId}:
    get:
      tags:
        - "Clipart"
      operationId: "getClipartById"
      summary: "Get clipart details"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Clipart"
      operationId: "updateClipart"
      summary: "Update clipart details"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClipartUpdate"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseUpdate"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Clipart"
      operationId: "deleteClipartById"
      summary: "Delete a clipart"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart Id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /clipart/batch:
    post:
      tags:
        - "Clipart"
      operationId: "uploadFilesClipart"
      summary: "Add new batch clipart"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                files[]:
                  type: "string"
                  description: "ultiple File Cliparts Upload"
                  format: binary
      responses:
        "201":
          description: "File successfully uploaded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartResponseStoreBatch"
        "400":
          description: |
            - Invalid input
            - File upload missing
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaType"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /cliparts/count:
    get:
      tags:
        - "Clipart"
      operationId: "getCountClipart"
      summary: "Get a count of cliparts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /cliparts/default/count:
    get:
      tags:
        - "Clipart"
      operationId: "getDefaultCountClipart"
      summary: "Get a count of cliparts default"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs:
    post:
      tags:
        - "Design"
      operationId: "postDesign"
      summary: "Create new design"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/Design"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Missing design file
            - File Upload Missing
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Design"
      operationId: "getDesign"
      summary: "Get a list of designs"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            enum:
              - "accepted"
              - "processing"
              - "declined"
              - "trashed"
          required: false
          description: Design status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many designs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesigns"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /designs/{designId}:
    get:
      tags:
        - "Design"
      operationId: "getDesignById"
      summary: "Get design details"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      operationId: "updateDesign"
      summary: "Update design details"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      operationId: "deleteDesign"
      summary: "Delete a design"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /designs/batch:
    post:
      tags:
        - "Design"
      operationId: "postDesignsBatch"
      summary: "Create batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignBatchResponse"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Missing design file
            - File Upload Missing
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/MissingDesignFile"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many designs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesigns"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      operationId: "putDesignsBatch"
      summary: "Update batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchUpdateJson"
          # multipart/form-data:
          #   schema:
          #     $ref: "#/components/schemas/DesignBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Invalid design file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidDesignFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find design with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/DesignError"
        "413":
          description: Too many designs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesigns"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      operationId: "deleteDesignsBatch"
      summary: "Delete batch designs"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DesignBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find design with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/DesignError"
        "413":
          description: Too many designs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesigns"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /designs/{designId}/fonts:
    get:
      tags:
        - "Design"
      operationId: "getFontsInLayersDesignById"
      summary: "Get list fonts layer by design"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignFont"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many fonts"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFonts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs/images:
    get:
      tags:
        - "Design"
      operationId: "getDesignImage"
      summary: "Get a list images design"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many images"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyImages"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /designs/count:
    get:
      tags:
        - "Design"
      operationId: "getCountDesign"
      summary: "Get a count of designs"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /templates:
    post:
      tags:
        - "Template"
      operationId: "postTemplate"
      summary: "Create new template"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateJson"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseStore"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Missing template file
            - File Upload Missing
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidTemplateFile"
                  - $ref: "#/components/schemas/MissingTemplateFile"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Template"
      operationId: "getTemplates"
      summary: "Get a list of templates"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplates"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/template-default:
    get:
      tags:
        - "Template"
      operationId: "getTemplatesDefault"
      summary: "Get a list of templates default"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplates"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/{templateId}:
    get:
      tags:
        - "Template"
      operationId: "getTemplateById"
      summary: "Get template details"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Template"
      operationId: "updateTemplate"
      summary: "Update template details"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateUpdateJson"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponseUpdate"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidTemplateFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template"
      operationId: "deleteTemplate"
      summary: "Delete a template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /templates/batch:
    post:
      tags:
        - "Template"
      operationId: "postTemplatesBatch"
      summary: "Create batch templates"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateBatchJson"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateBatchResponse"
        "400":
          description: |
            - No data
            - Invalid input
            - Invalid template file
            - Missing template file
            - File Upload Missing
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NoData"
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidTemplateFile"
                  - $ref: "#/components/schemas/MissingTemplateFile"
                  - $ref: "#/components/schemas/MissingImage"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplates"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Template"
      operationId: "putTemplatesBatch"
      summary: "Update batch templates"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateBatchUpdateJson"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateBatchUpdateResponse"
        "400":
          description: |
            - Invalid input
            - Invalid template file
            - Invalid Content-Type header
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/InvalidTemplateFile"
                  - $ref: "#/components/schemas/InvalidContentTypeHeader"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find template with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/TemplateError"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplates"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template"
      operationId: "deleteTemplatesBatch"
      summary: "Delete batch templates"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: |
            - No data
            - Invalid input
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NoData"
                  - $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find template with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/TemplateError"
        "413":
          description: Too many templates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTemplates"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /templates/{templateId}/fonts:
    get:
      tags:
        - "Template"
      operationId: "getFontsInLayersTemplateById"
      summary: "Get list fonts layer by template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateFont"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many fonts"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFonts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /templates/count:
    get:
      tags:
        - "Template"
      operationId: "getCountTemplate"
      summary: "Get a count of templates"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /templates/default/count:
    get:
      tags:
        - "Template"
      operationId: "getCountTemplateDefault"
      summary: "Get a count of templates default"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects:
    post:
      tags:
        - "Project"
      operationId: "postProject"
      summary: "Create new project"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseStore"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    get:
      tags:
        - "Project"
      operationId: "getProject"
      summary: "Get a list of projects"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            enum:
              - "processing"
              - "reviewing"
              - "accepted"
              - "trashed"
          required: false
          description: Project status
        - in: query
          name: s
          schema:
            type: string
          description: Search List Project By Name
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProjects"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/{projectId}:
    get:
      tags:
        - "Project"
      operationId: "getProjectById"
      summary: "Get project details"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    put:
      tags:
        - "Project"
      operationId: "updateProject"
      summary: "Update project details"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Project"
      operationId: "deleteProject"
      summary: "Delete a project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/batch:
    post:
      tags:
        - "Project"
      operationId: "postProjectsBatch"
      summary: "Create batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatch"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBatchResponse"
        "400":
          description: |
            - Invalid input
            - Please upgrade your account.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/InvalidInput"
                  - $ref: "#/components/schemas/CheckUserTier"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProjects"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Project"
      operationId: "putProjectsBatch"
      summary: "Update batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBatchUpdateResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find project with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/ProjectError"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProjects"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Project"
      operationId: "deleteProjectsBatch"
      summary: "Delete batch projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: |
            - Not found
            - Can't find project with id
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/NotFound"
                  - $ref: "#/components/schemas/ProjectError"
        "413":
          description: "Too many projects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProjects"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/{projectId}/designs:
    get:
      tags:
        - "Project"
      operationId: "getDesignsByProject"
      summary: "Get a list of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            enum:
              - "accepted"
              - "processing"
              - "declined"
              - "trashed"
          required: false
          description: Design status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many designs by project"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyDesignsByProject"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/{projectId}/products:
    get:
      tags:
        - "Project"
      operationId: "getProductsByProject"
      summary: "Get a list of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
        - in: query
          name: status
          schema:
            type: "string"
            default: "publish"
            enum:
              - "publish"
              - "draft"
              - "trashed"
          required: false
          description: Product status
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many products by project"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProductsByProject"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/count:
    get:
      tags:
        - "Project"
      operationId: "getCountProject"
      summary: "Get a count of projects"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/{projectId}/designs/count:
    get:
      tags:
        - "Project"
      operationId: "getCountDesignsByProject"
      summary: "Get a count of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DesignCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /projects/{projectId}/products/count:
    get:
      tags:
        - "Project"
      operationId: "getCountProductsByProject"
      summary: "Get a count of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /storages:
    post:
      tags:
        - "Storage"
      operationId: "postCategory"
      summary: "Create new storage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Storage"
      operationId: "getCategory"
      summary: "Get a list of storages"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /storages/default:
    get:
      tags:
        - "Storage"
      operationId: "getCategoryDefault"
      summary: "Get a list of storages default"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /storages/{storageId}:
    get:
      tags:
        - "Storage"
      operationId: "getCategoryById"
      summary: "Get Storage details"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Storage"
      operationId: "updateCategory"
      summary: "Update Storage details"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /storages/count:
    get:
      tags:
        - "Storage"
      operationId: "getCountCategory"
      summary: "Get a count of Storages"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /fonts:
    post:
      tags:
        - "Font"
      operationId: "addFont"
      summary: "Add new font"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Font"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Font"
      operationId: "getFonts"
      summary: "Get a list of fonts"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many fonts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFonts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /fonts/default:
    get:
      tags:
        - "Font"
      operationId: "getFontsDefault"
      summary: "Get a list of fonts default"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many fonts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFonts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /fonts/{fontId}:
    get:
      tags:
        - "Font"
      operationId: "getFontById"
      summary: "Get font details"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
    put:
      tags:
        - "Font"
      operationId: "updateFont"
      summary: "Update font details"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FontUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Font"
      operationId: "deleteFont"
      summary: "Delete font"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /fonts/count:
    get:
      tags:
        - "Font"
      operationId: "getCountFont"
      summary: "Get a count of fonts"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /fonts/default/count:
    get:
      tags:
        - "Font"
      operationId: "getCountFontDefault"
      summary: "Get a count of fonts default"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FontCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /webhooks:
    post:
      tags:
        - "Webhook"
      operationId: "postWebhook"
      summary: "Create new webhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseStore"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Webhook"
      operationId: "getWebhook"
      summary: "Get a list of webhooks"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many webhooks"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyWebhooks"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /webhooks/{webhookId}:
    get:
      tags:
        - "Webhook"
      operationId: "getWebhookById"
      summary: "Get webhook details"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    put:
      tags:
        - "Webhook"
      operationId: "updateWebhook"
      summary: "Update webhook details"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdate"
      responses:
        "200":
          description: "Updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponseUpdate"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    delete:
      tags:
        - "Webhook"
      operationId: "deleteWebhook"
      summary: "Delete a webhook"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /clipart-storages:
    post:
      tags:
        - "Clipart Storage"
      operationId: "postClipartStorage"
      summary: "Create new Clipart - Storage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClipartStorage"
      responses:
        "201":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartStorage"
      summary: "Get a list of Cliparts - Storages"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/default:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartStorageDefault"
      summary: "Get a list of Cliparts - Storages default"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{storageId}:
    delete:
      tags:
        - "Clipart Storage"
      operationId: "deleteClipartStorage"
      summary: "Delete a Clipart - Storage"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /clipart-storages/{storageId}/cliparts:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartsByStorage"
      summary: "Get a list of Cliparts by Storage"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCliparts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{storageId}/cliparts-default:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getClipartsByStorageDefault"
      summary: "Get a list of Cliparts by Storage default"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many cliparts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCliparts"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{clipartId}/storages:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getStoragesByClipart"
      summary: "Get a list of Storages by Clipart"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{clipartId}/storages-default:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getStoragesByClipartDefault"
      summary: "Get a list of Storages by Clipart default"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /clipart-storages/{storageId}/cliparts/count:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getCountClipartStorage"
      summary: "Get a count of cliparts storages"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /clipart-storages/{storageId}/cliparts-default/count:
    get:
      tags:
        - "Clipart Storage"
      operationId: "getCountClipartStorageDefault"
      summary: "Get a count of cliparts storages default"
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClipartCount"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /project-folder:
    post:
      tags:
        - "Project Folder"
      operationId: "postProjectFolder"
      summary: "Create new Project Folder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectFolder"
      responses:
        "201":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseStore"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInput"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
    get:
      tags:
        - "Project Folder"
      operationId: "getProjectFolder"
      summary: "Get a list of Projects Folders"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: "Too many storages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyCategories"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /project-folder/{storageId}:
    delete:
      tags:
        - "Project Folder"
      operationId: "deleteProjectFolder"
      summary: "Delete a Project Folder"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
  /project-folder/{storageId}/projects:
    get:
      tags:
        - "Project Folder"
      operationId: "getProjectByFolder"
      summary: "Get a list of Projects by Folder"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many projects folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyProjectsFolder"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
  /project-folder/{projectId}/folders:
    get:
      tags:
        - "Project Folder"
      operationId: "getFolderByProject"
      summary: "Get a list of Folders by Project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          schema:
            type: "string"
        - in: query
          name: limit
          schema:
            type: integer
            description: The numbers of items to return
        - in: query
          name: sort
          schema:
            type: "string"
            enum:
              - "desc"
              - "asc"
            default: desc
            # description: The numbers of items to re turn
        - in: query
          name: sortBy
          schema:
            type: "string"
            default: id
            # description: The numbers of items to re turn
      responses:
        "200":
          description: "Retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthenticated"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "413":
          description: Too many folders by project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFoldersByProject"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - BasicStore: []
        - UnAuthToken: []
components:
  securitySchemes:
    BasicAuth:
      description: |
        - The client sends HTTP requests with the Authorization header that contains the word Basic word followed by a space and a base64-encoded string <code>email:password</code>
      type: http
      schema: basic
    BasicStore:
      description: |
        - The client sends HTTP requests with the Authorization header that contains the word Basic word followed by a space and a base64-encoded string <code>sid:secret</code>
      type: http
      schema: basic
    UnAuthToken:
      description: |
        - Some Printcart API endpoints don't need your username and password to authenticate. Those endpoints only interact with your public data so the code can be shared publicly.
        - To request to those endpoints, you only need to send <code>UnAuthToken</code> in the <code>X-PrintCart-Unauth-Token</code> header
      type: apiKey
      name: X-PrintCart-Unauth-Token
      in: header
  schemas:
    Account:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: Customer name
          example: admin
        email:
          type: string
          format: email
          description: The email address for the customer.
          example: "admin@example.com"
        password:
          type: string
          description: Customer password
          example: Password1234@
      xml:
        name: Account
    AccountUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Customer name.
          example: "admin"
        email:
          type: "string"
          format: "email"
          description: The email address for the customer.
          example: "admin@example.com"
      xml:
        name: "AccountUpdate"
    AccountResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              example: 013f00061-edacd12-455e-b407-aa6aa80ec862
            name:
              type: string
              example: admin
            email:
              type: string
              format: email
              example: admin@example.com
            email_verified_at:
              type: string
              format: date-time
              example: "2022-11-23T03:33:58.000000Z"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        token_type:
          type: "string"
          example: "bearer"
        access_token:
          type: "string"
          example: "eyJ0eXiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDEvdjEvYWNjb3VudCIsImlhdCI6MTY2MTMzMDk0OSwibmJmIjoxNjYxMzMwOTQ5LCJqdGkiOiJkbFI4ZG1iMnNqMlpLUjlwIiwic3ViIjoiMSIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.ev6XeAuuQ8wz0pSyWcoqP71pzpWEp8rjZ11FyxdyPEk"
      xml:
        name: "AccountResponse"
    AccountResponseCreated:
      type: object
      properties:
        data:
          type: object
          $ref: "#/components/schemas/AccountResponse"
        message:
          type: string
          description: Created successfully
          example: Created successfully
      xml:
        name: AccountResponseCreated
    AccountResponseShow:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            id:
              type: "string"
              example: "013f00061-edacd12-455e-b407-aa6aa80ec862"
            name:
              type: "string"
              example: "admin"
            email:
              type: "string"
              format: "email"
              example: "admin@example.com"
            email_verified_at:
              type: "string"
              format: date-time
              example: "2022-11-23T03:33:58.000000Z"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "AccountResponseShow"
    AccountResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            id:
              type: "string"
              example: 013f00061-edacd12-455e-b407-aa6aa80ec862
            name:
              type: "string"
              example: "admin"
            email:
              type: "string"
              format: "email"
              example: "admin@gmail.com"
            email_verified_at:
              type: "string"
              example: "2022-11-23T03:33:58.000000Z"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-18T08:26:30.000000Z"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "AccountResponseUpdate"
    Store:
      type: "object"
      required:
        - "store_name"
      properties:
        store_name:
          type: "string"
          description: Customer store name
          example: "Store Example"
        google_font_api:
          type: string
        unsplash:
          type: string
        pixabay:
          type: string
        pexels:
          type: string
      xml:
        name: "Store"
    StoreUpdate:
      type: "object"
      properties:
        store_name:
          type: "string"
          description: Customer store name
          example: "Store Example"
        google_font_api:
          type: string
        unsplash:
          type: string
        pixabay:
          type: string
        pexels:
          type: string
      xml:
        name: "StoreUpdate"
    StoreResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "a2ba0785-7f53-3eea-a020-bac895d31234"
        name:
          type: "string"
          example: "printcart store"
        sid:
          type: "string"
          example: "pcsia_b9a7d6fa332b74bdd0e539ed3b361aca0c2f7b9bbfe68343xxxx"
        secret:
          type: "string"
          example: "pcsup_02be5f225e8ddb1ff446c60928394902ab2f193fcd5bfc2xxxx"
        unauth_token:
          type: "string"
          example: "b20dd13e142d5202aeda6c7365ce0a82bbf6c05711af3a2xxxx"
        google_font_api:
          type: "string"
        shop_url:
          type: "string"
        view_store_url:
          type: "string"
        integration_type:
          type: "string"
          enum:
            - "null"
            - "shopify"
            - "woocommerce"
            - "magento"
        is_integrated:
          type: "boolean"
          default: false
        unsplash_key:
          type: "string"
        pixabay_key:
          type: "string"
        pexels_key:
          type: "string"
        timezone:
          type: "string"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "StoreResponse"
    StoreResponseCreate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "StoreResponseCreate"
    StoreResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/StoreResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/stores?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/stores?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/stores
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "StoreResponseShowDataArray"
    StoreResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "StoreResponseUpdate"
    StoreResponseShow:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/StoreResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "StoreResponseShow"
    StoreTokenRevokeResponse:
      type: "object"
      properties:
        unauth_token:
          type: "string"
          example: "22d23e41e296c45b0c6c9cd722398b90a3cc906301bdebfaac4751cf2dowmar3"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "StoreTokenRevokeResponse"
    TooManyStores:
      type: object
      properties:
        error:
          type: "string"
          description: Too many stores
          example: Too many stores
    Product:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a product
          example: "Product Example"
        dynamic_side:
          type: "boolean"
          example: true
        viewport_width:
          type: "number"
          format: "float"
          example: 50.5
        viewport_height:
          type: "number"
          format: "float"
          example: 50.5
        scale:
          type: "number"
          format: "float"
          example: 50.5
        dpi:
          type: "integer"
          format: "int64"
          default: 72
        dimension_unit:
          type: "string"
          default: "cm"
          enum: ["inch", "cm"]
          example: "inch"
        status:
          type: "string"
          default: "publish"
          enum: ["publish", "draft", "trashed", "deleted"]
          description: Product status
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "pdf"
              # - "ps"
              # - "bmp"
              # - "iddd"
          example: ["jpg", "png", "ai", "pdf"]
        enable_design:
          type: "boolean"
          example: false
        product_image_id:
          type: "string"
          description: Image ID.
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        max_file_upload:
          type: "integer"
          format: "int64"
          default: 1
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          default: 0
          example: 500
      xml:
        name: "Product"
    ProductUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the product
          example: "product example update"
        dynamic_side:
          type: "boolean"
          example: true
        viewport_width:
          type: "number"
          format: "float"
          example: 50.5
        viewport_height:
          type: "number"
          format: "float"
          example: 50.5
        scale:
          type: "number"
          format: "float"
          example: 50.5
        dpi:
          type: "integer"
          format: "int64"
          example: 100
        dimension_unit:
          type: "string"
          enum:
            - "inch"
            - "cm"
          example: "inch"
        status:
          type: "string"
          enum:
            - "publish"
            - "draft"
            - "trashed"
            - "deleted"
          description: Product status
          example: "publish"
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "pdf"
              # - "ps"
              # - "bmp"
              # - "iddd"
          example: ["jpg", "png", "ai", "pdf"]
        max_file_upload:
          type: "integer"
          format: "int64"
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          example: 500
        enable_design:
          type: "boolean"
          example: false
        product_image_id:
          type: "string"
          description: Image ID.
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
        name: "ProductUpdate"
    ProductBatch:
      type: "object"
      required:
        - "name"
      properties:
        products:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/Product"
      xml:
        name: "ProductBatch"
    ProductBatchUpdate:
      type: "object"
      properties:
        products:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Product ID.
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                description: Updated name of the product
                example: "product example update"
              dynamic_side:
                type: "boolean"
                example: true
              viewport_width:
                type: "number"
                format: "float"
                example: 50.5
              viewport_height:
                type: "number"
                format: "float"
                example: 50.5
              scale:
                type: "number"
                format: "float"
                example: 50.5
              dpi:
                type: "integer"
                format: "int64"
                example: 500
              dimension_unit:
                type: "string"
                enum:
                  - "inch"
                  - "cm"
                example: "inch"
              status:
                type: "string"
                enum:
                  - "publish"
                  - "draft"
                  - "trashed"
                  - "deleted"
                description: Product status
                example: "publish"
              allowed_file_types:
                type: "array"
                items:
                  type: "string"
                  enum:
                    - "jpg"
                    - "png"
                    - "ai"
                    - "pdf"
                    # - "ps"
                    # - "bmp"
                    # - "iddd"
                example: ["jpg", "png", "ai", "pdf"]
              max_file_upload:
                type: "integer"
                format: "int64"
                example: 500
              min_jpg_dpi:
                type: "integer"
                format: "int64"
                example: 500
              enable_design:
                type: "boolean"
                example: false
              product_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      xml:
        name: "ProductBatchUpdate"
    ProductBatchDelete:
      type: "object"
      properties:
        products:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Product ID
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
      xml:
        name: "ProductBatchDelete"
    ProductResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          example: "product example"
        dynamic_side:
          type: "boolean"
          example: 500
        viewport_width:
          type: "integer"
          format: "int64"
          example: 500
        viewport_height:
          type: "integer"
          format: "int64"
          example: 500
        scale:
          type: "integer"
          format: "int64"
          example: 500
        dpi:
          type: "integer"
          format: "int64"
          example: 500
        dimension_unit:
          type: "string"
          enum:
            - "inch"
            - "cm"
          example: "inch"
        status:
          type: "string"
          enum:
            - "publish"
            - "draft"
            - "trashed"
            - "deleted"
          example: "publish"
        allowed_file_types:
          type: "array"
          items:
            type: "string"
            enum:
              - "jpg"
              - "png"
              - "ai"
              - "pdf"
              # - "ps"
              # - "bmp"
              # - "iddd"
          example: ["jpg", "png", "ai", "pdf"]
        max_file_upload:
          type: "integer"
          format: "int64"
          example: 500
        min_jpg_dpi:
          type: "integer"
          format: "int64"
          example: 500
        enable_design:
          type: "boolean"
          example: false
        product_image:
          $ref: "#/components/schemas/ImageResponse"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ProductResponse"
    ProductResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProductResponseStore"
    ProductResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProductResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/products?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/products?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/products
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductResponseShowDataArray"
    ProductResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductResponseShowDataObject"
    ProductResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProductResponseUpdate"
    ProductBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProductBatchResponse"
    ProductBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProductResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProductBatchUpdateResponse"
    ProductError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find product with id"
          example: "Can't find product with id: 962af342-a2c9-4665-bb5d-cb208258d958"
      xml:
        name: "ProductError"
    ProductCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProductCount"
    DuplicateProduct:
      properties:
        message:
          type: "string"
          description: "Duplicate Product"
          example: "Duplicate Product"
      xml:
        name: "DuplicateProduct"
    TooManyProducts:
      type: object
      properties:
        error:
          type: "string"
          description: Too many products
          example: Too many products
      xml:
        name: "TooManyProducts"
    TooManyDesignsByProduct:
      type: object
      properties:
        error:
          type: "string"
          description: Too many designs by product
          example: Too many designs by product
      xml:
        name: "TooManyDesignsByProduct"
    TooManySidesByProduct:
      type: object
      properties:
        error:
          type: "string"
          description: Too many sides by product
          example: Too many sides by product
      xml:
        name: "TooManySidesByProduct"
    Side:
      type: "object"
      required:
        - "product_id"
        - "side_image_id"
        - "name"
        - "scale"
      properties:
        product_id:
          type: "string"
          description: Product ID
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          description: The name given to a side
          example: "Side Example"
        bg_type:
          type: "string"
          default: "image"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "red"
        img_overlay_id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        scale:
          type: "number"
          format: "double"
          example: 100
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        side_image_size:
          type: "object"
          properties:
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
        design_area:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        show_cut_line:
          type: "boolean"
          example: true
        cut_line_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50
            y:
              type: "number"
              format: "float"
              example: 50
        show_safe_zone:
          type: "boolean"
          example: true
        safe_zone_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50
            y:
              type: "number"
              format: "float"
              example: 50
        side_image_id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        status:
          type: "string"
          default: "publish"
          enum: ["publish", "draft", "trashed"]
          description: Side status
      xml:
        name: "Side"
    SideUpdate:
      type: "object"
      properties:
        product_id:
          type: "string"
          description: Product ID
          example: "962af342-a2c9-4665-bb5d-cb208258d958"
        name:
          type: "string"
          description: The name given to a side
          example: "Side Example"
        bg_type:
          type: "string"
          default: "image"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "red"
        img_overlay_id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        scale:
          type: "number"
          format: "double"
          example: 100
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        side_image_size:
          type: "object"
          properties:
            product_width:
              type: "number"
              format: "float"
              example: 50
            product_height:
              type: "number"
              format: "float"
              example: 50
        design_area:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        show_cut_line:
          type: "boolean"
          example: true
        cut_line_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50
            y:
              type: "number"
              format: "float"
              example: 50
        show_safe_zone:
          type: "boolean"
          example: true
        safe_zone_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50
            y:
              type: "number"
              format: "float"
              example: 50
        side_image_id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        status:
          type: "string"
          default: "publish"
          enum: ["publish", "draft", "trashed"]
          description: Side status
      xml:
        name: "SideUpdate"
    SideBatch:
      type: "object"
      properties:
        sides:
          type: "array"
          items:
            type: object
            required:
              - "name"
              - "product_id"
              - "bg_img_id"
            properties:
              product_id:
                type: "string"
                description: Product ID
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                description: The name given to a side
                example: "printcart"
              bg_type:
                type: "string"
                default: "image"
                enum:
                  - "color"
                  - "image"
                  - "transparent"
                example: "image"
              bg_color_value:
                type: "string"
                example: "red"
              img_overlay_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              ratio:
                type: "number"
                format: "double"
                example: 100
              background_included:
                type: "boolean"
                example: true
              show_overlay:
                type: "boolean"
                example: true
              include_overlay:
                type: "boolean"
                example: true
              show_bleed:
                type: "boolean"
                example: true
              show_safe_zone:
                type: "boolean"
                example: true
              ratio_image:
                type: "number"
                format: "double"
                example: 100
              bg_img_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              status:
                type: "string"
                default: "publish"
                enum: ["publish", "draft", "trashed"]
                description: Side status
              product_size:
                type: "object"
                properties:
                  input:
                    type: "number"
                    format: "double"
                    example: 100
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
              design_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
              design_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
              bleed_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
              margin_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50
              background_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
              bleed_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              margin_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              measure_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
      xml:
        name: "SideBatch"
    SideBatchUpdate:
      type: "object"
      properties:
        sides:
          type: "array"
          items:
            type: object
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              product_id:
                type: "string"
                description: Product ID
                example: "962af342-a2c9-4665-bb5d-cb208258d958"
              name:
                type: "string"
                description: The name given to a side
                example: "printcart"
              bg_type:
                type: "string"
                default: "image"
                enum:
                  - "color"
                  - "image"
                  - "transparent"
                example: "image"
              bg_color_value:
                type: "string"
                example: "red"
              img_overlay_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              ratio:
                type: "number"
                format: "double"
                example: 100
              background_included:
                type: "boolean"
                example: true
              show_overlay:
                type: "boolean"
                example: true
              include_overlay:
                type: "boolean"
                example: true
              show_bleed:
                type: "boolean"
                example: true
              show_safe_zone:
                type: "boolean"
                example: true
              ratio_image:
                type: "number"
                format: "double"
                example: 100
              bg_img_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              status:
                type: "string"
                default: "publish"
                enum: ["publish", "draft", "trashed"]
                description: Side status
              product_size:
                type: "object"
                properties:
                  input:
                    type: "number"
                    format: "double"
                    example: 100
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
              design_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
              design_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "float"
                    example: 50
                  height:
                    type: "number"
                    format: "float"
                    example: 50
                  left:
                    type: "number"
                    format: "float"
                    example: 50
                  top:
                    type: "number"
                    format: "float"
                    example: 50
              bleed_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50.50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50.50
              margin_size:
                type: "object"
                properties:
                  top_bottom:
                    type: "number"
                    format: "float"
                    example: 50
                  left_right:
                    type: "number"
                    format: "float"
                    example: 50
              background_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
              bleed_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              margin_position:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
              measure_size:
                type: "object"
                properties:
                  width:
                    type: "number"
                    format: "double"
                    example: 100
                  height:
                    type: "number"
                    format: "double"
                    example: 100
                  top:
                    type: "number"
                    format: "double"
                    example: 100
                  left:
                    type: "number"
                    format: "double"
                    example: 100
      xml:
        name: "SideBatchUpdate"
    SideBatchDelete:
      type: "object"
      properties:
        sides:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      xml:
        name: "SideBatchDelete"
    SideResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        name:
          type: "string"
          example: "Side Example"
        ratio:
          type: "number"
          format: "double"
          example: 72
        dimension_unit:
          type: string
          enum: ["inch", "cm"]
          example: "cm"
        status:
          type: "string"
          default: "publish"
          enum: ["publish", "draft", "trashed"]
          example: "publish"
        design_area:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
            top:
              type: "number"
              format: "float"
              example: 50
            left:
              type: "number"
              format: "float"
              example: 50
        show_cut_line:
          type: "boolean"
          example: true
        cut_line_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50.50
            y:
              type: "number"
              format: "float"
              example: 50.50
        show_safe_zone:
          type: "boolean"
          example: true
        safe_zone_margin:
          type: "object"
          properties:
            x:
              type: "number"
              format: "float"
              example: 50.50
            y:
              type: "number"
              format: "float"
              example: 50.50
        side_image_size:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50
            height:
              type: "number"
              format: "float"
              example: 50
        side_image:
          $ref: "#/components/schemas/ImageResponse"
        product:
          $ref: "#/components/schemas/ProductResponse"
        bg_type:
          type: "string"
          enum:
            - "color"
            - "image"
            - "transparent"
          example: "image"
        bg_color_value:
          type: "string"
          example: "red"
        img_overlay:
          $ref: "#/components/schemas/ImageResponse"
        background_included:
          type: "boolean"
          example: true
        show_overlay:
          type: "boolean"
          example: true
        include_overlay:
          type: "boolean"
          example: true
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "SideResponse"
    SideResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "SideResponseStore"
    SideResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/SideResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/sides?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/sides?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/sides
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideResponseShowDataArray"
    SideResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideResponseShowDataObject"
    SideResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "SideResponseUpdate"
    SideBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "SideBatchUpdateResponse"
    SideBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/SideResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "SideBatchResponse"
    SideError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find side with id"
          example: "Can't find side with id: c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      xml:
        name: "SideError"
    SideHeaderContentType:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid Content-type header"
          example: "Invalid Content-type header"
      xml:
        name: "SideHeaderContentType"
    SideCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "SideCount"
    TooManySides:
      type: object
      properties:
        error:
          type: "string"
          description: Too many sides
          example: Too many sides
      xml:
        name: "TooManySides"
    TooManyTemplatesBySide:
      type: object
      properties:
        error:
          type: "string"
          description: Too many templates by side
          example: Too many templates by side
      xml:
        name: "TooManyTemplatesBySide"
    ImageResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        name:
          type: "string"
          example: "Image example"
        url:
          type: "string"
          example: "https://files.printcart.com/images/19f99961-edac-455e-b407-aa6aa80ec862/0V34SX2YcE31B3zZ0xcm5dFbN1fGUdZc9GRIlxvP.jpg"
        thumbnails:
          type: object
          properties:
            small:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_small.webp
            medium:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_medium.webp
            custom:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_custom.webp
        alt:
          type: "string"
          example: "Image example"
        width:
          type: "integer"
          format: "int64"
          example: 500
        height:
          type: "integer"
          format: "int64"
          example: 500
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ImageResponse"
    ImageResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ImageResponseStore"
    ImageResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ImageResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/images?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/images?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/images
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageResponseShowDataArray"
    ImageResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageResponseShowDataObject"
    ImageResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Update successfully"
          example: "Update successfully"
      xml:
        name: "ImageResponseUpdate"
    ImageResponseStoreBatch:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ImageResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ImageResponseStoreBatch"
    ImageCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ImageCount"
    UnsupportedMediaType:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Unsupported Media Type"
          example: "Unsupported Media Type"
      xml:
        name: UnsupportedMediaType
    MissingImage:
      type: object
      properties:
        message:
          type: "string"
          description: File upload missing
          example: File upload missing
      xml:
        name: "MissingImage"
    TooManyImages:
      type: object
      properties:
        error:
          type: "string"
          description: Too many images
          example: Too many images
      xml:
        name: TooManyImages
    ClipartUpdate:
      type: "object"
      properties:
        storages:
          type: "array"
          example: ["e8304b84-a015-3bd4-a7d3-7a978f463a6v", e5610b84-a015-3bd4-a7d3-7a978f465df2]
          description: Storage ID
      xml:
        name: ClipartUpdate
    ClipartResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        name:
          type: "string"
          example: "Clipart example"
        url:
          type: "string"
          example: "https://files.printcart.com/images/19f99961-edac-455e-b407-aa6aa80ec862/0V34SX2YcE31B3zZ0xcm5dFbN1fGUdZc9GRIlxvP.jpg"
        thumbnails:
          type: object
          properties:
            small:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_small.webp
            medium:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_medium.webp
            custom:
              type: string
              example: https://files.printcart.com/image-thumbnail/e24d-dezj-408a-a247-4012a09b3/G0Ujj8ICRFDacEL0zj6Zq983Q818Z1X_custom.webp
        alt:
          type: "string"
          example: "Clipart example"
        width:
          type: "integer"
          format: "int64"
          example: 500
        height:
          type: "integer"
          format: "int64"
          example: 500
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ClipartResponse"
    ClipartResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ClipartResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ClipartResponseStore"
    ClipartResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ClipartResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/cliparts?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/cliparts?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/cliparts
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ClipartResponseShowDataArray"
    ClipartResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ClipartResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ClipartResponseShowDataObject"
    ClipartResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ClipartResponse"
        message:
          type: "string"
          description: "Update successfully"
          example: "Update successfully"
      xml:
        name: "ClipartResponseUpdate"
    ClipartResponseStoreBatch:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ClipartResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ClipartResponseStoreBatch"
    ClipartCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ClipartCount"
    TooManyCliparts:
      type: object
      properties:
        error:
          type: "string"
          description: Too many cliparts
          example: Too many cliparts
      xml:
        name: TooManyCliparts
    DesignJson:
      type: object
      required:
        - "side_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        note:
          type: "string"
          example: "Design Example"
        is_uploader:
          type: "boolean"
          default: false
        layers:
          type: "array"
          items:
            type: object
          description: "Lorem ipsum..."
          example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
        status:
          type: "string"
          default: "processing"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "DesignJson"
    DesignUpdateJson:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        design_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        note:
          type: "string"
          example: "Design Example"
        is_uploader:
          type: "boolean"
          default: false
        layers:
          type: "array"
          items:
            type: object
          description: "Lorem ipsum..."
          example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
        status:
          type: "string"
          default: "processing"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          description: Design status
          example: "accepted"
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "DesignUpdateJson"
    DesignBatchJson:
      type: "object"
      required:
        - "side_id"
      properties:
        designs:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/DesignJson"
      xml:
        name: "DesignBatchJson"
    DesignBatchUpdateJson:
      type: "object"
      properties:
        designs:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Design ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              design_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              note:
                type: "string"
                example: "Design Example"
              is_uploader:
                type: "boolean"
                default: false
              layers:
                type: "array"
                items:
                  type: object
                description: "Lorem ipsum..."
                example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
              status:
                type: "string"
                default: "processing"
                enum:
                  - "accepted"
                  - "processing"
                  - "declined"
                  - "trashed"
                  - "deleted"
                description: Design status
                example: "accepted"
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "DesignBatchUpdateJson"
    DesignBatchDelete:
      type: "object"
      properties:
        designs:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Design ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "DesignBatchDelete"
    DesignResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        note:
          type: "string"
          example: "Design example note"
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          example: "processing"
        side:
          type: "object"
          properties:
            type: "object"
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            name:
              type: "string"
              example: "Side Example"
            ratio:
              type: "number"
              format: "double"
              example: 72
            dimension_unit:
              type: string
              enum: ["inch", "cm"]
              example: "cm"
            status:
              type: "string"
              default: "publish"
              enum: ["publish", "draft", "trashed"]
              example: "publish"
            design_area:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
                top:
                  type: "number"
                  format: "float"
                  example: 50
                left:
                  type: "number"
                  format: "float"
                  example: 50
            show_cut_line:
              type: "boolean"
              example: true
            cut_line_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            safe_zone_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            side_image_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
            side_image:
              $ref: "#/components/schemas/ImageResponse"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        product:
          $ref: "#/components/schemas/ProductResponse"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        design_image:
          $ref: "#/components/schemas/ImageResponse"
        original_side:
          $ref: "#/components/schemas/SideResponse"
        original_output_options:
          type: object
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        viewport:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50.50
            height:
              type: "number"
              format: "float"
              example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "DesignResponse"
    DesignLayerResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        note:
          type: "string"
          example: "Design example note"
        status:
          type: "string"
          enum:
            - "accepted"
            - "processing"
            - "declined"
            - "trashed"
            - "deleted"
          example: "processing"
        side:
          type: "object"
          properties:
            type: "object"
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            name:
              type: "string"
              example: "Side Example"
            ratio:
              type: "number"
              format: "double"
              example: 72
            dimension_unit:
              type: string
              enum: ["inch", "cm"]
              example: "cm"
            status:
              type: "string"
              default: "publish"
              enum: ["publish", "draft", "trashed"]
              example: "publish"
            design_area:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
                top:
                  type: "number"
                  format: "float"
                  example: 50
                left:
                  type: "number"
                  format: "float"
                  example: 50
            show_cut_line:
              type: "boolean"
              example: true
            cut_line_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            safe_zone_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            side_image_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
            side_image:
              $ref: "#/components/schemas/ImageResponse"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        product:
          $ref: "#/components/schemas/ProductResponse"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        design_image:
          $ref: "#/components/schemas/ImageResponse"
        original_side:
          $ref: "#/components/schemas/SideResponse"
        original_output_options:
          type: object
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        viewport:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50.50
            height:
              type: "number"
              format: "float"
              example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        layers:
          type: "array"
          items:
            type: "object"
            properties:
              top:
                type: "number"
                example: 38.9832354205
              left:
                type: "number"
                example: 329.6631024663
              text:
                type: "string"
                example: "Heading"
              width:
                type: "integer"
                format: "int64"
                example: 158
              height:
                type: "integer"
                format: "int64"
                example: 47.46
              originX:
                type: "string"
                example: "left"
              originY:
                type: "string"
                example: "top"
              fontSize:
                type: "integer"
                format: "int64"
                example: 42
              minWidth:
                type: "integer"
                format: "int64"
                example: 20
              fontStyle:
                type: "string"
                example: "normal"
              textAlign:
                type: "string"
                example: "left"
              underline:
                type: "boolean"
                example: false,
              fontFamily:
                type: "string"
                example: "Roboto"
              fontWeight:
                type: "string"
                example: "normal"
      xml:
        name: "DesignLayerResponse"
    DesignResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "DesignResponseStore"
    DesignResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/DesignResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/designs?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/designs?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/designs
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignResponseShowDataArray"
    DesignResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignResponseShowDataObject"
    DesignResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/DesignLayerResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "DesignResponseUpdate"
    DesignBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/DesignResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "DesignBatchResponse"
    DesignBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/DesignResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "DesignBatchUpdateResponse"
    DesignCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignCount"
    DesignError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find design with id"
          example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "DesignError"
    DesignFont:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "DesignFont"
    InvalidDesignFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid design file"
          example: "Invalid design file"
      xml:
        name: "InvalidDesignFile"
    InvalidContentTypeHeader:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid Content-Type header"
          example: "Invalid Content-Type header"
      xml:
        name: "InvalidContentTypeHeader"
    MissingDesignFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Missing design file"
          example: "Missing design file"
      xml:
        name: "MissingDesignFile"
    TooManyDesigns:
      type: object
      properties:
        error:
          type: "string"
          description: Too many designs
          example: Too many designs
      xml:
        name: TooManyDesigns
    TemplateJson:
      type: "object"
      required:
        - "side_id"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        note:
          type: "string"
          example: "Template example note"
        layers:
          type: "array"
          description: "Lorem ipsum..."
          items:
            type: object
          example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateJson"
    TemplateUpdateJson:
      type: "object"
      properties:
        project_id:
          type: "string"
          description: Project ID
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        side_id:
          type: "string"
          description: Side ID
          example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        preview_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        template_image_id:
          type: "string"
          description: Image ID
          example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
        note:
          type: "string"
          example: "printcart"
        layers:
          type: "array"
          items:
            type: object
          description: "Lorem ipsum..."
          example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
        viewport_width:
          type: "number"
          format: "float"
          example: 50.50
        viewport_height:
          type: "number"
          format: "float"
          example: 50.50
      xml:
        name: "TemplateUpdateJson"
    TemplateBatchJson:
      type: "object"
      required:
        - "side_id"
      properties:
        templates:
          type: "array"
          items:
            type: "array"
            $ref: "#/components/schemas/TemplateJson"
      xml:
        name: "TemplateBatchJson"
    TemplateBatchUpdateJson:
      type: "object"
      properties:
        templates:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Template ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
              project_id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              side_id:
                type: "string"
                description: Side ID
                example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
              preview_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              template_image_id:
                type: "string"
                description: Image ID
                example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
              note:
                type: "string"
                example: "printcart"
              layers:
                type: "array"
                items:
                  type: object
                description: "Lorem ipsum..."
                example: [{ "top": 183.5025, "left": 195.79, "text": "Blackbird", "width": 68.33984375, "height": 22.6, "originX": "left", "originY": "top", "fontSize": 20, "fontStyle": "normal", "textAlign": "left", "fontFamily": "Yellowtail", "fontWeight": "normal" }]
              viewport_width:
                type: "number"
                format: "float"
                example: 50.50
              viewport_height:
                type: "number"
                format: "float"
                example: 50.50
      xml:
        name: "TemplateBatchUpdateJson"
    TemplateBatchDelete:
      type: "object"
      properties:
        templates:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Template ID
                example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "TemplateBatchDelete"
    TemplateResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        note:
          type: "string"
          example: "Template example note"
        side:
          type: "object"
          properties:
            type: "object"
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            name:
              type: "string"
              example: "Side Example"
            ratio:
              type: "number"
              format: "double"
              example: 72
            dimension_unit:
              type: string
              enum: ["inch", "cm"]
              example: "cm"
            status:
              type: "string"
              default: "publish"
              enum: ["publish", "draft", "trashed"]
              example: "publish"
            design_area:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
                top:
                  type: "number"
                  format: "float"
                  example: 50
                left:
                  type: "number"
                  format: "float"
                  example: 50
            show_cut_line:
              type: "boolean"
              example: true
            cut_line_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            safe_zone_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            side_image_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
            side_image:
              $ref: "#/components/schemas/ImageResponse"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        product:
          $ref: "#/components/schemas/ProductResponse"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        template_image:
          $ref: "#/components/schemas/ImageResponse"
        original_side:
          $ref: "#/components/schemas/SideResponse"
        original_output_options:
          type: object
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        viewport:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50.50
            height:
              type: "number"
              format: "float"
              example: 50.50
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "TemplateResponse"
    TemplateLayerResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
        note:
          type: "string"
          example: "Template example note"
        side:
          type: "object"
          properties:
            type: "object"
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            name:
              type: "string"
              example: "Side Example"
            ratio:
              type: "number"
              format: "double"
              example: 72
            dimension_unit:
              type: string
              enum: ["inch", "cm"]
              example: "cm"
            status:
              type: "string"
              default: "publish"
              enum: ["publish", "draft", "trashed"]
              example: "publish"
            design_area:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
                top:
                  type: "number"
                  format: "float"
                  example: 50
                left:
                  type: "number"
                  format: "float"
                  example: 50
            show_cut_line:
              type: "boolean"
              example: true
            cut_line_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            safe_zone_margin:
              type: "object"
              properties:
                x:
                  type: "number"
                  format: "float"
                  example: 50.50
                y:
                  type: "number"
                  format: "float"
                  example: 50.50
            side_image_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "float"
                  example: 50
                height:
                  type: "number"
                  format: "float"
                  example: 50
            side_image:
              $ref: "#/components/schemas/ImageResponse"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_overlay:
              $ref: "#/components/schemas/ImageResponse"
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
        product:
          $ref: "#/components/schemas/ProductResponse"
        project:
          $ref: "#/components/schemas/ProjectResponse"
        preview_image:
          $ref: "#/components/schemas/ImageResponse"
        template_image:
          $ref: "#/components/schemas/ImageResponse"
        original_side:
          $ref: "#/components/schemas/SideResponse"
        original_output_options:
          type: object
          properties:
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
        viewport:
          type: "object"
          properties:
            width:
              type: "number"
              format: "float"
              example: 50.50
            height:
              type: "number"
              format: "float"
              example: 50.50
        layers:
          type: "array"
          items:
            type: "object"
            properties:
              top:
                type: "number"
                example: 38.9832354205
              left:
                type: "number"
                example: 329.6631024663
              text:
                type: "string"
                example: "Heading"
              width:
                type: "integer"
                format: "int64"
                example: 158
              height:
                type: "integer"
                format: "int64"
                example: 47.46
              originX:
                type: "string"
                example: "left"
              originY:
                type: "string"
                example: "top"
              fontSize:
                type: "integer"
                format: "int64"
                example: 42
              minWidth:
                type: "integer"
                format: "int64"
                example: 20
              fontStyle:
                type: "string"
                example: "normal"
              textAlign:
                type: "string"
                example: "left"
              underline:
                type: "boolean"
                example: false,
              fontFamily:
                type: "string"
                example: "Roboto"
              fontWeight:
                type: "string"
                example: "normal"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "TemplateLayerResponse"
    TemplateResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateLayerResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "TemplateResponseStore"
    TemplateResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/templates?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/templates?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/templates
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateResponseShowDataArray"
    TemplateResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateLayerResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateResponseShowDataObject"
    TemplateResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/TemplateLayerResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "TemplateResponseUpdate"
    TemplateBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateLayerResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "TemplateBatchResponse"
    TemplateBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/TemplateResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "TemplateBatchUpdateResponse"
    TemplateError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find template with id"
          example: "Can't find template with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      xml:
        name: "TemplateError"
    TemplateFont:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateFont"
    TemplateCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "TemplateCount"
    TooManyTemplates:
      type: object
      properties:
        error:
          type: "string"
          description: Too many templates
          example: Too many templates
      xml:
        name: TooManyTemplates
    InvalidTemplateFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Invalid template file"
          example: "Invalid template file"
      xml:
        name: "InvalidTemplateFile"
    MissingTemplateFile:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Missing template file"
          example: "Missing template file"
      xml:
        name: "MissingTemplateFile"
    Project:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a project
          example: "Project example"
        status:
          type: "string"
          default: "processing"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          description: Project status
          example: "processing"
        note:
          type: "string"
          example: "project example note"
      xml:
        name: "Project"
    ProjectUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: The name given to a project
          example: "Project example update"
        status:
          type: "string"
          default: "processing"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          description: Project status
          example: "processing"
        note:
          type: "string"
          example: "Project example update note"
      xml:
        name: "ProjectUpdate"
    ProjectBatch:
      type: "object"
      required:
        - "name"
      properties:
        projects:
          type: "array"
          $ref: "#/components/schemas/Project"
      xml:
        name: "ProjectBatch"
    ProjectBatchUpdate:
      type: "object"
      properties:
        projects:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
              name:
                type: "string"
                description: Updated name of the project
                example: "Project example batch update"
              status:
                type: "string"
                enum:
                  - "processing"
                  - "reviewing"
                  - "accepted"
                  - "trashed"
                  - "deleted"
                description: Project status
                example: "processing"
              note:
                type: "string"
                example: "Project example batch update note"
      xml:
        name: "ProjectBatchUpdate"
    ProjectBatchDelete:
      type: "object"
      properties:
        projects:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
            properties:
              id:
                type: "string"
                description: Project ID
                example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      xml:
        name: "ProjectBatchDelete"
    ProjectResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
        name:
          type: "string"
          example: "project example"
        status:
          type: "string"
          enum:
            - "processing"
            - "reviewing"
            - "accepted"
            - "trashed"
            - "deleted"
          example: "processing"
        note:
          type: "string"
          example: "project example note"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "ProjectResponse"
    ProjectResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProjectResponseStore"
    ProjectResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProjectResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/projects?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/projects?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/projects
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectResponseShowDataArray"
    ProjectResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectResponseShowDataObject"
    ProjectResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProjectResponseUpdate"
    ProjectBatchResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "ProjectBatchResponse"
    ProjectBatchUpdateResponse:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/ProjectResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "ProjectBatchUpdateResponse"
    ProjectCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "ProjectCount"
    TooManyProjects:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Too many projects"
          example: "Too many projects"
      xml:
        name: TooManyProjects
    ProjectError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Can't find project with id"
          example: "Can't find project with id: 4419934f-8e1b-4cf0-b432-01ef9258a812"
      xml:
        name: "ProjectError"
    TooManyDesignsByProject:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Too many designs by project"
          example: "Too many designs by project"
      xml:
        name: TooManyDesignsByProject
    TooManyProductsByProject:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Too many products by project"
          example: "Too many products by project"
      xml:
        name: TooManyProductsByProject
    Category:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a storage
          example: "storage example"
        parent_id:
          type: "string"
          description: Storage ID
          example: null
      xml:
        name: "Category"
    CategoryUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the storage
          example: "storage example update"
        parent_id:
          type: "string"
          description: Storage ID
          example: null
      xml:
        name: "CategoryUpdate"
    CategoryCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryCount"
    CategoryResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        name:
          type: "string"
          example: "storage example"
        parent_storage_id:
          type: "string"
          example: null
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "CategoryResponse"
    CategoryResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "CategoryResponseStore"
    CategoryResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/CategoryResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/storages?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/storages?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/storages
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryResponseShowDataArray"
    CategoryResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "CategoryResponseShowDataObject"
    CategoryResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/CategoryResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "CategoryResponseUpdate"
    TooManyCategories:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Too many storages"
          example: "Too many storages"
      xml:
        name: TooManyCategories
    Font:
      type: "object"
      required:
        - "name"
        - "alias"
        - "url"
        - "type"
        - "subset"
      properties:
        name:
          type: "string"
          description: The name given to a font
          example: "font example"
        alias:
          type: "string"
          example: "font example"
        url:
          type: "string"
          format: "url"
          example: "https://example.com/font-example"
        type:
          type: "string"
          example: "font example"
        subset:
          type: "string"
          example: "font example"
      xml:
        name: "Font"
    FontUpdate:
      type: "object"
      properties:
        name:
          type: "string"
          description: Updated name of the font
          example: "font example"
        alias:
          type: "string"
          example: "font example"
        url:
          type: "string"
          format: "url"
          example: "https://example.com/font-example"
        type:
          type: "string"
          example: "font example"
        subset:
          type: "string"
          example: "font example"
      xml:
        name: "FontUpdate"
    FontResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "bff22494-79c3-312b-ba7e-6d6f6d57401c"
        name:
          type: "string"
          example: "font example"
        alias:
          type: "string"
          example: "font example"
        url:
          type: "string"
          example: "https://example.com/font-example"
        type:
          type: "string"
          example: "font example"
        subset:
          type: "string"
          example: "font example"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "FontResponse"
    FontResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "FontResponseStore"
    FontResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/FontResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/fonts?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/fonts?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/fonts
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontResponseShowDataArray"
    FontResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontResponseShowDataObject"
    FontResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/FontResponse"
        message:
          type: "string"
          description: "Update successfully"
          example: "Update successfully"
      xml:
        name: "FontResponseUpdate"
    FontCount:
      type: "object"
      properties:
        data:
          type: "object"
          properties:
            count:
              type: "integer"
              format: "int64"
              example: 10
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "FontCount"
    TooManyFonts:
      type: object
      properties:
        error:
          type: "string"
          description: Too many fonts
          example: Too many fonts
      xml:
        name: TooManyFonts
    Webhook:
      type: "object"
      required:
        - "event"
        - "callback_url"
        - "topic"
      properties:
        event:
          type: "string"
          default: "POST"
          enum:
            - "POST"
            - "PUT"
            - "DELETE"
            - "POST BATCH"
            - "PUT BATCH"
            - "DELETE BATCH"
          description: Event that triggers the webhook.
          example: "POST"
        callback_url:
          type: "string"
          format: "url"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          enum:
            - "projects"
            - "products"
            - "designs"
            - "templates"
            - "sides"
          example: "projects"
      xml:
        name: "Webhook"
    WebhookUpdate:
      type: "object"
      properties:
        event:
          type: "string"
          enum:
            - "POST"
            - "PUT"
            - "DELETE"
            - "POST BATCH"
            - "PUT BATCH"
            - "DELETE BATCH"
          description: Event that triggers the webhook.
          example: "POST"
        callback_url:
          type: "string"
          format: "url"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          enum:
            - "projects"
            - "products"
            - "designs"
            - "templates"
            - "sides"
          example: "projects"
      xml:
        name: "WebhookUpdate"
    WebhookResponse:
      type: "object"
      properties:
        id:
          type: "string"
          example: "ad8d432f-4c7d-459d-9f2f-4a6821666102"
        event:
          type: "string"
          example: "POST"
        callback_url:
          type: "string"
          example: "https://printcart.com/webhook-receiving-url/xxxx"
        topic:
          type: "string"
          example: "projects"
        created_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
        updated_at:
          type: "string"
          example: "2021-11-16T08:26:30.000000Z"
      xml:
        name: "WebhookResponse"
    WebhookResponseStore:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Created successfully"
          example: "Created successfully"
      xml:
        name: "WebhookResponseStore"
    WebhookResponseShowDataArray:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            type: "object"
            $ref: "#/components/schemas/WebhookResponse"
        links:
          type: object
          properties:
            first:
              type: string
              example: null
            last:
              type: string
              example: null
            prev:
              type: string
              example: https://api.printcart.com/v1/webhooks?cursor=byJpZCI6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
            next:
              type: string
              example: https://api.printcart.com/v1/webhooks?cursor=byJpOAM6MTE4MiwiX3BvaW50c1RvTmV4dEl0ZW1zIjp0cncavQ
        meta:
          type: object
          properties:
            path:
              type: string
              example: https://api.printcart.com/v1/webhooks
            per_page:
              type: integer
              example: 20
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "WebhookResponseShowDataArray"
    WebhookResponseShowDataObject:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Retrieved successfully"
          example: "Retrieved successfully"
      xml:
        name: "WebhookResponseShowDataObject"
    WebhookResponseUpdate:
      type: "object"
      properties:
        data:
          type: "object"
          $ref: "#/components/schemas/WebhookResponse"
        message:
          type: "string"
          description: "Updated successfully"
          example: "Updated successfully"
      xml:
        name: "WebhookResponseUpdate"
    TooManyWebhooks:
      type: object
      properties:
        error:
          type: "string"
          description: Too many webhooks
          example: Too many webhooks
      xml:
        name: TooManyFonts
    ClipartStorage:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          description: The name given to a clipart - storage
          example: "Clipart - Storage example"
        parent_id:
          type: "string"
          description: Storage ID
          example: null
      xml:
        name: "ClipartStorage"
    ProjectFolder:
      type: "object"
      required:
        - "category_id"
      properties:
        category_id:
          type: "string"
          description: Storage ID
          example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
        project_id:
          type: "string"
          description: Project ID
          example: "e8304b84-a015-3bd4-a7d3-7a978fxxxxxx"
      xml:
        name: "ProjectFolder"
    TooManyProjectsFolder:
      type: object
      properties:
        error:
          type: "string"
          description: Too many projects folder
          example: Too many projects folder
      xml:
        name: TooManyProjectsFolder
    TooManyFoldersByProject:
      type: object
      properties:
        error:
          type: "string"
          description: Too many folders by project
          example: Too many folders by project
      xml:
        name: TooManyFoldersByProject
    Deleted:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Deleted successfully"
          example: "Deleted successfully"
      xml:
        name: "Deleted"
    Unauthenticated:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Unauthenticated"
          example: "Unauthenticated"
      xml:
        name: "Unauthenticated"
    InvalidInput:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            field_name:
              type: "array"
              items:
                type: "string"
                example: That field error message
        message:
          type: "string"
          description: "Invalid input"
          example: "Invalid input"
      xml:
        name: "InvalidInput"
    NotFound:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Not found"
          example: "Not found"
      xml:
        name: "NotFound"
    InternalServerError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Internal Server Error"
          example: "Internal Server Error"
      xml:
        name: "InternalServerError"
    CheckUserTier:
      properties:
        message:
          type: "string"
          description: "Please upgrade your account."
          example: "Please upgrade your account."
      xml:
        name: "CheckUserTier"
    NoData:
      properties:
        message:
          type: "string"
          description: "No data"
          example: "No data"
      xml:
        name: "NoData"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
