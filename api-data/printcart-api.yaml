swagger: "2.0"
info:
  # description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "PrintCart Rest API"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "apiteam@swagger.io"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
basePath: "https://printcart.com/api/v1"
tags:
  - name: "Product"
  - name: "Side"
  - name: "Clipart"
  - name: "Image"
  - name: "Font"
  - name: "Design"
  - name: "Storage"
  - name: "Project"
  - name: "Account"
schemes:
  - "https"
paths:
  /account:
    post:
      tags:
        - "Account"
      # summary: "Add a new pet to the store"
      # description: ""
      operationId: "createAccount"
      summary: "Create Account"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Account"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/UserResponseStore"
    get:
      tags:
        - "Account"
      operationId: "getAccount"
      summary: "Get Account Info"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/UserResponseShow"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Account"
      # summary: "Updated Account"
      # description: "This can only be done by the logged in Account."
      operationId: "updateAccount"
      summary: "Update Account Details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Account"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/UserResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth:
            - "write:pets"
            - "read:pets"
  /account/token_revoke:
    put:
      tags:
        - "Account"
      # summary: "Updated Account"
      # description: "This can only be done by the logged in Account."
      operationId: "tokenRevoke"
      summary: "Renew API Key"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ApiTokenResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth:
            - "write:pets"
            - "read:pets"
  /products:
    post:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "postProduct"
      summary: "Create new product"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProductResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getProduct"
      summary: "Get a list of products"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataArray"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /products/{productId}:
    get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProductById"
      summary: "Get product details"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataObject"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "updateProduct"
      summary: "Update product details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProductResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "deleteProduct"
      summary: "Delete a product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /products/batch:
    post:
      tags:
        - "Product"
      # description:
      operationId: "postProductsBatch"
      summary: "Create batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatch"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProductBatchResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "500":
          description: "Something went wrong while create products"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create products"
                example: "Something went wrong while create products"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Product"
      # description:
      operationId: "putProductsBatch"
      summary: "Update batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatchUpdate"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProductBatchUpdateResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find product with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find product with id"
                example: "Can't find product with id: 962af342-a2c9-4665-bb5d-cb208258d958"
        "500":
          description: "Something went wrong while update products"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update products"
                example: "Something went wrong while update products"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Product"
      # description:
      operationId: "deleteProductsBatch"
      summary: "Delete batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatchDelete"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find product with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find product with id"
                example: "Can't find product with id: 962af342-a2c9-4665-bb5d-cb208258d958"
      security:
        - BasicAuth: []
  /products/{productId}/designs:
    get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignsByProduct"
      summary: "Get a list of designs by product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /products/{productId}/sides:
    get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getSidesByProduct"
      summary: "Get a list of sides by product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /products/{productId}/designs/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesignsByProduct"
      summary: "Get a count of designs by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /products/{productId}/sides/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountSidesByProduct"
      summary: "Get a count of sides by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /products/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountProduct"
      summary: "Get a count of products"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /sides:
    post:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "postSide"
      summary: "Create new product side"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Side"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/SideResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Side"
      # summary: "..."
      # description: "..."
      operationId: "getSide"
      summary: "Get a list of product sides"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /sides/{sideId}:
    get:
      tags:
        - "Side"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getSideById"
      summary: "Get product side details"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "updateSide"
      summary: "Update a product side details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Side"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/SideResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "deleteSide"
      summary: "Delete a product side"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /sides/batch:
    post:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "postSidesBatch"
      summary: "Create batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/SideBatch"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/SideBatchResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "500":
          description: "Something went wrong while create sides"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create sides"
                example: "Something went wrong while create sides"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "putSidesBatch"
      summary: "Update batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/SideBatchUpdate"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/SideBatchUpdateResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find side with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find side with id"
                example: "Can't find side with id: c5661a1e-8147-4dc3-8600-00fdc81ed14b"
        "500":
          description: "Something went wrong while update sides"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update sides"
                example: "Something went wrong while update sides"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Side"
      # description:
      operationId: "deleteSidesBatch"
      summary: "Delete batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/SideBatchDelete"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find side with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find side with id"
                example: "Can't find side with id: c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      security:
        - BasicAuth: []
  /sides/count:
    get:
      tags:
        - "Side"
      # summary: "..."
      # description: "..."
      operationId: "getCountSide"
      summary: "Get a count of product sides"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /cliparts:
    post:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "postClipart"
      summary: "Create new clipart"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Clipart"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ClipartResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Clipart"
      # summary: "..."
      # description: "..."
      operationId: "getClipart"
      summary: "Get a list of cliparts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ClipartResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /cliparts/{clipartId}:
    get:
      tags:
        - "Clipart"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getClipartById"
      summary: "Get clipart details"
      produces:
        - "application/json"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ClipartResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "updateClipart"
      summary: "Update clipart details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Clipart"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ClipartResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "deleteClipart"
      summary: "Delete a clipart"
      produces:
        - "application/json"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /cliparts/batch:
    post:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "postClipartsBatch"
      summary: "Create batch cliparts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/ClipartBatch"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ClipartBatchResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "500":
          description: "Something went wrong while create cliparts"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create cliparts"
                example: "Something went wrong while create cliparts"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "putClipartsBatch"
      summary: "Update batch cliparts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/ClipartBatchUpdate"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ClipartBatchUpdateResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find clipart with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find clipart with id"
                example: "Can't find clipart with id: 3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
        "500":
          description: "Something went wrong while update cliparts"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update cliparts"
                example: "Something went wrong while update cliparts"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Clipart"
      # description:
      operationId: "deleteClipartsBatch"
      summary: "Delete batch cliparts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ClipartBatchDelete"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find clipart with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find clipart with id"
                example: "Can't find clipart with id: 3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
      security:
        - BasicAuth: []
  /cliparts-storages:
    get:
      tags:
        - "Clipart"
      # summary: "..."
      # description: "..."
      operationId: "getCategory"
      summary: "Get a list of clipart storages"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /cliparts/count:
    get:
      tags:
        - "Clipart"
      # summary: "..."
      # description: "..."
      operationId: "getCountClipart"
      summary: "Get a count of cliparts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ClipartCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /fonts:
    post:
      tags:
        - "Font"
      # summary: "Add a new pet to the store"
      # description: ""
      operationId: "addFont"
      summary: "Add new font"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Font"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/FontResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Font"
      # summary: "..."
      # description: "..."
      operationId: "getFonts"
      summary: "Get a list of fonts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/FontResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /fonts/{fontId}:
    get:
      tags:
        - "Font"
      operationId: "getFontById"
      summary: "Get font details"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
      responses:
        "200":
          schema:
            $ref: "#/definitions/FontResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Font"
      # summary:
      # description:
      operationId: "updateFont"
      summary: "Update font details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Font"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/FontResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Font"
      # summary:
      # description:
      operationId: "deleteFont"
      summary: "Delete font"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /fonts/count:
    get:
      tags:
        - "Font"
      # summary: "..."
      # description: "..."
      operationId: "getCountFont"
      summary: "Get a count of fonts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/FontCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /images:
    post:
      tags:
        - "Image"
      # summary:
      # description:
      operationId: "uploadFile"
      summary: "Add new image"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "file"
          in: "formData"
          description: "Image to upload"
          required: true
          type: "file"
      responses:
        "201":
          description: "File successfully uploaded"
          schema:
            $ref: "#/definitions/ImageResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "405":
          description: "File upload missing"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "File upload missing"
                example: "File upload missing"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Image"
      # summary: "..."
      # description: "..."
      operationId: "getImage"
      summary: "Get a list of images"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /images/{imageId}:
    get:
      tags:
        - "Image"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getImageById"
      summary: "Get image details"
      produces:
        - "application/json"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "Image"
      # summary:
      # description:
      operationId: "deleteImage"
      summary: "Delete a image"
      produces:
        - "application/json"
      parameters:
        - name: "imageID"
          in: "path"
          description: "Image ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /images/count:
    get:
      tags:
        - "Image"
      # summary: "..."
      # description: "..."
      operationId: "getCountImage"
      summary: "Get a count of images"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /designs:
    post:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "postDesign"
      summary: "Create new design"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Design"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/DesignResponseStore"
      security:
        - ApiKeyAuth: []
    get:
      tags:
        - "Design"
      # summary: "..."
      # description: "..."
      operationId: "getDesign"
      summary: "Get a list of designs"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /designs/{designId}/layer:
    get:
      tags:
        - "Design"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getLayerDesignById"
      summary: "Get list layer by design"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignLayer"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /designs/{designId}:
    get:
      tags:
        - "Design"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignById"
      summary: "Get design details"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "updateDesign"
      summary: "Update design details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Design"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/DesignResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "deleteDesign"
      summary: "Delete a design"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /designs/batch:
    post:
      tags:
        - "Design"
      # description:
      operationId: "postDesignsBatch"
      summary: "Create batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatch"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/DesignBatchResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "500":
          description: "Something went wrong while create designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create designs"
                example: "Something went wrong while create designs"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Design"
      # description:
      operationId: "putDesignsBatch"
      summary: "Update batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatchUpdate"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/DesignBatchUpdateResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find design with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find design with id"
                example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
        "500":
          description: "Something went wrong while update designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update designs"
                example: "Something went wrong while update designs"
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "Design"
      # description:
      operationId: "deleteDesignsBatch"
      summary: "Delete batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatchDelete"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find design with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find design with id"
                example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      security:
        - ApiKeyAuth: []
  /designs/{designId}/storages:
    get:
      tags:
        - "Design"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getStoragesByDesign"
      summary: "Get a list of storages by design"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /designs/count:
    get:
      tags:
        - "Design"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesign"
      summary: "Get a count of designs"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /storages:
    post:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "postCategory"
      summary: "Create new design storage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/CategoryResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "getCategory"
      summary: "Get a list of design storages"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /storages/{storageId}:
    get:
      tags:
        - "Storage"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getCategoryById"
      summary: "Get design storage details"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "updateCategory"
      summary: "Update design storage details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/CategoryResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "deleteCategory"
      summary: "Delete a design storage"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /designs-storages/{storageId}:
    get:
      tags:
        - "Storage"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignsByStorage"
      summary: "Get a list of designs by storage"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /cliparts-storages/{storageId}:
    get:
      tags:
        - "Storage"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getClipartsByStorage"
      summary: "Get a list of cliparts by storage"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ClipartResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /storages/count:
    get:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "getCountCategory"
      summary: "Get a count of design storages"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
  /projects:
    post:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "postProject"
      summary: "Create new project"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProjectResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getProject"
      summary: "Get a list of projects"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /projects/{projectId}:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProjectById"
      summary: "Get project details"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "updateProject"
      summary: "Update project details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProjectResponseUpdate"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "deleteProject"
      summary: "Delete a project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /projects/batch:
    post:
      tags:
        - "Project"
      # description:
      operationId: "postProjectsBatch"
      summary: "Create batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatch"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProjectBatchResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "500":
          description: "Something went wrong while create projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create projects"
                example: "Something went wrong while create projects"
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "Project"
      # description:
      operationId: "putProjectsBatch"
      summary: "Update batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatchUpdate"
      responses:
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProjectBatchUpdateResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find project with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find project with id"
                example: "Can't find project with id: 4419934f-8e1b-4cf0-b432-01ef9258a812"
        "500":
          description: "Something went wrong while update projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update projects"
                example: "Something went wrong while update projects"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Project"
      # description:
      operationId: "deleteProjectsBatch"
      summary: "Delete batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatchDelete"
      responses:
        "204":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find project with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find project with id"
                example: "Can't find project with id: 4419934f-8e1b-4cf0-b432-01ef9258a812"
      security:
        - BasicAuth: []
  /projects/{projectId}/designs:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignsByProject"
      summary: "Get a list of designs by project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /projects/{projectId}/products:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProductsByProject"
      summary: "Get a list of products by project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - ApiKeyAuth: []
  /projects/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountProject"
      summary: "Get a count of projects"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /projects/{projectId}/designs/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesignsByProject"
      summary: "Get a count of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
  /projects/{projectId}/products/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountProductsByProject"
      summary: "Get a count of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  BasicAuth:
    type: "basic"
definitions:
  Account:
    type: "object"
    required:
      - "name"
      - "email"
      - "password"
    properties:
      name:
        type: "string"
        example: "printcart"
      email:
        type: "string"
        format: "email"
        example: "printcart@gmail.com"
      password:
        type: "string"
        example: "printcart123"
      avatar_img_url:
        type: "string"
        example: "https://docs.printcart.com/img/Logo-PrintCart-1.png"
      google_font_api:
        type: "string"
        example: "AIzaSyBtoM...L3iAPUPrpQ"
    xml:
      name: "Account"
  UserResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "19f99961-edac-455e-b407-aa6aa80ec862"
      name:
        type: "string"
        example: "printcart"
      email:
        type: "string"
        format: "email"
        example: "printcart@gmail.com"
      email_verified_at:
        type: "string"
        example: null
      google_font_api:
        type: "string"
        example: "AIzaSyBtoM...L3iAPUPrpQ"
      avatar_img_url:
        type: "string"
        example: "https://docs.printcart.com/img/Logo-PrintCart-1.png"
      created_at:
        type: "string"
        example: "2021-10-16 07:05:07"
      updated_at:
        type: "string"
        example: "2021-10-17 07:05:07"
      api_token:
        type: "string"
        example: "1|kRtTFoeS2bhXcVPbOYHW4EwP2DXaA9BxtdEX3EfU"
    xml:
      name: "UserResponse"
  UserResponseShow:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/UserResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "UserResponseShow"
  UserResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/UserResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "UserResponseStore"
  UserResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/UserResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "UserResponseUpdate"
  ApiTokenResponse:
    type: "object"
    properties:
      api_token:
        type: "string"
        example: "2|m9RU0sw3yXCXiJqZFbNbrAPwy0Kc9vlZMgDT7vaT"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ApiTokenResponse"
  Font:
    type: "object"
    required:
      - "name"
      - "alias"
      - "url"
    properties:
      name:
        type: "string"
        example: "printcart"
      alias:
        type: "string"
        example: "printcart"
      url:
        type: "string"
        example: "https//:printcart.com/printcart"
      type:
        type: "string"
        example: "printcart"
      subset:
        type: "string"
        example: "printcart"
    xml:
      name: "Font"
  FontResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "bff22494-79c3-312b-ba7e-6d6f6d57401c"
      name:
        type: "string"
        example: "printcart"
      alias:
        type: "string"
        example: "printcart"
      url:
        type: "string"
        example: "https//:printcart.com/printcart"
      type:
        type: "string"
        example: "printcart"
      subset:
        type: "string"
        example: "printcart"
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "FontResponse"
  FontResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontResponseShowDataObject"
  FontResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontResponseShowDataArray"
  FontResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "FontResponseStore"
  FontResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Update successfully"
        example: "Update successfully"
    xml:
      name: "FontResponseUpdate"
  FontCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontCount"
  ImageResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      name:
        type: "string"
        example: "printcart"
      size:
        type: "integer"
        format: "int64"
        example: 20000
      url:
        type: "string"
        example: "https://docs.printcart.com/img/Logo-PrintCart-1.png"
      alt:
        type: "string"
        example: "printcart"
      width:
        type: "integer"
        format: "int64"
        example: 500
      height:
        type: "integer"
        format: "int64"
        example: 500
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "ImageResponse"
  ImageResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageResponseShowDataObject"
  ImageResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageResponseShowDataArray"
  ImageResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ImageResponseStore"
  ImageResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Update successfully"
        example: "Update successfully"
    xml:
      name: "ImageResponseUpdate"
  ImageCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageCount"
  Clipart:
    type: "object"
    required:
      - "name"
      - "image_id"
    properties:
      name:
        type: "string"
        example: "printcart"
      image_id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "Clipart"
  ClipartBatch:
    type: "object"
    required:
      - "name"
    properties:
      cliparts:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Clipart"
    xml:
      name: "ClipartBatch"
  ClipartBatchUpdate:
    type: "object"
    required:
      - "name"
    properties:
      cliparts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
            name:
              type: "string"
              example: "printcart"
            image_id:
              type: "string"
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "ClipartBatchUpdate"
  ClipartBatchDelete:
    type: "object"
    properties:
      cliparts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
    xml:
      name: "ClipartBatchDelete"
  ClipartResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
      name:
        type: "string"
        example: "printcart"
      url:
        type: "url"
        example: "https://docs.printcart.com/img/Logo-PrintCart-1.png"
      width:
        type: "integer"
        format: "int64"
        example: 500
      height:
        type: "integer"
        format: "int64"
        example: 500
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "ClipartResponse"
  ClipartResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ClipartResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ClipartResponseShowDataObject"
  ClipartResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ClipartResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ClipartResponseShowDataArray"
  ClipartResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ClipartResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ClipartResponseStore"
  ClipartResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ClipartResponse"
      message:
        type: "string"
        description: "Update successfully"
        example: "Update successfully"
    xml:
      name: "ClipartResponseUpdate"
  ClipartBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ClipartResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ClipartBatchResponse"
  ClipartBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
            name:
              type: "string"
              example: "printcart"
            url:
              type: "url"
              example: "https://docs.printcart.com/img/Logo-PrintCart-1.png"
            width:
              type: "integer"
              format: "int64"
              example: 500
            height:
              type: "integer"
              format: "int64"
              example: 500
            created_at:
              type: "string"
              example: "2021-1-1 00:00:00"
            updated_at:
              type: "string"
              example: "2021-1-1 00:00:00"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ClipartBatchUpdateResponse"
  ClipartCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ClipartCount"
  Product:
    type: "object"
    required:
      - "name"
      - "product_image"
    properties:
      name:
        type: "string"
        example: "printcart"
      dynamic_side:
        type: "boolean"
        example: true
      viewport_width:
        type: "integer"
        format: "int64"
        example: 500
      viewport_height:
        type: "integer"
        format: "int64"
        example: 500
      scale:
        type: "integer"
        format: "int64"
        example: 500
      dpi:
        type: "integer"
        format: "int64"
        example: 500
      dimension_unit:
        type: "string"
        enum:
          - "inch"
          - "cm"
        example: "inch"
      status:
        type: "string"
        enum:
          - "publish"
          - "draft"
          - "trashed"
          - "deleted"
        example: "publish"
      allowed_file_types:
        type: "array"
        items:
          type: "string"
          enum:
            - "jpg"
            - "png"
            - "ai"
            - "ps"
            - "pdf"
            - "bmp"
            - "iddd"
        example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
      max_file_upload:
        type: "integer"
        format: "int64"
        example: 500
      min_jpg_dpi:
        type: "integer"
        format: "int64"
        example: 500
      enable_design:
        type: "boolean"
        example: false
      product_image:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "Product"
  ProductBatch:
    type: "object"
    required:
      - "name"
    properties:
      products:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Product"
    xml:
      name: "ProductBatch"
  ProductBatchUpdate:
    type: "object"
    required:
      - "name"
    properties:
      products:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              example: "printcart"
            dynamic_side:
              type: "boolean"
              example: true
            viewport_width:
              type: "integer"
              format: "int64"
              example: 500
            viewport_height:
              type: "integer"
              format: "int64"
              example: 500
            scale:
              type: "integer"
              format: "int64"
              example: 500
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
            status:
              type: "string"
              enum:
                - "publish"
                - "draft"
                - "trashed"
                - "deleted"
              example: "publish"
            allowed_file_types:
              type: "array"
              items:
                type: "string"
                enum:
                  - "jpg"
                  - "png"
                  - "ai"
                  - "ps"
                  - "pdf"
                  - "bmp"
                  - "iddd"
              example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
            max_file_upload:
              type: "integer"
              format: "int64"
              example: 500
            min_jpg_dpi:
              type: "integer"
              format: "int64"
              example: 500
            enable_design:
              type: "boolean"
              example: false
            product_image:
              type: "string"
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "ProductBatchUpdate"
  ProductBatchDelete:
    type: "object"
    properties:
      products:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
    xml:
      name: "ProductBatchDelete"
  ProductResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "962af342-a2c9-4665-bb5d-cb208258d958"
      name:
        type: "string"
        example: "printcart"
      dynamic_side:
        type: "boolean"
        example: 500
      viewport_width:
        type: "integer"
        format: "int64"
        example: 500
      viewport_height:
        type: "integer"
        format: "int64"
        example: 500
      scale:
        type: "integer"
        format: "int64"
        example: 500
      dpi:
        type: "integer"
        format: "int64"
        example: 500
      dimension_unit:
        type: "string"
        enum:
          - "inch"
          - "cm"
        example: "inch"
      status:
        type: "string"
        enum:
          - "publish"
          - "draft"
          - "trashed"
          - "deleted"
        example: "publish"
      allowed_file_types:
        type: "array"
        items:
          type: "string"
          enum:
            - "jpg"
            - "png"
            - "ai"
            - "ps"
            - "pdf"
            - "bmp"
            - "iddd"
        example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
      max_file_upload:
        type: "integer"
        format: "int64"
        example: 500
      min_jpg_dpi:
        type: "integer"
        format: "int64"
        example: 500
      enable_design:
        type: "boolean"
        example: false
      product_image:
        $ref: "#/definitions/ImageResponse"
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "ProductResponse"
  ProductResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductResponseShowDataObject"
  ProductResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductResponseShowDataArray"
  ProductResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProductResponseStore"
  ProductResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProductResponseUpdate"
  ProductBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProductBatchResponse"
  ProductBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              example: "printcart"
            dynamic_side:
              type: "boolean"
              example: true
            viewport_width:
              type: "integer"
              format: "int64"
              example: 500
            viewport_height:
              type: "integer"
              format: "int64"
              example: 500
            scale:
              type: "integer"
              format: "int64"
              example: 500
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
            status:
              type: "string"
              enum:
                - "publish"
                - "draft"
                - "trashed"
                - "deleted"
              example: "publish"
            allowed_file_types:
              type: "array"
              items:
                type: "string"
                enum:
                  - "jpg"
                  - "png"
                  - "ai"
                  - "ps"
                  - "pdf"
                  - "bmp"
                  - "iddd"
              example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
            max_file_upload:
              type: "integer"
              format: "int64"
              example: 500
            min_jpg_dpi:
              type: "integer"
              format: "int64"
              example: 500
            enable_design:
              type: "boolean"
              example: false
            product_image:
              $ref: "#/definitions/ImageResponse"
            created_at:
              type: "string"
              example: "2021-1-1 00:00:00"
            updated_at:
              type: "string"
              example: "2021-1-1 00:00:00"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductBatchUpdateResponse"
  ProductCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductCount"
  Project:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
        example: "printcart"
      status:
        type: "string"
        enum:
          - "processing"
          - "reviewing"
          - "accepted"
          - "trashed"
          - "deleted"
        example: "processing"
      note:
        type: "string"
        example: "printcart note"
    xml:
      name: "Project"
  ProjectBatch:
    type: "object"
    required:
      - "name"
    properties:
      projects:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Project"
    xml:
      name: "ProjectBatch"
  ProjectBatchUpdate:
    type: "object"
    required:
      - "name"
    properties:
      projects:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            name:
              type: "string"
              example: "printcart"
            status:
              type: "string"
              enum:
                - "processing"
                - "reviewing"
                - "accepted"
                - "trashed"
                - "deleted"
              example: "processing"
            note:
              type: "string"
              example: "printcart note"
    xml:
      name: "ProjectBatchUpdate"
  ProjectBatchDelete:
    type: "object"
    properties:
      projects:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
    xml:
      name: "ProjectBatchDelete"
  ProjectCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectCount"
  ProjectResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      name:
        type: "string"
        example: "printcart"
      status:
        type: "string"
        enum:
          - "processing"
          - "reviewing"
          - "accepted"
          - "trashed"
          - "deleted"
        example: "processing"
      note:
        type: "string"
        example: "printcart note"
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "ProjectResponse"
  ProjectResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectResponseShowDataObject"
  ProjectResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectResponseShowDataArray"
  ProjectResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProjectResponseStore"
  ProjectBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProjectBatchResponse"
  ProjectBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            name:
              type: "string"
              example: "printcart"
            status:
              type: "string"
              enum:
                - "processing"
                - "reviewing"
                - "accepted"
                - "trashed"
                - "deleted"
              example: "processing"
            note:
              type: "string"
              example: "printcart note"
            created_at:
              type: "string"
              example: "2021-1-1 00:00:00"
            updated_at:
              type: "string"
              example: "2021-1-1 00:00:00"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectBatchUpdateResponse"
  ProjectResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProjectResponseUpdate"
  Side:
    type: "object"
    required:
      - "product_id"
      - "name"
      - "bg_img_id"
    properties:
      product_id:
        type: "string"
        example: "962af342-a2c9-4665-bb5d-cb208258d958"
      name:
        type: "string"
        example: "printcart"
      bg_type:
        type: "string"
        enum:
          - "color"
          - "image"
          - "transparent"
        example: "image"
      bg_color_value:
        type: "string"
        example: "red"
      img_top_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_left_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_bottom_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_right_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_overlay:
        type: "string"
        example: "printcart img"
      version:
        type: "string"
        example: "version 1.0.0"
      ratio:
        type: "integer"
        format: "int64"
        example: 100
      background_included:
        type: "boolean"
        example: true
      show_overlay:
        type: "boolean"
        example: true
      include_overlay:
        type: "boolean"
        example: true
      product_width:
        type: "integer"
        format: "int64"
        example: 50
      product_height:
        type: "integer"
        format: "int64"
        example: 50
      real_width:
        type: "integer"
        format: "int64"
        example: 50
      real_height:
        type: "integer"
        format: "int64"
        example: 50
      real_top:
        type: "integer"
        format: "int64"
        example: 50
      real_left:
        type: "integer"
        format: "int64"
        example: 50
      area_design_width:
        type: "integer"
        format: "int64"
        example: 50
      area_design_heigh:
        type: "integer"
        format: "int64"
        example: 50
      area_design_left:
        type: "integer"
        format: "int64"
        example: 50
      area_design_top:
        type: "integer"
        format: "int64"
        example: 50
      show_bleed:
        type: "boolean"
        example: true
      bleed_top_bottom:
        type: "number"
        format: "float"
        example: 50.50
      bleed_left_right:
        type: "number"
        format: "float"
        example: 50.50
      show_safe_zone:
        type: "boolean"
        example: true
      margin_vertical:
        type: "integer"
        format: "int64"
        example: 50
      margin_horizontal:
        type: "integer"
        format: "int64"
        example: 50
      bg_img_id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "Side"
  SideCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideCount"
  SideBatch:
    type: "object"
    required:
      - "name"
    properties:
      sides:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Side"
    xml:
      name: "SideBatch"
  SideBatchUpdate:
    type: "object"
    required:
      - "product_id"
      - "name"
      - "bg_img_id"
    properties:
      sides:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product_id:
              type: "string"
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_left_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_bottom_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_right_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_overlay:
              type: "string"
              example: "printcart img"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "integer"
              format: "int64"
              example: 50
            product_height:
              type: "integer"
              format: "int64"
              example: 50
            real_width:
              type: "integer"
              format: "int64"
              example: 50
            real_height:
              type: "integer"
              format: "int64"
              example: 50
            real_top:
              type: "integer"
              format: "int64"
              example: 50
            real_left:
              type: "integer"
              format: "int64"
              example: 50
            area_design_width:
              type: "integer"
              format: "int64"
              example: 50
            area_design_heigh:
              type: "integer"
              format: "int64"
              example: 50
            area_design_left:
              type: "integer"
              format: "int64"
              example: 50
            area_design_top:
              type: "integer"
              format: "int64"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_vertical:
              type: "integer"
              format: "int64"
              example: 50
            margin_horizontal:
              type: "integer"
              format: "int64"
              example: 50
            bg_img_id:
              type: "string"
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "SideBatchUpdate"
  SideBatchDelete:
    type: "object"
    properties:
      projects:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
    xml:
      name: "SideBatchDelete"
  SideResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      product:
        $ref: "#/definitions/ProductResponse"
      name:
        type: "string"
        example: "printcart"
      bg_type:
        type: "string"
        enum:
          - "color"
          - "image"
          - "transparent"
        example: "image"
      bg_color_value:
        type: "string"
        example: "red"
      img_top_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_left_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_bottom_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_right_pos:
        type: "integer"
        format: "int64"
        example: 50
      img_overlay:
        type: "string"
        example: "printcart img"
      version:
        type: "string"
        example: "version 1.0.0"
      ratio:
        type: "integer"
        format: "int64"
        example: 100
      background_included:
        type: "boolean"
        example: true
      show_overlay:
        type: "boolean"
        example: true
      include_overlay:
        type: "boolean"
        example: true
      product_width:
        type: "integer"
        format: "int64"
        example: 50
      product_height:
        type: "integer"
        format: "int64"
        example: 50
      real_width:
        type: "integer"
        format: "int64"
        example: 50
      real_height:
        type: "integer"
        format: "int64"
        example: 50
      real_top:
        type: "integer"
        format: "int64"
        example: 50
      real_left:
        type: "integer"
        format: "int64"
        example: 50
      area_design_width:
        type: "integer"
        format: "int64"
        example: 50
      area_design_heigh:
        type: "integer"
        format: "int64"
        example: 50
      area_design_left:
        type: "integer"
        format: "int64"
        example: 50
      area_design_top:
        type: "integer"
        format: "int64"
        example: 50
      show_bleed:
        type: "boolean"
        example: true
      bleed_top_bottom:
        type: "number"
        format: "float"
        example: 50.50
      bleed_left_right:
        type: "number"
        format: "float"
        example: 50.50
      show_safe_zone:
        type: "boolean"
        example: true
      margin_vertical:
        type: "integer"
        format: "int64"
        example: 50
      margin_horizontal:
        type: "integer"
        format: "int64"
        example: 50
      image:
        $ref: "#/definitions/ImageResponse"
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "SideResponse"
  SideResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideResponseShowDataObject"
  SideResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideResponseShowDataArray"
  SideResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "SideResponseStore"
  SideResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "SideResponseUpdate"
  SideBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "SideBatchResponse"
  SideBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/definitions/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_left_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_bottom_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_right_pos:
              type: "integer"
              format: "int64"
              example: 50
            img_overlay:
              type: "string"
              example: "printcart img"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "integer"
              format: "int64"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_width:
              type: "integer"
              format: "int64"
              example: 50
            product_height:
              type: "integer"
              format: "int64"
              example: 50
            real_width:
              type: "integer"
              format: "int64"
              example: 50
            real_height:
              type: "integer"
              format: "int64"
              example: 50
            real_top:
              type: "integer"
              format: "int64"
              example: 50
            real_left:
              type: "integer"
              format: "int64"
              example: 50
            area_design_width:
              type: "integer"
              format: "int64"
              example: 50
            area_design_heigh:
              type: "integer"
              format: "int64"
              example: 50
            area_design_left:
              type: "integer"
              format: "int64"
              example: 50
            area_design_top:
              type: "integer"
              format: "int64"
              example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_top_bottom:
              type: "number"
              format: "float"
              example: 50.50
            bleed_left_right:
              type: "number"
              format: "float"
              example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_vertical:
              type: "integer"
              format: "int64"
              example: 50
            margin_horizontal:
              type: "integer"
              format: "int64"
              example: 50
            image:
              $ref: "#/definitions/ImageResponse"
            created_at:
              type: "string"
              example: "2021-1-1 00:00:00"
            updated_at:
              type: "string"
              example: "2021-1-1 00:00:00"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideBatchUpdateResponse"
  Category:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
        example: "printcart"
      parent_id:
        type: "string"
        example: null
    xml:
      name: "Category"
  CategoryCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryCount"
  CategoryResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
      name:
        type: "string"
        example: "printcart"
      parent_storage_id:
        type: "string"
        example: null
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "CategoryResponse"
  CategoryResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryResponseShowDataObject"
  CategoryResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryResponseShowDataArray"
  CategoryResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "CategoryResponseStore"
  CategoryResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "CategoryResponseUpdate"
  Design:
    type: "object"
    required:
      - "project_id"
      - "side_id"
      - "preview_image_id"
      - "design_image_id"
    properties:
      project_id:
        type: "string"
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      side_id:
        type: "string"
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      design_with:
        type: "integer"
        format: "int64"
        example: 50
      design_height:
        type: "integer"
        format: "int64"
        example: 50
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      design_top_pos:
        type: "integer"
        format: "int64"
        example: 50
      design_left_pos:
        type: "integer"
        format: "int64"
        example: 50
      pdf_url:
        type: "string"
      preview_image_id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_image_id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart"
      layers:
        type: "array"
        description: "Lorem ipsum..."
        example: ["type", "version", "originX", "originY", "left"]
      status:
        type: "string"
        enum:
          - "accepted"
          - "processing"
          - "declined"
          - "trashed"
          - "deleted"
        example: "accepted"
    xml:
      name: "Design"
  DesignBatch:
    type: "object"
    required:
      - "project_id"
      - "side_id"
      - "preview_image_id"
      - "design_image_id"
    properties:
      designs:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Design"
    xml:
      name: "DesignBatch"
  DesignBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "DesignBatchResponse"
  DesignBatchUpdate:
    type: "object"
    required:
      - "project_id"
      - "side_id"
      - "preview_image_id"
      - "design_image_id"
    properties:
      designs:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project_id:
              type: "string"
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            side_id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            design_with:
              type: "integer"
              format: "int64"
              example: 50
            design_height:
              type: "integer"
              format: "int64"
              example: 50
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            design_top_pos:
              type: "integer"
              format: "int64"
              example: 50
            design_left_pos:
              type: "integer"
              format: "int64"
              example: 50
            pdf_url:
              type: "string"
            preview_image_id:
              type: "string"
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            design_image_id:
              type: "string"
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart"
            layers:
              type: "array"
              description: "Lorem ipsum..."
              example: ["type", "version", "originX", "originY", "left"]
            status:
              type: "string"
              enum:
                - "accepted"
                - "processing"
                - "declined"
                - "trashed"
                - "deleted"
              example: "accepted"
    xml:
      name: "DesignBatchUpdate"
  DesignBatchDelete:
    type: "object"
    properties:
      designs:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
    xml:
      name: "DesignBatchDelete"
  DesignBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project:
              $ref: "#/definitions/ProjectResponse"
            side:
              type: "object"
              properties:
                id:
                  type: "string"
                  example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                name:
                  type: "string"
                  example: "printcart"
                bg_type:
                  type: "string"
                  enum:
                    - "color"
                    - "image"
                    - "transparent"
                  example: "image"
                bg_color_value:
                  type: "string"
                  example: "red"
                img_top_pos:
                  type: "integer"
                  format: "int64"
                  example: 50
                img_left_pos:
                  type: "integer"
                  format: "int64"
                  example: 50
                img_bottom_pos:
                  type: "integer"
                  format: "int64"
                  example: 50
                img_right_pos:
                  type: "integer"
                  format: "int64"
                  example: 50
                img_overlay:
                  type: "string"
                  example: "printcart img"
                version:
                  type: "string"
                  example: "version 1.0.0"
                ratio:
                  type: "integer"
                  format: "int64"
                  example: 100
                background_included:
                  type: "boolean"
                  example: true
                show_overlay:
                  type: "boolean"
                  example: true
                include_overlay:
                  type: "boolean"
                  example: true
                product_width:
                  type: "integer"
                  format: "int64"
                  example: 50
                product_height:
                  type: "integer"
                  format: "int64"
                  example: 50
                real_width:
                  type: "integer"
                  format: "int64"
                  example: 50
                real_height:
                  type: "integer"
                  format: "int64"
                  example: 50
                real_top:
                  type: "integer"
                  format: "int64"
                  example: 50
                real_left:
                  type: "integer"
                  format: "int64"
                  example: 50
                area_design_width:
                  type: "integer"
                  format: "int64"
                  example: 50
                area_design_heigh:
                  type: "integer"
                  format: "int64"
                  example: 50
                area_design_left:
                  type: "integer"
                  format: "int64"
                  example: 50
                area_design_top:
                  type: "integer"
                  format: "int64"
                  example: 50
                show_bleed:
                  type: "boolean"
                  example: true
                bleed_top_bottom:
                  type: "number"
                  format: "float"
                  example: 50.50
                bleed_left_right:
                  type: "number"
                  format: "float"
                  example: 50.50
                show_safe_zone:
                  type: "boolean"
                  example: true
                margin_vertical:
                  type: "integer"
                  format: "int64"
                  example: 50
                margin_horizontal:
                  type: "integer"
                  format: "int64"
                  example: 50
                image:
                  $ref: "#/definitions/ImageResponse"
                created_at:
                  type: "string"
                  example: "2021-1-1 00:00:00"
                updated_at:
                  type: "string"
                  example: "2021-1-1 00:00:00"
            design_with:
              type: "integer"
              format: "int64"
              example: 50
            design_height:
              type: "integer"
              format: "int64"
              example: 50
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            design_top_pos:
              type: "integer"
              format: "int64"
              example: 50
            design_left_pos:
              type: "integer"
              format: "int64"
              example: 50
            pdf_url:
              type: "string"
            product:
              $ref: "#/definitions/ProductResponse"
            preview_image:
              $ref: "#/definitions/ImageResponse"
            design_image:
              $ref: "#/definitions/ImageResponse"
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart note"
            status:
              type: "string"
              enum:
                - "accepted"
                - "processing"
                - "declined"
                - "trashed"
                - "deleted"
              example: "accepted"
            created_at:
              type: "string"
              example: "2021-1-1 00:00:00"
            updated_at:
              type: "string"
              example: "2021-1-1 00:00:00"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignBatchUpdateResponse"
  DesignCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignCount"
  DesignResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      project:
        $ref: "#/definitions/ProjectResponse"
      side:
        type: "object"
        properties:
          id:
            type: "string"
            example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
          name:
            type: "string"
            example: "printcart"
          bg_type:
            type: "string"
            enum:
              - "color"
              - "image"
              - "transparent"
            example: "image"
          bg_color_value:
            type: "string"
            example: "red"
          img_top_pos:
            type: "integer"
            format: "int64"
            example: 50
          img_left_pos:
            type: "integer"
            format: "int64"
            example: 50
          img_bottom_pos:
            type: "integer"
            format: "int64"
            example: 50
          img_right_pos:
            type: "integer"
            format: "int64"
            example: 50
          img_overlay:
            type: "string"
            example: "printcart img"
          version:
            type: "string"
            example: "version 1.0.0"
          ratio:
            type: "integer"
            format: "int64"
            example: 100
          background_included:
            type: "boolean"
            example: true
          show_overlay:
            type: "boolean"
            example: true
          include_overlay:
            type: "boolean"
            example: true
          product_width:
            type: "integer"
            format: "int64"
            example: 50
          product_height:
            type: "integer"
            format: "int64"
            example: 50
          real_width:
            type: "integer"
            format: "int64"
            example: 50
          real_height:
            type: "integer"
            format: "int64"
            example: 50
          real_top:
            type: "integer"
            format: "int64"
            example: 50
          real_left:
            type: "integer"
            format: "int64"
            example: 50
          area_design_width:
            type: "integer"
            format: "int64"
            example: 50
          area_design_heigh:
            type: "integer"
            format: "int64"
            example: 50
          area_design_left:
            type: "integer"
            format: "int64"
            example: 50
          area_design_top:
            type: "integer"
            format: "int64"
            example: 50
          show_bleed:
            type: "boolean"
            example: true
          bleed_top_bottom:
            type: "number"
            format: "float"
            example: 50.50
          bleed_left_right:
            type: "number"
            format: "float"
            example: 50.50
          show_safe_zone:
            type: "boolean"
            example: true
          margin_vertical:
            type: "integer"
            format: "int64"
            example: 50
          margin_horizontal:
            type: "integer"
            format: "int64"
            example: 50
          image:
            $ref: "#/definitions/ImageResponse"
          created_at:
            type: "string"
            example: "2021-1-1 00:00:00"
          updated_at:
            type: "string"
            example: "2021-1-1 00:00:00"
      design_with:
        type: "integer"
        format: "int64"
        example: 50
      design_height:
        type: "integer"
        format: "int64"
        example: 50
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      design_top_pos:
        type: "integer"
        format: "int64"
        example: 50
      design_left_pos:
        type: "integer"
        format: "int64"
        example: 50
      pdf_url:
        type: "string"
      product:
        $ref: "#/definitions/ProductResponse"
      preview_image:
        $ref: "#/definitions/ImageResponse"
      design_image:
        $ref: "#/definitions/ImageResponse"
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart note"
      status:
        type: "string"
        enum:
          - "accepted"
          - "processing"
          - "declined"
          - "trashed"
          - "deleted"
        example: "accepted"
      created_at:
        type: "string"
        example: "2021-1-1 00:00:00"
      updated_at:
        type: "string"
        example: "2021-1-1 00:00:00"
    xml:
      name: "DesignResponse"
  DesignResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignResponseShowDataObject"
  DesignResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignResponseShowDataArray"
  DesignResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "DesignResponseStore"
  DesignResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "DesignResponseUpdate"
  DesignLayer:
    type: "object"
    description: "Lorem ipsum..."
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            layers:
              type: "object"
              properties:
                objects:
                  type: "array"
                  example: ["type", "version", "originX", "originY", "left"]
                version:
                  type: "string"
                  example: "1.0.0"
                centeredScaling:
                  type: "boolean"
                  example: false
                perPixelTargetFind:
                  type: "boolean"
                  example: false
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignLayer"
  Unauthenticated:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Unauthenticated"
        example: "Unauthenticated"
    xml:
      name: "Unauthenticated"
  InvalidInput:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Invalid input"
        example: "Invalid input"
    xml:
      name: "InvalidInput"
  NotFound:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Not found"
        example: "Not found"
    xml:
      name: "NotFound"
  # Forbidden:
  #   type: "object"
  #   properties:
  #     message:
  #       type: "string"
  #       description: "Forbidden"
  #       example: "Forbidden"
  #   xml:
  #     name: "Forbidden"
  Deleted:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Deleted successfully"
        example: "Deleted successfully"
    xml:
      name: "Deleted"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
