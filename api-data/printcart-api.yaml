swagger: "2.0"
info:
  # description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "PrintCart Rest API"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "apiteam@swagger.io"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
basePath: "https://api.printcart.com/v1"
tags:
  - name: "Product"
  - name: "Side"
  - name: "Image"
  - name: "Clipart"
  - name: "Font"
  - name: "Design"
  - name: "Template"
  - name: "Storage"
  - name: "Project"
  - name: "Account"
  - name: "Store"
  - name: "Webhook"
schemes:
  - "https"
paths:
  /account:
    post:
      tags:
        - "Account"
      # summary: "Add a new pet to the store"
      # description: ""
      operationId: "createAccount"
      summary: "Create Account"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Account"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/AccountResponseStore"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
    get:
      tags:
        - "Account"
      operationId: "getAccount"
      summary: "Get Account Info"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/AccountResponseShow"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Account"
      # summary: "Updated Account"
      # description: "This can only be done by the logged in Account."
      operationId: "updateAccount"
      summary: "Update Account Details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/AccountUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/AccountResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
  /stores:
    post:
      tags:
        - "Store"
      operationId: "createStore"
      summary: "Create Store"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description:
          required: true
          schema:
            $ref: "#/definitions/Store"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/StoreResponseCreate"
        "400":
          description: 
            - "Invalid input"
            - "Please upgrade your account..."
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CheckUserTier"
      security:
        - BasicAuth: []
    get:
      tags:
        - "Store"
      operationId: "getStore"
      summary: "Get Store Info"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/StoreResponseShow"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
  /stores/{storeId}:
    get:
      tags:
        - "Store"
      operationId: "getStoreById"
      summary: "Get Store details"
      produces:
        - "application/json"
      parameters:
        - name: "storeId"
          in: "path"
          description: "Store ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/StoreResponseShow"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
    put:
      tags:
        - "Store"
      operationId: "updateStore"
      summary: "Update store details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "storeId"
          in: "path"
          description: "Store ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/StoreUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/StoreResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
    delete:
      tags:
        - "Store"
      # summary:
      # description:
      operationId: "deleteStore"
      summary: "Delete a store"
      produces:
        - "application/json"
      parameters:
        - name: "storeId"
          in: "path"
          description: "Store ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicAuth: []
  /stores/{storeId}/token-revoke:
    put:
      tags:
        - "Store"
      # summary: "Updated Account"
      # description: "This can only be done by the logged in Account."
      operationId: "tokenRevoke"
      summary: "Renew UnAuth Token"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/StoreTokenRevokeResponse"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicAuth: []
  /products:
    post:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "postProduct"
      summary: "Create new product"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProductResponseStore"
        "400":
          description: 
            - "Invalid input"
            - "Please upgrade your account..."
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CheckUserTier"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getProduct"
      summary: "Get a list of products"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataArray"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /products/{productId}:
    get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProductById"
      summary: "Get product details"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataObject"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      put:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "updateProduct"
      summary: "Update product details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/ProductUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProductResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Product"
      # summary:
      # description:
      operationId: "deleteProduct"
      summary: "Delete a product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /products/batch:
    post:
      tags:
        - "Product"
      # description:
      operationId: "postProductsBatch"
      summary: "Create batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatch"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProductBatchResponse"
        "400":
          description: 
            - "Invalid input"
            - "Please upgrade your account..."
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CheckUserTier"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find image with id"
          schema:
            $ref: "#/definitions/ImageError"
        "413":
          description: "Too many products"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Too many products"
                example: "Too many products"
        "500":
          description: "Something went wrong while create products"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create products"
                example: "Something went wrong while create products"
      security:
        - BasicStoreAuth: []
    put:
      tags:
        - "Product"
      # description:
      operationId: "putProductsBatch"
      summary: "Update batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProductBatchUpdateResponse"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description:
            - " Can't find product with id"
            - " Can't find image with id"
          schema:
            anyOf:
              - $ref: "#/definitions/ProductError"
              - $ref: "#/definitions/ImageError"
        "413":
          description: "Too many products"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Too many products"
                example: "Too many products"
        "500":
          description: "Something went wrong while update products"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update products"
                example: "Something went wrong while update products"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Product"
      # description:
      operationId: "deleteProductsBatch"
      summary: "Delete batch products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProductBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find product with id"
          schema:
            $ref: "#/definitions/ProductError"
      security:
        - BasicStoreAuth: []
  /products/{productId}/designs:
    get:
      get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignsByProduct"
      summary: "Get a list of designs by product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /products/{productId}/sides:
    get:
      tags:
        - "Product"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getSidesByProduct"
      summary: "Get a list of sides by product"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /products/{productId}/designs/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesignsByProduct"
      summary: "Get a count of designs by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /products/{productId}/sides/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountSidesByProduct"
      summary: "Get a count of sides by product"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /products/count:
    get:
      tags:
        - "Product"
      # summary: "..."
      # description: "..."
      operationId: "getCountProduct"
      summary: "Get a count of products"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /sides:
    post:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "postSide"
      summary: "Create new product side"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Side"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/SideResponseStore"
        "400":
          description:
            - "Invalid input"
            - "Header Content-Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CreateSideHeaderContentType"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Side"
      # summary: "..."
      # description: "..."
      operationId: "getSide"
      summary: "Get a list of product sides"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /sides/{sideId}:
    get:
      tags:
        - "Side"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getSideById"
      summary: "Get product side details"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "updateSide"
      summary: "Update a product side details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/SideUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/SideResponseUpdate"
        "400":
          description:
            - "Invalid input"
            - "Header Content-Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/UpdateSideHeaderContentType"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "deleteSide"
      summary: "Delete a product side"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /sides/batch:
    post:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "postSidesBatch"
      summary: "Create batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/SideBatch"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/SideBatchResponse"
        "400":
          description:
            - "Invalid input"
            - "Header Content-Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CreateBatchSideHeaderContentType"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description:
            - "Can't find product with id"
            - "Can't find images with id"
          schema:
            anyOf:
              - $ref: "#/definitions/ProductError"
              - $ref: "#/definitions/ImageError"
        "413":
          description: "Too many sides"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Too many sides"
                example: "Too many sides"
        "500":
          description: "Something went wrong while create sides"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create sides"
                example: "Something went wrong while create sides"
      security:
        - BasicStoreAuth: []
    put:
      tags:
        - "Side"
      # summary:
      # description:
      operationId: "putSidesBatch"
      summary: "Update batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/SideBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/SideBatchUpdateResponse"
        "400":
          description:
            - "Invalid input"
            - "Header Content-Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/UpdateBatchSideHeaderContentType"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description:
            - " Can't find side with id"
            - "Can't find product with id"
            - "Can't find images with id"
          schema:
            anyOf:
              - $ref: "#/definitions/SideError"
              - $ref: "#/definitions/ProductError"
              - $ref: "#/definitions/ImageError"
        "413":
          description: "Too many sides"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Too many sides"
                example: "Too many sides"
        "500":
          description: "Something went wrong while update sides"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update sides"
                example: "Something went wrong while update sides"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Side"
      # description:
      operationId: "deleteSidesBatch"
      summary: "Delete batch sides"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/SideBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Header Content-Type"
          schema:
            $ref: "#/definitions/DeleteBatchSideHeaderContentType"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: " Can't find side with id"
          schema:
            $ref: "#/definitions/SideError"
      security:
        - BasicStoreAuth: []
  /sides/{sideId}/templates:
    get:
      tags:
        - "Side"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getTemplateBySide"
      summary: "Get a list of templates by side"
      produces:
        - "application/json"
      parameters:
        - name: "sideId"
          in: "path"
          description: "Side ID"
          required: true
          type: "string"
      responses:
        responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /sides/count:
    get:
      tags:
        - "Side"
      # summary: "..."
      # description: "..."
      operationId: "getCountSide"
      summary: "Get a count of product sides"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/SideCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /fonts:
    post:
      tags:
        - "Font"
      # summary: "Add a new pet to the store"
      # description: ""
      operationId: "addFont"
      summary: "Add new font"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Font"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/FontResponseStore"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Font"
      # summary: "..."
      # description: "..."
      operationId: "getFonts"
      summary: "Get a list of fonts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/FontResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /fonts/{fontId}:
    get:
      tags:
        - "Font"
      operationId: "getFontById"
      summary: "Get font details"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
      responses:
        "200":
          schema:
            $ref: "#/definitions/FontResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Font"
      # summary:
      # description:
      operationId: "updateFont"
      summary: "Update font details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/FontUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/FontResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Font"
      # summary:
      # description:
      operationId: "deleteFont"
      summary: "Delete font"
      produces:
        - "application/json"
      parameters:
        - name: "fontId"
          in: "path"
          description: "Font ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /fonts/count:
    get:
      tags:
        - "Font"
      # summary: "..."
      # description: "..."
      operationId: "getCountFont"
      summary: "Get a count of fonts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/FontCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /images:
    post:
      tags:
        - "Image"
      # summary:
      # description:
      operationId: "uploadFile"
      summary: "Add new image"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "file"
          in: "formData"
          description: "Image to upload"
          required: true
          type: "file"
        - name: "type"
          in: "formData"
          required: false
          type: "string"
          default: null
          enum:
            - "null"
            - "cliparts"
            - "designs"
      responses:
        "201":
          description: "File successfully uploaded"
          schema:
            $ref: "#/definitions/ImageResponseStore"
        "400":
          description: "Please upgrade your account..."
          schema:
            $ref: "#/definitions/CheckUserTier"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "405":
          description: "File upload missing"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "File upload missing"
                example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Unsupported Media Type"
                example: "Unsupported Media Type"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    get:
      tags:
        - "Image"
      # summary: "..."
      # description: "..."
      operationId: "getImage"
      summary: "Get a list of images"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /images/{imageId}:
    get:
      tags:
        - "Image"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getImageById"
      summary: "Get image details"
      produces:
        - "application/json"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Image"
      # summary:
      # description:
      operationId: "deleteImageById"
      summary: "Delete a image"
      produces:
        - "application/json"
      parameters:
        - name: "imageId"
          in: "path"
          description: "Image Id"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /images/batch:
    post:
      post:
      tags:
        - "Image"
      # summary:
      # description:
      operationId: "uploadFiles"
      summary: "Add new batch images"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "files[]"
          in: "formData"
          description: "Image to upload"
          required: true
          type: "file"
        - name: "type"
          in: "formData"
          required: false
          type: "string"
          default: null
          enum:
            - "null"
            - "cliparts"
            - "designs"
      responses:
        "201":
          description: "File successfully uploaded"
          schema:
            $ref: "#/definitions/ImageResponseStoreBatch"
        "400":
          description: "Please upgrade your account..."
          schema:
            $ref: "#/definitions/CheckUserTier"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "405":
          description: "File upload missing"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "File upload missing"
                example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Unsupported Media Type"
                example: "Unsupported Media Type"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /images/count:
    get:
      tags:
        - "Image"
      # summary: "..."
      # description: "..."
      operationId: "getCountImage"
      summary: "Get a count of images"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /cliparts:
    post:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "uploadFileClipart"
      summary: "Add new clipart"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "file"
          in: "formData"
          description: "Clipart to upload"
          required: true
          type: "file"
      responses:
        "201":
          description: "File successfully uploaded"
          schema:
            $ref: "#/definitions/ImageResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "405":
          description: "File upload missing"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "File upload missing"
                example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Unsupported Media Type"
                example: "Unsupported Media Type"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    get:
      tags:
        - "Clipart"
      # summary: "..."
      # description: "..."
      operationId: "getClipart"
      summary: "Get a list of cliparts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /cliparts/{clipartId}:
    get:
      tags:
        - "Clipart"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getClipartById"
      summary: "Get clipart details"
      produces:
        - "application/json"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    delete:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "deleteClipartById"
      summary: "Delete a clipart"
      produces:
        - "application/json"
      parameters:
        - name: "clipartId"
          in: "path"
          description: "Clipart Id"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /clipart/batch:
    post:
      post:
      tags:
        - "Clipart"
      # summary:
      # description:
      operationId: "uploadFilesClipart"
      summary: "Add new batch clipart"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "files[]"
          in: "formData"
          description: "Clipart to upload"
          required: true
          type: "file"
      responses:
        "201":
          description: "File successfully uploaded"
          schema:
            $ref: "#/definitions/ImageResponseStoreBatch"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "405":
          description: "File upload missing"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "File upload missing"
                example: "File upload missing"
        "415":
          description: "Unsupported Media Type"
          type: "object"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Unsupported Media Type"
                example: "Unsupported Media Type"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /clipart-storages/{storageId}/cliparts:
    get:
      tags:
        - "Clipart"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getClipartsByStorage"
      summary: "Get a list of cliparts by storage"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /cliparts/count:
    get:
      tags:
        - "Clipart"
      # summary: "..."
      # description: "..."
      operationId: "getCountClipart"
      summary: "Get a count of cliparts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /designs:
    post:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "postDesign"
      summary: "Create new design"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Design"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/DesignResponseStore"
        "400":
          description:
            - " Please upgrade your account..."
            - " Invalid input"
            - " Invalid design file"
            - " Missing design file"
            - " Can not upload design file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/CheckUserTier"
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MissingDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Missing design file"
        #   schema:
        #     $ref: "#/definitions/MissingDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    get:
      tags:
        - "Design"
      # summary: "..."
      # description: "..."
      operationId: "getDesign"
      summary: "Get a list of designs"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /designs/{designId}:
    get:
      tags:
        - "Design"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignById"
      summary: "Get design details"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "updateDesign"
      summary: "Update design details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/DesignUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/DesignResponseUpdate"
        "400":
          description:
            - "Please upgrade your account..."
            - "Invalid input"
            - " Invalid design file"
            - " Can not upload design file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/CheckUserTier"
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      # summary:
      # description:
      operationId: "deleteDesign"
      summary: "Delete a design"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /designs/batch:
    post:
      tags:
        - "Design"
      # description:
      operationId: "postDesignsBatch"
      summary: "Create batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatch"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/DesignBatchResponse"
        "400":
          description:
            - "Please upgrade your account..."
            - "Invalid input"
            - " Invalid design file"
            - " Missing design file"
            - " Can not upload design file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/CheckUserTier"
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MissingDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Missing design file"
        #   schema:
        #     $ref: "#/definitions/MissingDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "413":
          description: "Too many designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many designs"
                example: "Too many designs"
        "500":
          description: "Something went wrong while create designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create designs"
                example: "Something went wrong while create designs"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Design"
      # description:
      operationId: "putDesignsBatch"
      summary: "Update batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/DesignBatchUpdateResponse"
        "400":
          description:
            - "Please upgrade your account..."
            - "Invalid input"
            - " Invalid design file"
            - " Can not upload design file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/CheckUserTier"
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description:
            - "Not found"
            - " Can't find design with id"
          schema:
            anyOf:
              - $ref: "#/definitions/NotFound"
              - $ref: "#/definitions/DesignError"
        "413":
          description: "Too many designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many designs"
                example: "Too many designs"
        "500":
          description: "Something went wrong while update designs"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update designs"
                example: "Something went wrong while update designs"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    delete:
      tags:
        - "Design"
      # description:
      operationId: "deleteDesignsBatch"
      summary: "Delete batch designs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/DesignBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find design with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find design with id"
                example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      security:
        - BasicStoreAuth: []
  /designs/{designId}/fonts:
    get:
      tags:
        - "Design"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getFontsInLayersDesignById"
      summary: "Get list fonts layer by design"
      produces:
        - "application/json"
      parameters:
        - name: "designId"
          in: "path"
          description: "Design ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignFont"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /designs/images:
    get:
      tags:
        - "Design"
      # summary: "..."
      # description: "..."
      operationId: "getDesignImage"
      summary: "Get a list images by design"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ImageResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /designs/count:
    get:
      tags:
        - "Design"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesign"
      summary: "Get a count of designs"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /templates:
    post:
      tags:
        - "Template"
      # summary:
      # description:
      operationId: "postTemplate"
      summary: "Create new template"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Template"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/TemplateResponseStore"
        "400":
          description:
            - "Invalid input"
            - " Invalid template file"
            - " Missing template file"
            - " Can not upload template file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MissingDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Missing design file"
        #   schema:
        #     $ref: "#/definitions/MissingDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    get:
      tags:
        - "Template"
      # summary: "..."
      # description: "..."
      operationId: "getTemplate"
      summary: "Get a list of templates"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/TemplateResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /templates/{templateId}:
    get:
      tags:
        - "Template"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getTemplateById"
      summary: "Get template details"
      produces:
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/TemplateResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Template"
      # summary:
      # description:
      operationId: "updateTemplate"
      summary: "Update template details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/TemplateUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/TemplateResponseUpdate"
        "400":
          description:
            - "Invalid input"
            - " Invalid template file"
            - " Can not upload template file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template"
      # summary:
      # description:
      operationId: "deleteTemplate"
      summary: "Delete a template"
      produces:
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /templates/batch:
    post:
      tags:
        - "Template"
      # description:
      operationId: "postTemplatesBatch"
      summary: "Create batch templates"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/TemplateBatch"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/TemplateBatchResponse"
        "400":
          description:
            - "Invalid input"
            - " Invalid template file"
            - " Missing template file"
            - " Can not upload template file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MissingDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Missing design file"
        #   schema:
        #     $ref: "#/definitions/MissingDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "413":
          description: "Too many templates"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many templates"
                example: "Too many templates"
        "500":
          description: "Something went wrong while create templates"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create templates"
                example: "Something went wrong while create templates"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Template"
      # description:
      operationId: "putTemplatesBatch"
      summary: "Update batch templates"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/TemplateBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/TemplateBatchUpdateResponse"
        "400":
          description:
            - "Invalid input"
            - " Invalid template file"
            - " Can not upload template file with your Content Type"
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/InvalidDesignFile"
              - $ref: "#/definitions/MultipartFormData"
        # "400":
        #   description: "Invalid design file"
        #   schema:
        #     $ref: "#/definitions/InvalidDesignFile"
        # "400":
        #   description: "Can not upload design file with your Content Type"
        #   schema:
        #     $ref: "#/definitions/MultipartFormData"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description:
            - "Not found"
            - " Can't find template with id"
          schema:
            anyOf:
              - $ref: "#/definitions/NotFound"
              - $ref: "#/definitions/DesignError"
        "413":
          description: "Too many templates"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many templates"
                example: "Too many templates"
        "500":
          description: "Something went wrong while update templates"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update templates"
                example: "Something went wrong while update templates"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    delete:
      tags:
        - "Template"
      # description:
      operationId: "deleteTemplatesBatch"
      summary: "Delete batch templates"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/TemplateBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Can't find template with id"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Can't find template with id"
                example: "Can't find template with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      security:
        - BasicStoreAuth: []
  /templates/{templateId}/fonts:
    get:
      tags:
        - "Template"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getFontsInLayersTemplateById"
      summary: "Get list fonts layer by template"
      produces:
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "Template ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignFont"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /templates/count:
    get:
      tags:
        - "Template"
      # summary: "..."
      # description: "..."
      operationId: "getCountTemplate"
      summary: "Get a count of templates"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /storages:
    post:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "postCategory"
      summary: "Create new storage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/CategoryResponseStore"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "getCategory"
      summary: "Get a list of storages"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /storages/{storageId}:
    get:
      tags:
        - "Storage"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getCategoryById"
      summary: "Get Storage details"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "updateCategory"
      summary: "Update Storage details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/CategoryUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/CategoryResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Storage"
      # summary:
      # description:
      operationId: "deleteCategory"
      summary: "Delete a Storage"
      produces:
        - "application/json"
      parameters:
        - name: "storageId"
          in: "path"
          description: "Storage ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /clipart-storages:
    post:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "postClipartStorage"
      summary: "Create new Clipart - Storage"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/ImageClipartStorage"
      responses:
        "201":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseStore"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "getStorageByClipart"
      summary: "Get a list of storages by clipart"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        "413":
          description: "Too many cliparts"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many cliparts"
                example: "Too many cliparts"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
  /storages/count:
    get:
      tags:
        - "Storage"
      # summary: "..."
      # description: "..."
      operationId: "getCountCategory"
      summary: "Get a count of Storages"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/CategoryCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /projects:
    post:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "postProject"
      summary: "Create new project"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProjectResponseStore"
        "400":
          description: 
            - "Invalid input"
            - "Please upgrade your account..."
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CheckUserTier"
        # "400":
        #   description: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
        #   type: "object"
        #   schema:
        #     type: "object"
        #     properties:
        #       error:
        #         type: "string"
        #         description: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
        #         example: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        # "404":
        #   description: "Can't find design with id"
        #   type: "object"
        #   schema:
        #     type: "object"
        #     properties:
        #       error:
        #         type: "string"
        #         description: "Can't find design with id"
        #         example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getProject"
      summary: "Get a list of projects"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /projects/{projectId}:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProjectById"
      summary: "Get project details"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    put:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "updateProject"
      summary: "Update project details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/ProjectUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProjectResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Project"
      # summary:
      # description:
      operationId: "deleteProject"
      summary: "Delete a project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /projects/batch:
    post:
      tags:
        - "Project"
      # description:
      operationId: "postProjectsBatch"
      summary: "Create batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatch"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/ProjectBatchResponse"
        "400":
          description: 
            - "Invalid input"
            - "Please upgrade your account..."
          schema:
            anyOf:
              - $ref: "#/definitions/InvalidInput"
              - $ref: "#/definitions/CheckUserTier"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "413":
          description: "Too many projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many projects"
                example: "Too many projects"
        "500":
          description: "Something went wrong while create projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while create projects"
                example: "Something went wrong while create projects"
      security:
        - BasicStoreAuth: []
        - UnAuthToken: []
    put:
      tags:
        - "Project"
      # description:
      operationId: "putProjectsBatch"
      summary: "Update batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatchUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/ProjectBatchUpdateResponse"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: " Can't find project with id"
          schema:
            $ref: "#/definitions/ProjectError"
        "413":
          description: "Too many projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Too many projects"
                example: "Too many projects"
        "500":
          description: "Something went wrong while update projects"
          type: "object"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Something went wrong while update projects"
                example: "Something went wrong while update projects"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Project"
      # description:
      operationId: "deleteProjectsBatch"
      summary: "Delete batch projects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description:
          required: true
          schema:
            $ref: "#/definitions/ProjectBatchDelete"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: " Can't find project with id"
          schema:
            $ref: "#/definitions/ProjectError"
      security:
        - BasicStoreAuth: []
  /projects/{projectId}/designs:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getDesignsByProject"
      summary: "Get a list of designs by project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /projects/{projectId}/products:
    get:
      tags:
        - "Project"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getProductsByProject"
      summary: "Get a list of products by project"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /projects/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountProject"
      summary: "Get a count of projects"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProjectCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /projects/{projectId}/designs/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountDesignsByProject"
      summary: "Get a count of designs by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/DesignCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /projects/{projectId}/products/count:
    get:
      tags:
        - "Project"
      # summary: "..."
      # description: "..."
      operationId: "getCountProductsByProject"
      summary: "Get a count of products by project"
      parameters:
        - name: "projectId"
          in: "path"
          description: "Project ID"
          required: true
          type: "string"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/ProductCount"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
  /webhooks:
    post:
      tags:
        - "Webhook"
      # summary:
      # description:
      operationId: "postWebhook"
      summary: "Create new webhook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Webhook"
      responses:
        "201":
          description: "Created successfully"
          schema:
            $ref: "#/definitions/WebhookResponseStore"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
      security:
        - BasicStoreAuth: []
    get:
      tags:
        - "Webhook"
      # summary: "..."
      # description: "..."
      operationId: "getWebhook"
      summary: "Get a list of webhooks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/WebhookResponseShowDataArray"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
  /webhooks/{webhookId}:
    get:
      tags:
        - "Webhook"
      # summary: "Find pet by ID"
      # description: "Returns a single pet"
      operationId: "getWebhookById"
      summary: "Get webhook details"
      produces:
        - "application/json"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Retrieved successfully"
          schema:
            $ref: "#/definitions/WebhookResponseShowDataObject"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    put:
      tags:
        - "Webhook"
      # summary:
      # description:
      operationId: "updateWebhook"
      summary: "Update webhook details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          # description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/WebhookUpdate"
      responses:
        "200":
          description: "Updated successfully"
          schema:
            $ref: "#/definitions/WebhookResponseUpdate"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/InvalidInput"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
    delete:
      tags:
        - "Webhook"
      # summary:
      # description:
      operationId: "deleteWebhook"
      summary: "Delete a webhook"
      produces:
        - "application/json"
      parameters:
        - name: "webhookId"
          in: "path"
          description: "Webhook ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Deleted successfully"
          schema:
            $ref: "#/definitions/Deleted"
        "401":
          description: "Unauthenticated"
          schema:
            $ref: "#/definitions/Unauthenticated"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
      security:
        - BasicStoreAuth: []
securityDefinitions:
  BasicAuth:
    type: "basic"
  BasicStoreAuth:
    type: "basic"
  UnAuthToken:
    type: "apiKey"
    name: "X-PrintCart-Unauth-Token"
    in: "header"
definitions:
  Account:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      name:
        type: "string"
        description: Customer name.
        example: "printcart"
      email:
        type: "string"
        format: "email"
        description: The email address for the customer.
        example: "printcart@gamil.com"
      password:
        type: "string"
        description: Customer password.
        example: "printcart"
      tier:
        type: "string"
        default: "free"
        enum:
          - "free"
          - "premium"
          - "enterprise"
    xml:
      name: "Account"
  AccountUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: Customer name.
        example: "printcart"
      email:
        type: "string"
        format: "email"
        description: The email address for the customer.
        example: "printcart@gamil.com"
      password:
        type: "string"
        description: Customer password.
        example: "printcart"
    xml:
      name: "AccountUpdate"
  AccountResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "19f99961-edac-455e-b407-aa6aa80ec862"
      name:
        type: "string"
        example: "printcart"
      email:
        type: "string"
        format: "email"
        example: "printcart@gmail.com"
      email_verified_at:
        type: "string"
        example: null
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "AccountResponse"
  AccountResponseShow:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/AccountResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "AccountResponseShow"
  AccountResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/AccountResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "AccountResponseStore"
  AccountResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/AccountResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "AccountResponseUpdate"
  Store:
    type: "object"
    properties:
      shop_url:
        type: "string"
      integration:
        type: "string"
      integration_details:
        type: "json"
      google_font_api:
        type: "string"
        example: "AIzaSyBtoM...L3iAPUPrpQ"
    xml:
      name: "Store"
  StoreUpdate:
    type: "object"
    properties:
      shop_url:
        type: "string"
      integration:
        type: "string"
      integration_details:
        type: "json"
      google_font_api:
        type: "string"
        example: "AIzaSyBtoM...L3iAPUPrpQ"
    xml:
      name: "StoreUpdate"
  StoreResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "a2ba0785-7f53-3eea-a020-bac895d357d6"
      name:
        type: "string"
        example: "printcart store"
      sid:
        type: "string"
        example: "pcsia_b9a7d6fa332b74bdd073cabbac0e6ee539ed3b361aca0c2f7b9bbfe683430cce"
      secret:
        type: "string"
        example: "pcsup_02be5f225e8ddb1ff1569cf4bac0c9346c60928394902ab2f193fcd5bfc2657d"
      unauth_token:
        type: "string"
        example: "b20dd13e142d5202aeda6c7365cef5420a82bbf6ad4dc3d16c05711af3a22184"
      google_font_api:
        type: "string"
        example: "AIzaSyBtoM...L3iAPUPrpQ"
      shop_url:
        type: "string"
      integration_type:
        type: "string"
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "StoreResponse"
  StoreResponseShow:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/StoreResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "StoreResponseShow"
  StoreResponseCreate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/StoreResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "StoreResponseCreate"
  StoreResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/StoreResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "StoreResponseUpdate"
  StoreTokenRevokeResponse:
    type: "object"
    properties:
      unauth_token:
        type: "string"
        example: "22d23e41e296c45b0c6c9cd722398b90a3cc906301bdebfaac4751cf2dowmar3"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "StoreTokenRevokeResponse"
  Product:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
        description: The name given to a product
        example: "printcart"
      dynamic_side:
        type: "boolean"
        example: true
      viewport_width:
        type: "float"
        format: "float"
        example: 50.5
      viewport_height:
        type: "float"
        format: "float"
        example: 50.5
      scale:
        type: "float"
        format: "float"
        example: 50.5
      dpi:
        type: "integer"
        format: "int64"
        default: 72
        example: 100
      dimension_unit:
        type: "string"
        default: "cm"
        enum:
          - "inch"
          - "cm"
        example: "inch"
      status:
        type: "string"
        default: "publish"
        enum:
          - "publish"
          - "draft"
          - "trashed"
          - "deleted"
        description: Product status
        example: "publish"
      allowed_file_types:
        type: "array"
        items:
          type: "string"
          enum:
            - "jpg"
            - "png"
            - "ai"
            - "ps"
            - "pdf"
            - "bmp"
            - "iddd"
        example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
      max_file_upload:
        type: "integer"
        format: "int64"
        example: 500
      min_jpg_dpi:
        type: "integer"
        format: "int64"
        example: 500
      enable_design:
        type: "boolean"
        example: false
      product_image_id:
        type: "string"
        description: Image ID.
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      integration_product_id:
        type: "string"
    xml:
      name: "Product"
  ProductUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: Updated name of the product
        example: "printcart"
      dynamic_side:
        type: "boolean"
        example: true
      viewport_width:
        type: "float"
        format: "float"
        example: 50.5
      viewport_height:
        type: "float"
        format: "float"
        example: 50.5
      scale:
        type: "float"
        format: "float"
        example: 50.5
      dpi:
        type: "integer"
        format: "int64"
        example: 100
      dimension_unit:
        type: "string"
        enum:
          - "inch"
          - "cm"
        example: "inch"
      status:
        type: "string"
        enum:
          - "publish"
          - "draft"
          - "trashed"
          - "deleted"
        description: Product status
        example: "publish"
      allowed_file_types:
        type: "array"
        items:
          type: "string"
          enum:
            - "jpg"
            - "png"
            - "ai"
            - "ps"
            - "pdf"
            - "bmp"
            - "iddd"
        example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
      max_file_upload:
        type: "integer"
        format: "int64"
        example: 500
      min_jpg_dpi:
        type: "integer"
        format: "int64"
        example: 500
      enable_design:
        type: "boolean"
        example: false
      product_image_id:
        type: "string"
        description: Image ID.
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "ProductUpdate"
  ProductBatch:
    type: "object"
    required:
      - "name"
    properties:
      products:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Product"
    xml:
      name: "ProductBatch"
  ProductBatchUpdate:
    type: "object"
    properties:
      products:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Product ID.
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              description: Updated name of the product
              example: "printcart"
            dynamic_side:
              type: "boolean"
              example: true
            viewport_width:
              type: "float"
              format: "float"
              example: 50.5
            viewport_height:
              type: "float"
              format: "float"
              example: 50.5
            scale:
              type: "float"
              format: "float"
              example: 50.5
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
            status:
              type: "string"
              enum:
                - "publish"
                - "draft"
                - "trashed"
                - "deleted"
              description: Product status
              example: "publish"
            allowed_file_types:
              type: "array"
              items:
                type: "string"
                enum:
                  - "jpg"
                  - "png"
                  - "ai"
                  - "ps"
                  - "pdf"
                  - "bmp"
                  - "iddd"
              example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
            max_file_upload:
              type: "integer"
              format: "int64"
              example: 500
            min_jpg_dpi:
              type: "integer"
              format: "int64"
              example: 500
            enable_design:
              type: "boolean"
              example: false
            product_image_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
    xml:
      name: "ProductBatchUpdate"
  ProductBatchDelete:
    type: "object"
    properties:
      products:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Product ID
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
    xml:
      name: "ProductBatchDelete"
  ProductResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "962af342-a2c9-4665-bb5d-cb208258d958"
      name:
        type: "string"
        example: "printcart"
      dynamic_side:
        type: "boolean"
        example: 500
      viewport_width:
        type: "integer"
        format: "int64"
        example: 500
      viewport_height:
        type: "integer"
        format: "int64"
        example: 500
      scale:
        type: "integer"
        format: "int64"
        example: 500
      dpi:
        type: "integer"
        format: "int64"
        example: 500
      dimension_unit:
        type: "string"
        enum:
          - "inch"
          - "cm"
        example: "inch"
      status:
        type: "string"
        enum:
          - "publish"
          - "draft"
          - "trashed"
          - "deleted"
        example: "publish"
      allowed_file_types:
        type: "array"
        items:
          type: "string"
          enum:
            - "jpg"
            - "png"
            - "ai"
            - "ps"
            - "pdf"
            - "bmp"
            - "iddd"
        example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
      max_file_upload:
        type: "integer"
        format: "int64"
        example: 500
      min_jpg_dpi:
        type: "integer"
        format: "int64"
        example: 500
      enable_design:
        type: "boolean"
        example: false
      product_image:
        $ref: "#/definitions/ImageResponse"
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "ProductResponse"
  ProductResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductResponseShowDataObject"
  ProductResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductResponseShowDataArray"
  ProductResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProductResponseStore"
  ProductResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProductResponseUpdate"
  ProductBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProductResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProductBatchResponse"
  ProductBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              example: "printcart"
            dynamic_side:
              type: "boolean"
              example: true
            viewport_width:
              type: "float"
              format: "float"
              example: 50.5
            viewport_height:
              type: "float"
              format: "float"
              example: 50.5
            scale:
              type: "float"
              format: "float"
              example: 50.5
            dpi:
              type: "integer"
              format: "int64"
              example: 500
            dimension_unit:
              type: "string"
              enum:
                - "inch"
                - "cm"
              example: "inch"
            status:
              type: "string"
              enum:
                - "publish"
                - "draft"
                - "trashed"
                - "deleted"
              example: "publish"
            allowed_file_types:
              type: "array"
              items:
                type: "string"
                enum:
                  - "jpg"
                  - "png"
                  - "ai"
                  - "ps"
                  - "pdf"
                  - "bmp"
                  - "iddd"
              example: ["jpg", "png", "ai", "ps", "pdf", "bmp", "iddd"]
            max_file_upload:
              type: "integer"
              format: "int64"
              example: 500
            min_jpg_dpi:
              type: "integer"
              format: "int64"
              example: 500
            enable_design:
              type: "boolean"
              example: false
            product_image:
              $ref: "#/definitions/ImageResponse"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProductBatchUpdateResponse"
  ProductCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProductCount"
  Side:
    type: "object"
    required:
      - "product_id"
      - "name"
    properties:
      product_id:
        type: "string"
        description: Product ID
        example: "962af342-a2c9-4665-bb5d-cb208258d958"
      name:
        type: "string"
        description: The name given to a side
        example: "printcart"
      bg_type:
        type: "string"
        default: "image"
        enum:
          - "color"
          - "image"
          - "transparent"
        example: "image"
      bg_color_value:
        type: "string"
        example: "red"
      img_top_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_left_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_bottom_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_right_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_overlay:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      version:
        type: "string"
        example: "version 1.0.0"
      ratio:
        type: "number"
        format: "double"
        example: 100
      background_included:
        type: "boolean"
        example: true
      show_overlay:
        type: "boolean"
        example: true
      include_overlay:
        type: "boolean"
        example: true
      product_size:
        type: "object"
        properties:
          product_input:
            type: "number"
            format: "double"
            example: 100
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
      design_size:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
      design_position:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
      show_bleed:
        type: "boolean"
        example: true
      bleed_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          left_right:
            type: "float"
            format: "float"
            example: 50.50
      show_safe_zone:
        type: "boolean"
        example: true
      margin_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50
          left_right:
            type: "float"
            format: "float"
            example: 50
      bg_img_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      background_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
      bleed_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      margin_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      measure_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      ratio_image:
        type: "number"
        format: "double"
        example: 100
    xml:
      name: "Side"
  SideUpdate:
    type: "object"
    properties:
      product_id:
        type: "string"
        description: Product ID
        example: "962af342-a2c9-4665-bb5d-cb208258d958"
      name:
        type: "string"
        description: Updated name of the side
        example: "printcart"
      bg_type:
        type: "string"
        enum:
          - "color"
          - "image"
          - "transparent"
        example: "image"
      bg_color_value:
        type: "string"
        example: "red"
      img_top_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_left_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_bottom_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_right_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_overlay:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      version:
        type: "string"
        example: "version 1.0.0"
      ratio:
        type: "number"
        format: "double"
        example: 100
      background_included:
        type: "boolean"
        example: true
      show_overlay:
        type: "boolean"
        example: true
      include_overlay:
        type: "boolean"
        example: true
      product_size:
        type: "object"
        properties:
          product_input:
            type: "number"
            format: "double"
            example: 100
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
      design_size:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
      design_position:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
      show_bleed:
        type: "boolean"
        example: true
      bleed_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          left_right:
            type: "float"
            format: "float"
            example: 50.50
      show_safe_zone:
        type: "boolean"
        example: true
      margin_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50
          left_right:
            type: "float"
            format: "float"
            example: 50
      bg_img_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      background_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
      bleed_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      margin_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      measure_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      ratio_image:
        type: "number"
        format: "double"
        example: 100
    xml:
      name: "SideUpdate"
  SideCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideCount"
  SideBatch:
    type: "object"
    required:
      - "name"
    properties:
      sides:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Side"
    xml:
      name: "SideBatch"
  SideBatchUpdate:
    type: "object"
    required:
      - "product_id"
      - "name"
    properties:
      sides:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Side ID
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product_id:
              type: "string"
              description: Product ID
              example: "962af342-a2c9-4665-bb5d-cb208258d958"
            name:
              type: "string"
              description: Updated name of the side
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_overlay:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "number"
              format: "double"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_size:
              type: "object"
              properties:
                product_input:
                  type: "number"
                  format: "double"
                  example: 100
                product_width:
                  type: "float"
                  format: "float"
                  example: 50
                product_height:
                  type: "float"
                  format: "float"
                  example: 50
            design_size:
              type: "object"
              properties:
                width:
                  type: "float"
                  format: "float"
                  example: 50
                height:
                  type: "float"
                  format: "float"
                  example: 50
                top:
                  type: "float"
                  format: "float"
                  example: 50
                left:
                  type: "float"
                  format: "float"
                  example: 50
            design_position:
              type: "object"
              properties:
                width:
                  type: "float"
                  format: "float"
                  example: 50
                height:
                  type: "float"
                  format: "float"
                  example: 50
                left:
                  type: "float"
                  format: "float"
                  example: 50
                top:
                  type: "float"
                  format: "float"
                  example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_size:
              type: "object"
              properties:
                top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_size:
              type: "object"
              properties:
                top_bottom:
                  type: "float"
                  format: "float"
                  example: 50
                left_right:
                  type: "float"
                  format: "float"
                  example: 50
            bg_img_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            background_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
            bleed_position:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            margin_position:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            measure_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            ratio_image:
              type: "number"
              format: "double"
              example: 100
    xml:
      name: "SideBatchUpdate"
  SideBatchDelete:
    type: "object"
    properties:
      sides:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Side ID
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
    xml:
      name: "SideBatchDelete"
  SideResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      product:
        $ref: "#/definitions/ProductResponse"
      name:
        type: "string"
        example: "printcart"
      bg_type:
        type: "string"
        enum:
          - "color"
          - "image"
          - "transparent"
        example: "image"
      bg_color_value:
        type: "string"
        example: "red"
      img_top_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_left_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_bottom_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_right_pos:
        type: "float"
        format: "float"
        example: 50.5
      img_overlay:
        $ref: "#/definitions/ImageResponse"
      version:
        type: "string"
        example: "version 1.0.0"
      ratio:
        type: "number"
        format: "double"
        example: 100
      background_included:
        type: "boolean"
        example: true
      show_overlay:
        type: "boolean"
        example: true
      include_overlay:
        type: "boolean"
        example: true
      product_size:
        type: "object"
        properties:
          input:
            type: "number"
            format: "double"
            example: 100
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
      design_size:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
      design_position:
        type: "object"
        properties:
          width:
            type: "float"
            format: "float"
            example: 50
          height:
            type: "float"
            format: "float"
            example: 50
          left:
            type: "float"
            format: "float"
            example: 50
          top:
            type: "float"
            format: "float"
            example: 50
      show_bleed:
        type: "boolean"
        example: true
      bleed_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          left_right:
            type: "float"
            format: "float"
            example: 50.50
      show_safe_zone:
        type: "boolean"
        example: true
      margin_size:
        type: "object"
        properties:
          top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          left_right:
            type: "float"
            format: "float"
            example: 50.50
      background_img:
        $ref: "#/definitions/ImageResponse"
      background_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
      bleed_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      margin_position:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      measure_size:
        type: "object"
        properties:
          width:
            type: "number"
            format: "double"
            example: 100
          height:
            type: "number"
            format: "double"
            example: 100
          top:
            type: "number"
            format: "double"
            example: 100
          left:
            type: "number"
            format: "double"
            example: 100
      ratio_image:
        type: "number"
        format: "double"
        example: 100
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "SideResponse"
  SideResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideResponseShowDataObject"
  SideResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "SideResponseShowDataArray"
  SideResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "SideResponseStore"
  SideResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "SideResponseUpdate"
  SideBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/SideResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "SideBatchResponse"
  SideBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            product:
              $ref: "#/definitions/ProductResponse"
            name:
              type: "string"
              example: "printcart"
            bg_type:
              type: "string"
              enum:
                - "color"
                - "image"
                - "transparent"
              example: "image"
            bg_color_value:
              type: "string"
              example: "red"
            img_top_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_left_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_bottom_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_right_pos:
              type: "float"
              format: "float"
              example: 50.5
            img_overlay:
              $ref: "#/definitions/ImageResponse"
            version:
              type: "string"
              example: "version 1.0.0"
            ratio:
              type: "number"
              format: "double"
              example: 100
            background_included:
              type: "boolean"
              example: true
            show_overlay:
              type: "boolean"
              example: true
            include_overlay:
              type: "boolean"
              example: true
            product_size:
              type: "object"
              properties:
                input:
                  type: "number"
                  format: "double"
                  example: 100
                width:
                  type: "float"
                  format: "float"
                  example: 50
                height:
                  type: "float"
                  format: "float"
                  example: 50
            design_size:
              type: "object"
              properties:
                width:
                  type: "float"
                  format: "float"
                  example: 50
                height:
                  type: "float"
                  format: "float"
                  example: 50
                top:
                  type: "float"
                  format: "float"
                  example: 50
                left:
                  type: "float"
                  format: "float"
                  example: 50
            design_position:
              type: "object"
              properties:
                width:
                  type: "float"
                  format: "float"
                  example: 50
                height:
                  type: "float"
                  format: "float"
                  example: 50
                left:
                  type: "float"
                  format: "float"
                  example: 50
                top:
                  type: "float"
                  format: "float"
                  example: 50
            show_bleed:
              type: "boolean"
              example: true
            bleed_size:
              type: "object"
              properties:
                top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
            show_safe_zone:
              type: "boolean"
              example: true
            margin_size:
              type: "object"
              properties:
                top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
            background_img:
              $ref: "#/definitions/ImageResponse"
            background_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
            bleed_position:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            margin_position:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            measure_size:
              type: "object"
              properties:
                width:
                  type: "number"
                  format: "double"
                  example: 100
                height:
                  type: "number"
                  format: "double"
                  example: 100
                top:
                  type: "number"
                  format: "double"
                  example: 100
                left:
                  type: "number"
                  format: "double"
                  example: 100
            ratio_image:
              type: "number"
              format: "double"
              example: 100
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "SideBatchUpdateResponse"
  Font:
    type: "object"
    required:
      - "name"
      - "alias"
      - "url"
      - "type"
      - "subset"
    properties:
      name:
        type: "string"
        description: The name given to a font
        example: "printcart"
      alias:
        type: "string"
        example: "printcart"
      url:
        type: "string"
        format: "url"
        example: "https//:printcart.com/printcart"
      type:
        type: "string"
        example: "printcart"
      subset:
        type: "string"
        example: "printcart"
    xml:
      name: "Font"
  FontUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: Updated name of the font
        example: "printcart"
      alias:
        type: "string"
        example: "printcart"
      url:
        type: "string"
        format: "url"
        example: "https//:printcart.com/printcart"
      type:
        type: "string"
        example: "printcart"
      subset:
        type: "string"
        example: "printcart"
    xml:
      name: "FontUpdate"
  FontResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "bff22494-79c3-312b-ba7e-6d6f6d57401c"
      name:
        type: "string"
        example: "printcart"
      alias:
        type: "string"
        example: "printcart"
      url:
        type: "string"
        example: "https//:printcart.com/printcart"
      type:
        type: "string"
        example: "printcart"
      subset:
        type: "string"
        example: "printcart"
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "FontResponse"
  FontResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontResponseShowDataObject"
  FontResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontResponseShowDataArray"
  FontResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "FontResponseStore"
  FontResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Update successfully"
        example: "Update successfully"
    xml:
      name: "FontResponseUpdate"
  FontCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "FontCount"
  ImageClipartStorage:
    type: "object"
    required:
      - "category_id"
      - "clipart_id"
    properties:
      category_id:
        type: "string"
        description: Storage ID
        example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
      clipart_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978fxxxxxx"
    xml:
      name: "ImageClipartStorage"
  ImageResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      name:
        type: "string"
        example: "printcart"
      size:
        type: "integer"
        format: "int64"
        example: 20000
      url:
        type: "string"
        example: "https://local-printcart-src-media.s3.us-east-2.amazonaws.com/images/19f99961-edac-455e-b407-aa6aa80ec862/0V34SX2YcE31B3zZ0xcm5dFbN1fGUdZc9GRIlxvP.jpg"
      alt:
        type: "string"
        example: "printcart"
      width:
        type: "integer"
        format: "int64"
        example: 500
      height:
        type: "integer"
        format: "int64"
        example: 500
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "ImageResponse"
  ImageResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageResponseShowDataObject"
  ImageResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageResponseShowDataArray"
  ImageResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ImageResponseStore"
  ImageResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Update successfully"
        example: "Update successfully"
    xml:
      name: "ImageResponseUpdate"
  ImageResponseStoreBatch:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ImageResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ImageResponseStoreBatch"
  ImageCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ImageCount"
  Design:
    type: "object"
    required:
      - "side_id"
    properties:
      project_id:
        type: "string"
        description: Project ID
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      side_id:
        type: "string"
        description: Side ID
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
        description: "Lorem ipsum..."
      preview_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_file:
        type: "file"
        description: Image file
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart"
      is_template:
        type: "boolean"
        default: false
        example: false
      layers:
        type: "json"
        description: "Lorem ipsum..."
        example:
          [
            {
              "top": 183.5025,
              "left": 195.79,
              "text": "Blackbird",
              "width": 68.33984375,
              "height": 22.6,
              "originX": "left",
              "originY": "top",
              "fontSize": 20,
              "fontStyle": "normal",
              "textAlign": "left",
              "fontFamily": "Yellowtail",
              "fontWeight": "normal",
            },
          ]
      status:
        type: "string"
        default: "processing"
        enum:
          - "accepted"
          - "processing"
          - "declined"
          - "trashed"
          - "deleted"
        description: Design status
        example: "accepted"
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
    xml:
      name: "Design"
  DesignUpdate:
    type: "object"
    properties:
      project_id:
        type: "string"
        description: Project ID
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      side_id:
        type: "string"
        description: Side ID
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
        description: Lorem ipsum...
      preview_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_file:
        type: "file"
        description: Image file
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart"
      layers:
        type: "json"
        description: "Lorem ipsum..."
        example:
          [
            {
              "top": 183.5025,
              "left": 195.79,
              "text": "Blackbird",
              "width": 68.33984375,
              "height": 22.6,
              "originX": "left",
              "originY": "top",
              "fontSize": 20,
              "fontStyle": "normal",
              "textAlign": "left",
              "fontFamily": "Yellowtail",
              "fontWeight": "normal",
            },
          ]
      status:
        type: "string"
        enum:
          - "accepted"
          - "processing"
          - "declined"
          - "trashed"
          - "deleted"
        description: Design status
        example: "accepted"
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
    xml:
      name: "DesignUpdate"
  DesignBatch:
    type: "object"
    required:
      - "side_id"
    properties:
      designs:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Design"
    xml:
      name: "DesignBatch"
  DesignBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "DesignBatchResponse"
  DesignBatchUpdate:
    type: "object"
    properties:
      designs:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Design ID
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project_id:
              type: "string"
              description: Project ID
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            side_id:
              type: "string"
              description: Side ID
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            pdf_url:
              type: "string"
              description: Lorem ipsum...
            preview_image_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            design_image_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            design_file:
              type: "file"
              description: Image file
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart"
            layers:
              type: "application/json"
              description: "Lorem ipsum..."
              example:
                [
                  {
                    "top": 183.5025,
                    "left": 195.79,
                    "text": "Blackbird",
                    "width": 68.33984375,
                    "height": 22.6,
                    "originX": "left",
                    "originY": "top",
                    "fontSize": 20,
                    "fontStyle": "normal",
                    "textAlign": "left",
                    "fontFamily": "Yellowtail",
                    "fontWeight": "normal",
                  },
                ]
            status:
              type: "string"
              enum:
                - "accepted"
                - "processing"
                - "declined"
                - "trashed"
                - "deleted"
              description: Design status
              example: "accepted"
            viewport_width:
              type: "number"
              format: "float"
              example: 50.50
            viewport_height:
              type: "number"
              format: "float"
              example: 50.50
    xml:
      name: "DesignBatchUpdate"
  DesignBatchDelete:
    type: "object"
    properties:
      designs:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Design ID
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
    xml:
      name: "DesignBatchDelete"
  DesignBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project:
              $ref: "#/definitions/ProjectResponse"
            side:
              type: "object"
              properties:
                id:
                  type: "string"
                  example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                product:
                  $ref: "#/definitions/ProductResponse"
                name:
                  type: "string"
                  example: "printcart"
                bg_type:
                  type: "string"
                  enum:
                    - "color"
                    - "image"
                    - "transparent"
                  example: "image"
                bg_color_value:
                  type: "string"
                  example: "red"
                img_top_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_left_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_bottom_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_right_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_overlay:
                  $ref: "#/definitions/ImageResponse"
                version:
                  type: "string"
                  example: "version 1.0.0"
                ratio:
                  type: "integer"
                  format: "int64"
                  example: 100
                background_included:
                  type: "boolean"
                  example: true
                show_overlay:
                  type: "boolean"
                  example: true
                include_overlay:
                  type: "boolean"
                  example: true
                product_width:
                  type: "float"
                  format: "float"
                  example: 50
                product_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_width:
                  type: "float"
                  format: "float"
                  example: 50
                real_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_top:
                  type: "float"
                  format: "float"
                  example: 50
                real_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_width:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_height:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_top:
                  type: "float"
                  format: "float"
                  example: 50
                show_bleed:
                  type: "boolean"
                  example: true
                bleed_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                bleed_left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
                show_safe_zone:
                  type: "boolean"
                  example: true
                margin_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50
                margin_left_right:
                  type: "float"
                  format: "float"
                  example: 50
                background_img:
                  $ref: "#/definitions/ImageResponse"
                created_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
                updated_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            pdf_url:
              type: "string"
            product:
              $ref: "#/definitions/ProductResponse"
            preview_image:
              $ref: "#/definitions/ImageResponse"
            design_image:
              $ref: "#/definitions/ImageResponse"
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart note"
            status:
              type: "string"
              enum:
                - "accepted"
                - "processing"
                - "declined"
                - "trashed"
                - "deleted"
              example: "accepted"
            original_output_options:
              type: "object"
              properties:
                dpi:
                  type: "integer"
                  format: "int64"
                  example: 500
                dimension_unit:
                  type: "string"
                  enum:
                    - "inch"
                    - "cm"
                  example: "inch"
            original_side:
              type: "object"
              properties:
                id:
                  type: "string"
                  example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                product:
                  $ref: "#/definitions/ProductResponse"
                name:
                  type: "string"
                  example: "printcart"
                bg_type:
                  type: "string"
                  enum:
                    - "color"
                    - "image"
                    - "transparent"
                  example: "image"
                bg_color_value:
                  type: "string"
                  example: "red"
                img_top_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_left_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_bottom_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_right_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_overlay:
                  $ref: "#/definitions/ImageResponse"
                version:
                  type: "string"
                  example: "version 1.0.0"
                ratio:
                  type: "integer"
                  format: "int64"
                  example: 100
                background_included:
                  type: "boolean"
                  example: true
                show_overlay:
                  type: "boolean"
                  example: true
                include_overlay:
                  type: "boolean"
                  example: true
                product_width:
                  type: "float"
                  format: "float"
                  example: 50
                product_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_width:
                  type: "float"
                  format: "float"
                  example: 50
                real_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_top:
                  type: "float"
                  format: "float"
                  example: 50
                real_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_width:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_height:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_top:
                  type: "float"
                  format: "float"
                  example: 50
                show_bleed:
                  type: "boolean"
                  example: true
                bleed_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                bleed_left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
                show_safe_zone:
                  type: "boolean"
                  example: true
                margin_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50
                margin_left_right:
                  type: "float"
                  format: "float"
                  example: 50
                background_img:
                  $ref: "#/definitions/ImageResponse"
                created_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
                updated_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
            layers:
              type: "array"
              items:
                type: "object"
                properties:
                  top:
                    type: "float"
                    example: 38.9832354205
                  left:
                    type: "float"
                    example: 329.6631024663
                  text:
                    type: "string"
                    example: "Heading"
                  width:
                    type: "integer"
                    format: "int64"
                    example: 158
                  height:
                    type: "integer"
                    format: "int64"
                    example: 47.46
                  originX:
                    type: "string"
                    example: "left"
                  originY:
                    type: "string"
                    example: "top"
                  fontSize:
                    type: "integer"
                    format: "int64"
                    example: 42
                  minWidth:
                    type: "integer"
                    format: "int64"
                    example: 20
                  fontStyle:
                    type: "string"
                    example: "normal"
                  textAlign:
                    type: "string"
                    example: "left"
                  underline:
                    type: "boolean"
                    example: false,
                  fontFamily:
                    type: "string"
                    example: "Roboto"
                  fontWeight:
                    type: "string"
                    example: "normal"
            viewport_width:
              type: "number"
              format: "float"
              example: 50.50
            viewport_height:
              type: "number"
              format: "float"
              example: 50.50
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "DesignBatchUpdateResponse"
  DesignCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignCount"
  DesignResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      project:
        $ref: "#/definitions/ProjectResponse"
      side:
        type: "object"
        properties:
          id:
            type: "string"
            example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
          product:
            $ref: "#/definitions/ProductResponse"
          name:
            type: "string"
            example: "printcart"
          bg_type:
            type: "string"
            enum:
              - "color"
              - "image"
              - "transparent"
            example: "image"
          bg_color_value:
            type: "string"
            example: "red"
          img_top_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_left_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_bottom_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_right_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_overlay:
            $ref: "#/definitions/ImageResponse"
          version:
            type: "string"
            example: "version 1.0.0"
          ratio:
            type: "integer"
            format: "int64"
            example: 100
          background_included:
            type: "boolean"
            example: true
          show_overlay:
            type: "boolean"
            example: true
          include_overlay:
            type: "boolean"
            example: true
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
          real_width:
            type: "float"
            format: "float"
            example: 50
          real_height:
            type: "float"
            format: "float"
            example: 50
          real_top:
            type: "float"
            format: "float"
            example: 50
          real_left:
            type: "float"
            format: "float"
            example: 50
          area_design_width:
            type: "float"
            format: "float"
            example: 50
          area_design_height:
            type: "float"
            format: "float"
            example: 50
          area_design_left:
            type: "float"
            format: "float"
            example: 50
          area_design_top:
            type: "float"
            format: "float"
            example: 50
          show_bleed:
            type: "boolean"
            example: true
          bleed_top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          bleed_left_right:
            type: "float"
            format: "float"
            example: 50.50
          show_safe_zone:
            type: "boolean"
            example: true
          margin_top_bottom:
            type: "float"
            format: "float"
            example: 50
          margin_left_right:
            type: "float"
            format: "float"
            example: 50
          background_img:
            $ref: "#/definitions/ImageResponse"
          created_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
          updated_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
      product:
        $ref: "#/definitions/ProductResponse"
      preview_image:
        $ref: "#/definitions/ImageResponse"
      design_image:
        $ref: "#/definitions/ImageResponse"
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart note"
      status:
        type: "string"
        enum:
          - "accepted"
          - "processing"
          - "declined"
          - "trashed"
          - "deleted"
        example: "accepted"
      original_output_options:
        type: "object"
        properties:
          dpi:
            type: "integer"
            format: "int64"
            example: 500
          dimension_unit:
            type: "string"
            enum:
              - "inch"
              - "cm"
            example: "inch"
      original_side:
        type: "object"
        properties:
          id:
            type: "string"
            example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
          product:
            $ref: "#/definitions/ProductResponse"
          name:
            type: "string"
            example: "printcart"
          bg_type:
            type: "string"
            enum:
              - "color"
              - "image"
              - "transparent"
            example: "image"
          bg_color_value:
            type: "string"
            example: "red"
          img_top_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_left_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_bottom_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_right_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_overlay:
            $ref: "#/definitions/ImageResponse"
          version:
            type: "string"
            example: "version 1.0.0"
          ratio:
            type: "integer"
            format: "int64"
            example: 100
          background_included:
            type: "boolean"
            example: true
          show_overlay:
            type: "boolean"
            example: true
          include_overlay:
            type: "boolean"
            example: true
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
          real_width:
            type: "float"
            format: "float"
            example: 50
          real_height:
            type: "float"
            format: "float"
            example: 50
          real_top:
            type: "float"
            format: "float"
            example: 50
          real_left:
            type: "float"
            format: "float"
            example: 50
          area_design_width:
            type: "float"
            format: "float"
            example: 50
          area_design_height:
            type: "float"
            format: "float"
            example: 50
          area_design_left:
            type: "float"
            format: "float"
            example: 50
          area_design_top:
            type: "float"
            format: "float"
            example: 50
          show_bleed:
            type: "boolean"
            example: true
          bleed_top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          bleed_left_right:
            type: "float"
            format: "float"
            example: 50.50
          show_safe_zone:
            type: "boolean"
            example: true
          margin_top_bottom:
            type: "float"
            format: "float"
            example: 50
          margin_left_right:
            type: "float"
            format: "float"
            example: 50
          background_img:
            $ref: "#/definitions/ImageResponse"
          created_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
          updated_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
      layers:
        type: "array"
        items:
          type: "object"
          properties:
            top:
              type: "float"
              example: 38.9832354205
            left:
              type: "float"
              example: 329.6631024663
            text:
              type: "string"
              example: "Heading"
            width:
              type: "integer"
              format: "int64"
              example: 158
            height:
              type: "integer"
              format: "int64"
              example: 47.46
            originX:
              type: "string"
              example: "left"
            originY:
              type: "string"
              example: "top"
            fontSize:
              type: "integer"
              format: "int64"
              example: 42
            minWidth:
              type: "integer"
              format: "int64"
              example: 20
            fontStyle:
              type: "string"
              example: "normal"
            textAlign:
              type: "string"
              example: "left"
            underline:
              type: "boolean"
              example: false,
            fontFamily:
              type: "string"
              example: "Roboto"
            fontWeight:
              type: "string"
              example: "normal"
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "DesignResponse"
  DesignResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignResponseShowDataObject"
  DesignResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignResponseShowDataArray"
  DesignResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "DesignResponseStore"
  DesignResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/DesignResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "DesignResponseUpdate"
  DesignFont:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/FontResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "DesignFont"
  Template:
    type: "object"
    required:
      - "side_id"
    properties:
      project_id:
        type: "string"
        description: Project ID
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      side_id:
        type: "string"
        description: Side ID
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
        description: Lorem ipsum...
      preview_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_file:
        type: "file"
        description: Image file
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart"
      is_template:
        type: "boolean"
        default: true
        example: true
      layers:
        type: "json"
        description: "Lorem ipsum..."
        example:
          [
            {
              "top": 183.5025,
              "left": 195.79,
              "text": "Blackbird",
              "width": 68.33984375,
              "height": 22.6,
              "originX": "left",
              "originY": "top",
              "fontSize": 20,
              "fontStyle": "normal",
              "textAlign": "left",
              "fontFamily": "Yellowtail",
              "fontWeight": "normal",
            },
          ]
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
    xml:
      name: "Template"
  TemplateBatch:
    type: "object"
    required:
      - "side_id"
    properties:
      templates:
        type: "array"
        items:
          type: "array"
          $ref: "#/definitions/Design"
    xml:
      name: "TemplateBatch"
  TemplateBatchUpdate:
    type: "object"
    properties:
      templates:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Template ID
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project_id:
              type: "string"
              description: Project ID
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            side_id:
              type: "string"
              description: Side ID
              example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            pdf_url:
              type: "string"
              description: Lorem ipsum...
            preview_image_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            design_image_id:
              type: "string"
              description: Image ID
              example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
            design_file:
              type: "file"
              description: Image file
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart"
            layers:
              type: "application/json"
              description: "Lorem ipsum..."
              example:
                [
                  {
                    "top": 183.5025,
                    "left": 195.79,
                    "text": "Blackbird",
                    "width": 68.33984375,
                    "height": 22.6,
                    "originX": "left",
                    "originY": "top",
                    "fontSize": 20,
                    "fontStyle": "normal",
                    "textAlign": "left",
                    "fontFamily": "Yellowtail",
                    "fontWeight": "normal",
                  },
                ]
            viewport_width:
              type: "number"
              format: "float"
              example: 50.50
            viewport_height:
              type: "number"
              format: "float"
              example: 50.50
    xml:
      name: "TemplateBatchUpdate"
  TemplateResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
      project:
        $ref: "#/definitions/ProjectResponse"
      side:
        type: "object"
        properties:
          id:
            type: "string"
            example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
          product:
            $ref: "#/definitions/ProductResponse"
          name:
            type: "string"
            example: "printcart"
          bg_type:
            type: "string"
            enum:
              - "color"
              - "image"
              - "transparent"
            example: "image"
          bg_color_value:
            type: "string"
            example: "red"
          img_top_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_left_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_bottom_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_right_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_overlay:
            $ref: "#/definitions/ImageResponse"
          version:
            type: "string"
            example: "version 1.0.0"
          ratio:
            type: "integer"
            format: "int64"
            example: 100
          background_included:
            type: "boolean"
            example: true
          show_overlay:
            type: "boolean"
            example: true
          include_overlay:
            type: "boolean"
            example: true
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
          real_width:
            type: "float"
            format: "float"
            example: 50
          real_height:
            type: "float"
            format: "float"
            example: 50
          real_top:
            type: "float"
            format: "float"
            example: 50
          real_left:
            type: "float"
            format: "float"
            example: 50
          area_design_width:
            type: "float"
            format: "float"
            example: 50
          area_design_height:
            type: "float"
            format: "float"
            example: 50
          area_design_left:
            type: "float"
            format: "float"
            example: 50
          area_design_top:
            type: "float"
            format: "float"
            example: 50
          show_bleed:
            type: "boolean"
            example: true
          bleed_top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          bleed_left_right:
            type: "float"
            format: "float"
            example: 50.50
          show_safe_zone:
            type: "boolean"
            example: true
          margin_top_bottom:
            type: "float"
            format: "float"
            example: 50
          margin_left_right:
            type: "float"
            format: "float"
            example: 50
          background_img:
            $ref: "#/definitions/ImageResponse"
          created_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
          updated_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
      product:
        $ref: "#/definitions/ProductResponse"
      preview_image:
        $ref: "#/definitions/ImageResponse"
      design_image:
        $ref: "#/definitions/ImageResponse"
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart note"
      original_output_options:
        type: "object"
        properties:
          dpi:
            type: "integer"
            format: "int64"
            example: 500
          dimension_unit:
            type: "string"
            enum:
              - "inch"
              - "cm"
            example: "inch"
      original_side:
        type: "object"
        properties:
          id:
            type: "string"
            example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
          product:
            $ref: "#/definitions/ProductResponse"
          name:
            type: "string"
            example: "printcart"
          bg_type:
            type: "string"
            enum:
              - "color"
              - "image"
              - "transparent"
            example: "image"
          bg_color_value:
            type: "string"
            example: "red"
          img_top_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_left_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_bottom_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_right_pos:
            type: "float"
            format: "float"
            example: 50.5
          img_overlay:
            $ref: "#/definitions/ImageResponse"
          version:
            type: "string"
            example: "version 1.0.0"
          ratio:
            type: "integer"
            format: "int64"
            example: 100
          background_included:
            type: "boolean"
            example: true
          show_overlay:
            type: "boolean"
            example: true
          include_overlay:
            type: "boolean"
            example: true
          product_width:
            type: "float"
            format: "float"
            example: 50
          product_height:
            type: "float"
            format: "float"
            example: 50
          real_width:
            type: "float"
            format: "float"
            example: 50
          real_height:
            type: "float"
            format: "float"
            example: 50
          real_top:
            type: "float"
            format: "float"
            example: 50
          real_left:
            type: "float"
            format: "float"
            example: 50
          area_design_width:
            type: "float"
            format: "float"
            example: 50
          area_design_height:
            type: "float"
            format: "float"
            example: 50
          area_design_left:
            type: "float"
            format: "float"
            example: 50
          area_design_top:
            type: "float"
            format: "float"
            example: 50
          show_bleed:
            type: "boolean"
            example: true
          bleed_top_bottom:
            type: "float"
            format: "float"
            example: 50.50
          bleed_left_right:
            type: "float"
            format: "float"
            example: 50.50
          show_safe_zone:
            type: "boolean"
            example: true
          margin_top_bottom:
            type: "float"
            format: "float"
            example: 50
          margin_left_right:
            type: "float"
            format: "float"
            example: 50
          background_img:
            $ref: "#/definitions/ImageResponse"
          created_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
          updated_at:
            type: "string"
            example: "2021-11-16T08:26:30.000000Z"
      layers:
        type: "array"
        items:
          type: "object"
          properties:
            top:
              type: "float"
              example: 38.9832354205
            left:
              type: "float"
              example: 329.6631024663
            text:
              type: "string"
              example: "Heading"
            width:
              type: "integer"
              format: "int64"
              example: 158
            height:
              type: "integer"
              format: "int64"
              example: 47.46
            originX:
              type: "string"
              example: "left"
            originY:
              type: "string"
              example: "top"
            fontSize:
              type: "integer"
              format: "int64"
              example: 42
            minWidth:
              type: "integer"
              format: "int64"
              example: 20
            fontStyle:
              type: "string"
              example: "normal"
            textAlign:
              type: "string"
              example: "left"
            underline:
              type: "boolean"
              example: false,
            fontFamily:
              type: "string"
              example: "Roboto"
            fontWeight:
              type: "string"
              example: "normal"
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "TemplateResponse"
  TemplateBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/TemplateResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "TemplateBatchResponse"
  TemplateBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
            project:
              $ref: "#/definitions/ProjectResponse"
            side:
              type: "object"
              properties:
                id:
                  type: "string"
                  example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                product:
                  $ref: "#/definitions/ProductResponse"
                name:
                  type: "string"
                  example: "printcart"
                bg_type:
                  type: "string"
                  enum:
                    - "color"
                    - "image"
                    - "transparent"
                  example: "image"
                bg_color_value:
                  type: "string"
                  example: "red"
                img_top_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_left_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_bottom_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_right_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_overlay:
                  $ref: "#/definitions/ImageResponse"
                version:
                  type: "string"
                  example: "version 1.0.0"
                ratio:
                  type: "integer"
                  format: "int64"
                  example: 100
                background_included:
                  type: "boolean"
                  example: true
                show_overlay:
                  type: "boolean"
                  example: true
                include_overlay:
                  type: "boolean"
                  example: true
                product_width:
                  type: "float"
                  format: "float"
                  example: 50
                product_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_width:
                  type: "float"
                  format: "float"
                  example: 50
                real_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_top:
                  type: "float"
                  format: "float"
                  example: 50
                real_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_width:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_height:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_top:
                  type: "float"
                  format: "float"
                  example: 50
                show_bleed:
                  type: "boolean"
                  example: true
                bleed_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                bleed_left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
                show_safe_zone:
                  type: "boolean"
                  example: true
                margin_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50
                margin_left_right:
                  type: "float"
                  format: "float"
                  example: 50
                background_img:
                  $ref: "#/definitions/ImageResponse"
                created_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
                updated_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
            design_ratio:
              type: "number"
              format: "float"
              example: 50.50
            pdf_url:
              type: "string"
            product:
              $ref: "#/definitions/ProductResponse"
            preview_image:
              $ref: "#/definitions/ImageResponse"
            design_image:
              $ref: "#/definitions/ImageResponse"
            quantity:
              type: "integer"
              format: "int64"
              example: 50
            note:
              type: "string"
              example: "printcart note"
            original_output_options:
              type: "object"
              properties:
                dpi:
                  type: "integer"
                  format: "int64"
                  example: 500
                dimension_unit:
                  type: "string"
                  enum:
                    - "inch"
                    - "cm"
                  example: "inch"
            original_side:
              type: "object"
              properties:
                id:
                  type: "string"
                  example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
                product:
                  $ref: "#/definitions/ProductResponse"
                name:
                  type: "string"
                  example: "printcart"
                bg_type:
                  type: "string"
                  enum:
                    - "color"
                    - "image"
                    - "transparent"
                  example: "image"
                bg_color_value:
                  type: "string"
                  example: "red"
                img_top_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_left_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_bottom_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_right_pos:
                  type: "float"
                  format: "float"
                  example: 50.5
                img_overlay:
                  $ref: "#/definitions/ImageResponse"
                version:
                  type: "string"
                  example: "version 1.0.0"
                ratio:
                  type: "integer"
                  format: "int64"
                  example: 100
                background_included:
                  type: "boolean"
                  example: true
                show_overlay:
                  type: "boolean"
                  example: true
                include_overlay:
                  type: "boolean"
                  example: true
                product_width:
                  type: "float"
                  format: "float"
                  example: 50
                product_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_width:
                  type: "float"
                  format: "float"
                  example: 50
                real_height:
                  type: "float"
                  format: "float"
                  example: 50
                real_top:
                  type: "float"
                  format: "float"
                  example: 50
                real_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_width:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_height:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_left:
                  type: "float"
                  format: "float"
                  example: 50
                area_design_top:
                  type: "float"
                  format: "float"
                  example: 50
                show_bleed:
                  type: "boolean"
                  example: true
                bleed_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50.50
                bleed_left_right:
                  type: "float"
                  format: "float"
                  example: 50.50
                show_safe_zone:
                  type: "boolean"
                  example: true
                margin_top_bottom:
                  type: "float"
                  format: "float"
                  example: 50
                margin_left_right:
                  type: "float"
                  format: "float"
                  example: 50
                background_img:
                  $ref: "#/definitions/ImageResponse"
                created_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
                updated_at:
                  type: "string"
                  example: "2021-11-16T08:26:30.000000Z"
            viewport_width:
              type: "number"
              format: "float"
              example: 50.50
            viewport_height:
              type: "number"
              format: "float"
              example: 50.50
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "TemplateBatchUpdateResponse"
  TemplateBatchDelete:
    type: "object"
    properties:
      templates:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Template ID
              example: "cce4dc71-6757-4a1c-a259-6b66a4304c14"
    xml:
      name: "TemplateBatchDelete"
  TemplateResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/TemplateResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "TemplateResponseStore"
  TemplateResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/TemplateResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "TemplateResponseShowDataObject"
  TemplateResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/TemplateResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "TemplateResponseShowDataArray"
  TemplateResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/TemplateResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "TemplateResponseUpdate"
  TemplateUpdate:
    type: "object"
    properties:
      project_id:
        type: "string"
        description: Project ID
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      side_id:
        type: "string"
        description: Side ID
        example: "c5661a1e-8147-4dc3-8600-00fdc81ed14b"
      design_ratio:
        type: "number"
        format: "float"
        example: 50.50
      pdf_url:
        type: "string"
        description: Lorem ipsum...
      preview_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_image_id:
        type: "string"
        description: Image ID
        example: "e8304b84-a015-3bd4-a7d3-7a978f465df2"
      design_file:
        type: "file"
        description: Image file
      quantity:
        type: "integer"
        format: "int64"
        example: 50
      note:
        type: "string"
        example: "printcart"
      layers:
        type: "json"
        description: "Lorem ipsum..."
        example:
          [
            {
              "top": 183.5025,
              "left": 195.79,
              "text": "Blackbird",
              "width": 68.33984375,
              "height": 22.6,
              "originX": "left",
              "originY": "top",
              "fontSize": 20,
              "fontStyle": "normal",
              "textAlign": "left",
              "fontFamily": "Yellowtail",
              "fontWeight": "normal",
            },
          ]
      viewport_width:
        type: "number"
        format: "float"
        example: 50.50
      viewport_height:
        type: "number"
        format: "float"
        example: 50.50
    xml:
      name: "TemplateUpdate"
  Category:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
        description: The name given to a storage
        example: "printcart"
      parent_id:
        type: "string"
        description: Storage ID
        example: null
    xml:
      name: "Category"
  CategoryUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: Updated name of the storage
        example: "printcart"
      parent_id:
        type: "string"
        description: Storage ID
        example: null
    xml:
      name: "CategoryUpdate"
  CategoryCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryCount"
  CategoryResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "57eea14b-4e8d-4b7b-b864-b31cb8e6ac62"
      name:
        type: "string"
        example: "printcart"
      parent_storage_id:
        type: "string"
        example: null
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "CategoryResponse"
  CategoryResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryResponseShowDataObject"
  CategoryResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "CategoryResponseShowDataArray"
  CategoryResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "CategoryResponseStore"
  CategoryResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/CategoryResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "CategoryResponseUpdate"
  Project:
    type: "object"
    properties:
      name:
        type: "string"
        description: The name given to a project
        example: "printcart"
      status:
        type: "string"
        default: "processing"
        enum:
          - "processing"
          - "reviewing"
          - "accepted"
          - "trashed"
          - "deleted"
        description: Project status
        example: "processing"
      note:
        type: "string"
        example: "printcart note"
      design_ids:
        type: "array"
        example:
          [
            "8e7ee612-4667-474c-809a-ff848400f7a3",
            "42f4a0e7-3ea4-4f62-9a04-0b41fb8c69d1",
          ]
    xml:
      name: "Project"
  ProjectUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: The name given to a project
        example: "printcart"
      status:
        type: "string"
        default: "processing"
        enum:
          - "processing"
          - "reviewing"
          - "accepted"
          - "trashed"
          - "deleted"
        description: Project status
        example: "processing"
      note:
        type: "string"
        example: "printcart note"
    xml:
      name: "ProjectUpdate"
  ProjectBatch:
    type: "object"
    required:
      - "name"
    properties:
      projects:
        type: "array"
        items:
          properties:
            name:
              type: "string"
              description: The name given to a project
              example: "printcart"
            status:
              type: "string"
              default: "processing"
              enum:
                - "processing"
                - "reviewing"
                - "accepted"
                - "trashed"
                - "deleted"
              description: Project status
              example: "processing"
            note:
              type: "string"
              example: "printcart note"
    xml:
      name: "ProjectBatch"
  ProjectBatchUpdate:
    type: "object"
    required:
      - "name"
    properties:
      projects:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Project ID
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            name:
              type: "string"
              description: Updated name of the project
              example: "printcart"
            status:
              type: "string"
              enum:
                - "processing"
                - "reviewing"
                - "accepted"
                - "trashed"
                - "deleted"
              description: Project status
              example: "processing"
            note:
              type: "string"
              example: "printcart note"
    xml:
      name: "ProjectBatchUpdate"
  ProjectBatchDelete:
    type: "object"
    properties:
      projects:
        type: "array"
        items:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "string"
              description: Project ID
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
    xml:
      name: "ProjectBatchDelete"
  ProjectCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectCount"
  ProjectResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
      name:
        type: "string"
        example: "printcart"
      status:
        type: "string"
        enum:
          - "processing"
          - "reviewing"
          - "accepted"
          - "trashed"
          - "deleted"
        example: "processing"
      note:
        type: "string"
        example: "printcart note"
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "ProjectResponse"
  ProjectResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectResponseShowDataObject"
  ProjectResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "ProjectResponseShowDataArray"
  ProjectResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProjectResponseStore"
  ProjectBatchResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "ProjectBatchResponse"
  ProjectBatchUpdateResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              example: "4419934f-8e1b-4cf0-b432-01ef9258a812"
            name:
              type: "string"
              example: "printcart"
            status:
              type: "string"
              enum:
                - "processing"
                - "reviewing"
                - "accepted"
                - "trashed"
                - "deleted"
              example: "processing"
            note:
              type: "string"
              example: "printcart note"
            created_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
            updated_at:
              type: "string"
              example: "2021-11-16T08:26:30.000000Z"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProjectBatchUpdateResponse"
  ProjectResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/ProjectResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "ProjectResponseUpdate"
  Webhook:
    type: "object"
    required:
      - "event"
      - "callback_url"
      - "topic"
    properties:
      event:
        type: "string"
        default: "POST"
        enum:
          - "POST"
          - "PUT"
          - "DELETE"
          - "POST BATCH"
          - "PUT BATCH"
          - "DELETE BATCH"
        description: Event that triggers the webhook.
        example: "POST"
      callback_url:
        type: "string"
        format: "url"
        example: "https://printcart.com/webhook-receiving-url/xxxx"
      topic:
        type: "string"
        enum:
          - "projects"
          - "products"
          - "designs"
          - "templates"
          - "sides"
        example: "projects"
    xml:
      name: "Webhook"
  WebhookUpdate:
    type: "object"
    properties:
      event:
        type: "string"
        enum:
          - "POST"
          - "PUT"
          - "DELETE"
          - "POST BATCH"
          - "PUT BATCH"
          - "DELETE BATCH"
        description: Event that triggers the webhook.
        example: "POST"
      callback_url:
        type: "string"
        format: "url"
        example: "https://printcart.com/webhook-receiving-url/xxxx"
      topic:
        type: "string"
        enum:
          - "projects"
          - "products"
          - "designs"
          - "templates"
          - "sides"
        example: "projects"
    xml:
      name: "WebhookUpdate"
  WebhookResponse:
    type: "object"
    properties:
      id:
        type: "string"
        example: "ad8d432f-4c7d-459d-9f2f-4a6821666102"
      event:
        type: "string"
        example: "POST"
      callback_url:
        type: "string"
        example: "https://printcart.com/webhook-receiving-url/xxxx"
      topic:
        type: "string"
        example: "projects"
      created_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
      updated_at:
        type: "string"
        example: "2021-11-16T08:26:30.000000Z"
    xml:
      name: "WebhookResponse"
  WebhookResponseShowDataObject:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/WebhookResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "WebhookResponseShowDataObject"
  WebhookResponseShowDataArray:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/WebhookResponse"
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "WebhookResponseShowDataArray"
  WebhookResponseStore:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/WebhookResponse"
      message:
        type: "string"
        description: "Created successfully"
        example: "Created successfully"
    xml:
      name: "WebhookResponseStore"
  WebhookResponseUpdate:
    type: "object"
    properties:
      data:
        type: "object"
        $ref: "#/definitions/WebhookResponse"
      message:
        type: "string"
        description: "Updated successfully"
        example: "Updated successfully"
    xml:
      name: "WebhookResponseUpdate"
  WebhookCount:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          count:
            type: "integer"
            format: "int64"
            example: 10
      message:
        type: "string"
        description: "Retrieved successfully"
        example: "Retrieved successfully"
    xml:
      name: "WebhookCount"
  Unauthenticated:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Unauthenticated"
        example: "Unauthenticated"
    xml:
      name: "Unauthenticated"
  InvalidInput:
    type: "object"
    properties:
      error:
        type: "object"
        properties:
          field_name:
            type: "array"
            items:
              type: "string"
              example: That field error message
      message:
        type: "string"
        description: "Invalid input"
        example: "Invalid input"
    xml:
      name: "InvalidInput"
  NotFound:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Not found"
        example: "Not found"
    xml:
      name: "NotFound"
  InvalidAvatarFile:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Invalid avatar file"
        example: "Invalid avatar file"
    xml:
      name: "InvalidAvatarFile"
  MultipartFormData:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not upload design file with your Content Type"
        example: "Can not upload design file with your Content Type"
    xml:
      name: "MultipartFormData"
  MissingDesignFile:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Missing design file"
        example: "Missing design file"
    xml:
      name: "MissingDesignFile"
  InvalidDesignFile:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Invalid design file"
        example: "Invalid design file"
    xml:
      name: "InvalidDesignFile"
  ProductError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find product with id"
        example: "Can't find product with id: 962af342-a2c9-4665-bb5d-cb208258d958"
    xml:
      name: "ProductError"
  DesignError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find design with id"
        example: "Can't find design with id: cce4dc71-6757-4a1c-a259-6b66a4304c14"
    xml:
      name: "DesignError"
  ProjectDesignError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
        example: "Design uuid: cce4dc71-6757-4a1c-a259-6b66a4304c14 already belong to another project"
    xml:
      name: "ProjectDesignError"
  SideError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find side with id"
        example: "Can't find side with id: c5661a1e-8147-4dc3-8600-00fdc81ed14b"
    xml:
      name: "SideError"
  ClipartError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find clipart with id"
        example: "Can't find clipart with id: 3f2b04a2-8aa9-31a7-82b0-3e2b94c815fe"
    xml:
      name: "ClipartError"
  ProjectError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find project with id"
        example: "Can't find project with id: 4419934f-8e1b-4cf0-b432-01ef9258a812"
    xml:
      name: "ProjectError"
  ImageError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Can't find images with id"
        example: "Can't find images with id: 248f7975-a9f5-3466-b014-69abae9xxxxx"
    xml:
      name: "ImageError"
  Forbidden:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Forbidden"
        example: "Forbidden"
    xml:
      name: "Forbidden"
  Deleted:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Deleted successfully"
        example: "Deleted successfully"
    xml:
      name: "Deleted"
  CreateSideHeaderContentType:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not create side new with your Content Type"
        example: "Can not create side new with your Content Type"
    xml:
      name: "CreateSideHeaderContentType"
  CreateBatchSideHeaderContentType:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not create sides new with your Content Type"
        example: "Can not create sides new with your Content Type"
    xml:
      name: "CreateBatchSideHeaderContentType"
  UpdateSideHeaderContentType:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not update side with your Content Type"
        example: "Can not update side with your Content Type"
    xml:
      name: "UpdateSideHeaderContentType"
  UpdateBatchSideHeaderContentType:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not update sides with your Content Type"
        example: "Can not update sides with your Content Type"
    xml:
      name: "UpdateBatchSideHeaderContentType"
  DeleteBatchSideHeaderContentType:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Can not delete sides with your Content Type"
        example: "Can not delete sides with your Content Type"
    xml:
      name: "DeleteBatchSideHeaderContentType"
  CheckUserTier:
    type: "object"
    properties:
      message:
        description: "Please upgrade your account. For more new experiences!"
        example: "Please upgrade your account. For more new experiences!"
    xml:
      name: "CheckUserTier"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
